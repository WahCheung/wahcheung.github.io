<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>工程师学徒</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cheung.site/"/>
  <updated>2019-05-13T11:59:26.642Z</updated>
  <id>https://cheung.site/</id>
  
  <author>
    <name>龚华昌</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用树莓派搭建自动驾驶小车</title>
    <link href="https://cheung.site/2018/12/25/raspberry-pi-self-driving-car/"/>
    <id>https://cheung.site/2018/12/25/raspberry-pi-self-driving-car/</id>
    <published>2018-12-25T02:52:23.000Z</published>
    <updated>2019-05-13T11:59:26.642Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一年多以前得知树莓派这样神奇的卡片式电脑的存在，于是入手了当作家用服务器来用。以前放在客厅里，室友不小心扯到电源线然后整个树莓派盒子掉水箱里了，电吹风吹一吹再自然晾干，竟然满血复活了！通过隔三叉四的知识积累，慢慢就知道了树莓派提供的丰富的GPIO口才是其精华，只当一个小主机来用实在是暴殄天物了，这个卡片式电脑配上那40个GPIO口，可以完成的作品超乎想象。后来萌生了做一个遥控车的想法，然后又想着，既然都能遥控了，为什么不让它自动驾驶呢。于是我买回来了小车底盘、4个直流减速电机（就是小时候玩的四驱车里面的那种小马达）、树莓派专用摄像头等零件，有了这些，我差不多就可以开始“闭门造车”了。</p></blockquote><a id="more"></a><p>整个造车过程中，需要解决的问题比较多，比较细碎，关键是怎么将硬件和软件控制部分结合起来，收集什么样的样本进行训练，最后的自动驾驶用到的机器学习部分反而是最容易做到的，因为这一块已经有像Scikit-Learn和TensorFlow之类的成熟的机器学习库。</p><h3 id="远程遥控"><a href="#远程遥控" class="headerlink" title="远程遥控"></a>远程遥控</h3><p>由于需要采集无人驾驶小车的驾驶样本，在做一辆能够无人驾驶的小车前，需要先具备有人驾驶的能力，即遥控功能。遥控小车常用的有两种方案，一个是用红外遥控，另一个是使用键盘。目前两种方案都已实现。我先是尝试了红外遥控的方案，这需要一个红外遥控器和一个红外接收器，这个是差不多是整个造车过程中最波折的部分，但效果却差强人意。买回来的红外接收器通电之后直接烧坏了，原因是接线错误。于是又买了两个，运费比零件本身还要贵（红外接收器一个就一块多）。这次问商家要了电路图，总算没有接错线，终于可以开始摆弄软件部分，结果后面发现<code>irw</code>命令没有任何相应。中间停滞了一个星期，尝试了很多方法，还重装了系统却还是没法解决。最后的最后，发现这是树莓派Raspbian Stretch操作系统采用的<code>LIRC</code>驱动软件的问题，好在偶然在国外一个论坛上发现了解决方案。终于把红外遥控功能做出来了。然后将树莓派的网络从网线切换到WiFi，用充电宝给树莓派供电、电池盒给L298N电机驱动模块供电，实现了遥控小车的落地行走。<br>不过由于红外线自身的特性（光波不能透过障碍物），遥控器和红外接收器要对着（跟电视遥控器一样），这使得红外遥控实践起来，操作不是很方便，整个人跟着小车跑，遥控器对着小车，没有了自由奔放的感觉…<br>于是决定采用键盘遥控的方案。我特地买来了一个蓝牙键盘，想着可以通过这块蓝牙键盘直接连接树莓派进行遥控，但却没有成功，使用<code>pygame</code>库编写的程序完全没有接收到键盘的事件响应。其中的原因暂时没有去深究，不过很快想到了另外一种可行性比较高的方法：在树莓派上通过<code>socket</code>起一个服务(Server端)去接收其他主机(Client端)发送过来的指令，从而达到远程遥控的目的。而Client端就用我的笔记本电脑，通过键盘的上下左右键控制小车行进方向。我的蓝牙键盘直接连接笔记本电脑，笔记本电脑这边的程序监听着本地的键盘事件，将其发送到树莓派，树莓派接收到指令并进行响应，这就是<strong>Remote Control</strong>的整体流程。</p><h3 id="硬件设备"><a href="#硬件设备" class="headerlink" title="硬件设备"></a>硬件设备</h3><table><thead><tr><th>设备</th><th>作用</th></tr></thead><tbody><tr><td>树莓派</td><td>主控</td></tr><tr><td>L298N电机驱动模块</td><td>驱动直流电机(马达)</td></tr><tr><td>4个直流减速电机</td><td>控制轮子转动</td></tr><tr><td>带轮子的小车底盘</td><td>小车的外壳</td></tr><tr><td>充电宝&amp;18650电池盒</td><td>给树莓派和电机驱动板供电</td></tr><tr><td>树莓派摄像头</td><td>提供视野，采集样本</td></tr><tr><td>杜邦线若干</td><td>线路连接</td></tr></tbody></table><p>上面是实现基本的自动驾驶功能所需要的主要零件，不过为了组装和固定，还需要摄像头支架、螺柱、螺丝之类的细碎零件。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一年多以前得知树莓派这样神奇的卡片式电脑的存在，于是入手了当作家用服务器来用。以前放在客厅里，室友不小心扯到电源线然后整个树莓派盒子掉水箱里了，电吹风吹一吹再自然晾干，竟然满血复活了！通过隔三叉四的知识积累，慢慢就知道了树莓派提供的丰富的GPIO口才是其精华，只当一个小主机来用实在是暴殄天物了，这个卡片式电脑配上那40个GPIO口，可以完成的作品超乎想象。后来萌生了做一个遥控车的想法，然后又想着，既然都能遥控了，为什么不让它自动驾驶呢。于是我买回来了小车底盘、4个直流减速电机（就是小时候玩的四驱车里面的那种小马达）、树莓派专用摄像头等零件，有了这些，我差不多就可以开始“闭门造车”了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="树莓派" scheme="https://cheung.site/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="树莓派" scheme="https://cheung.site/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="自动驾驶" scheme="https://cheung.site/tags/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>树莓派红外遥控模块</title>
    <link href="https://cheung.site/2018/11/27/raspberry-pi-infrared-remote-controller/"/>
    <id>https://cheung.site/2018/11/27/raspberry-pi-infrared-remote-controller/</id>
    <published>2018-11-27T10:58:20.000Z</published>
    <updated>2019-05-13T11:59:27.354Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>从红外遥控模块的安装到投入使用费了不少时间, 在此记录一下。我使用的是<code>HX1838遥控模块</code>, 第一次买回来插线上电, 由于接反了正负极, 红外接收器马上就啪一声烧掉了, 于是又在淘宝买了<code>HX1838红外接收器</code>。得到的教训是, 对于电子元器件还是要好好找店家要电路图, 切勿凭经验、感觉。接线的时候串联一个电阻也能起到保护电路的作用。<br>红外遥控是得到Linux内核支持的, 我们需要安装必要的<code>lirc</code>库(<code>LIRC</code>全称<code>Linux Infrared Remote Control</code>), 然后通过几个文件配置红外遥控的相关参数, 可以认为, 遥控器不同按键发出的信号在接收端就表现为不一样的电信号序列, 我们需要设置这些信号序列对应了遥控器上的哪个键, 除此之外, 我们还可以自定义这些按键的行为。关于<code>LIRC</code>, 官网有很详细的Manual <a href="http://www.lirc.org/html/index.html" target="_blank" rel="noopener">Welcome to the LIRC Manual</a></p></blockquote><a id="more"></a><h3 id="LIRC安装"><a href="#LIRC安装" class="headerlink" title="LIRC安装"></a>LIRC安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install lirc</span><br><span class="line">$ sudo apt-get install liblircclient-dev</span><br></pre></td></tr></table></figure><p>如果要使用<code>pylirc</code>, 必须要安装<code>liblircclient-dev</code>, 否则使用<code>pip install python-lirc</code>安装<code>python-lirc</code>时会出现以下错误:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lirc/lirc.c:276:30: fatal error: lirc/lirc_client.h: No such file or directory</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim  /etc/lirc/hardware.conf</span><br></pre></td></tr></table></figure><p>添加以下内容:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Arguments which will be used when launching lircd</span></span><br><span class="line">LIRCD_ARGS=<span class="string">"--uinput"</span></span><br><span class="line"><span class="comment"># Don't start lircmd even if there seems to be a good config file</span></span><br><span class="line"><span class="comment"># START_LIRCMD=false</span></span><br><span class="line"><span class="comment"># Don't start irexec, even if a good config file seems to exist.</span></span><br><span class="line"><span class="comment"># START_IREXEC=false</span></span><br><span class="line"><span class="comment"># Try to load appropriate kernel modules</span></span><br><span class="line">LOAD_MODULES=<span class="literal">true</span></span><br><span class="line"><span class="comment"># Run "lircd --driver=help" for a list of supported drivers.</span></span><br><span class="line">DRIVER=<span class="string">"default"</span></span><br><span class="line"><span class="comment"># usually /dev/lirc0 is the correct setting for systems using udev</span></span><br><span class="line">DEVICE=<span class="string">"/dev/lirc0"</span></span><br><span class="line">MODULES=<span class="string">"lirc_rpi"</span></span><br><span class="line"><span class="comment"># Default configuration files for your hardware if any</span></span><br><span class="line">LIRCD_CONF=<span class="string">""</span></span><br><span class="line">LIRCMD_CONF=<span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/modules</span><br></pre></td></tr></table></figure><p>添加以下两行, <code>gpio_in_pin=18</code>表示红外接收模块的信号从树莓派的GPIO口18Pin处输入, 此处18是采用BCM编码的端口编号。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lirc_dev</span><br><span class="line">lirc_rpi gpio_in_pin=18</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /boot/config.txt</span><br></pre></td></tr></table></figure><p>找到下面的设置, 把前面的<code>#</code>去掉, 取消注释。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#dtoverlay=lirc-rpi</span></span><br></pre></td></tr></table></figure><p>修改<code>/boot/config.txt</code>后需要重启树莓派:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo shutdown -r now</span><br></pre></td></tr></table></figure><h3 id="LIRC测试"><a href="#LIRC测试" class="headerlink" title="LIRC测试"></a>LIRC测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo modprobe lirc_rpi</span><br><span class="line">$ sudo /etc/init.d/lircd stop</span><br><span class="line">$ sudo mode2 --driver default --device /dev/lirc0</span><br></pre></td></tr></table></figure><p>按下一个键命令行会输出很多行, 大致如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Using driver default on device /dev/lirc0</span><br><span class="line">Trying device: /dev/lirc0</span><br><span class="line">Using device: /dev/lirc0</span><br><span class="line">Running as regular user pi</span><br><span class="line">space 16777215</span><br><span class="line">pulse 9135</span><br><span class="line">space 4457</span><br><span class="line">pulse 586</span><br><span class="line">space 549</span><br><span class="line">pulse 586</span><br><span class="line">space 549</span><br><span class="line">pulse 585</span><br><span class="line">...此处省略多行</span><br></pre></td></tr></table></figure><p>国内外大部分的教程使用的命令都是下面这种, 但在我自己的板子上却不管用:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo modprobe lirc_rpi</span><br><span class="line">$ sudo /etc/init.d/lirc stop</span><br><span class="line">$ sudo mode2 -d /dev/lirc0</span><br></pre></td></tr></table></figure><p>我的系统路径<code>/etc/init.d/</code>下没有<code>lirc</code>, 而是<code>lircd</code>, 但这两个实质上没有区别, 实际上有哪个就对应修改一下就好。关键是上面第三行的命令, <code>sudo mode2 -d /dev/lirc0</code>在我的机器上输出的东西跟教程完全不一样, 如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ mode2 -d /dev/lirc0</span><br><span class="line">Using driver devinput on device /dev/lirc0</span><br><span class="line">Trying device: /dev/lirc0</span><br><span class="line">Using device: /dev/lirc0</span><br><span class="line">Partial <span class="built_in">read</span> 8 bytes on /dev/lirc0pi@raspberrypi:~ $</span><br></pre></td></tr></table></figure><p>这个在StackOverflow上有网友遇到一模一样的问题, 上面使用<code>sudo mode2 --driver default --device /dev/lirc0</code>的做法就是高票回答中给出的, 参考 <a href="https://stackoverflow.com/questions/48453355/lirc-partial-read-8-bytes" target="_blank" rel="noopener">LIRC partial read 8 bytes</a>.</p><h3 id="设置红外遥控键-值对应关系"><a href="#设置红外遥控键-值对应关系" class="headerlink" title="设置红外遥控键-值对应关系"></a>设置红外遥控键-值对应关系</h3><p>LIRC中的<code>irrecord</code>是用来生成遥控器配置文件的, 我们需要使用这个工具生成遥控器按键(红外信号)与自定义按键名的对应关系。</p><p>按键名不是随意设置的, 可以使用命令<code>irrecord --list-namespace</code>查看支持的按键名.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ irrecord -d /dev/lirc0 ~/lircd.conf</span><br></pre></td></tr></table></figure><p>在出现提示后需要几次回车确认, 然后进入下面的设置流程:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Enter name of remote (only ascii, no spaces) :controller</span><br><span class="line">Using controller.lircd.conf as output filename</span><br><span class="line"></span><br><span class="line">Hold down an arbitrary key</span><br><span class="line">................................................................................</span><br><span class="line">Found gap (512 us)</span><br><span class="line"></span><br><span class="line">Please enter the name <span class="keyword">for</span> the next button (press &lt;ENTER&gt; to finish recording)</span><br><span class="line">KEY_NUMERIC_0</span><br><span class="line"></span><br><span class="line">Now hold down button <span class="string">"KEY_NUMERIC_0"</span>.</span><br><span class="line"></span><br><span class="line">Please enter the name <span class="keyword">for</span> the next button (press &lt;ENTER&gt; to finish recording)</span><br><span class="line">KEY_NUMERIC_0</span><br><span class="line">Button KEY_NUMERIC_0 is already recorded, removing old data.</span><br><span class="line"></span><br><span class="line">Now hold down button <span class="string">"KEY_NUMERIC_0"</span>.</span><br><span class="line"></span><br><span class="line">Please enter the name <span class="keyword">for</span> the next button (press &lt;ENTER&gt; to finish recording)</span><br><span class="line">KEY_NUMERIC_1</span><br><span class="line"></span><br><span class="line">Now hold down button <span class="string">"KEY_NUMERIC_1"</span>.</span><br><span class="line"></span><br><span class="line">Please enter the name <span class="keyword">for</span> the next button (press &lt;ENTER&gt; to finish recording)</span><br><span class="line">KEY_NUMERIC_2</span><br><span class="line"></span><br><span class="line">Now hold down button <span class="string">"KEY_NUMERIC_2"</span>.</span><br><span class="line"></span><br><span class="line">Please enter the name <span class="keyword">for</span> the next button (press &lt;ENTER&gt; to finish recording)</span><br><span class="line">KEY_NUMERIC_3</span><br><span class="line"></span><br><span class="line">Now hold down button <span class="string">"KEY_NUMERIC_3"</span>.</span><br><span class="line">...此处省略余下多个键的设置过程</span><br></pre></td></tr></table></figure><p>在最后一个按键设置完成后再次按下回车键, 得到下面的设置成功提示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Successfully written config file controller.lircd.conf</span><br></pre></td></tr></table></figure><p>打开这个<code>controller.lircd.conf</code>文件(<code>controller</code>的前缀就是我在上面设置的remote的名称了), 可以看到主体内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">begin remote</span><br><span class="line"></span><br><span class="line">  name  controller</span><br><span class="line">  driver devinput</span><br><span class="line">  bits           56</span><br><span class="line">  eps            30</span><br><span class="line">  aeps          100</span><br><span class="line"></span><br><span class="line">  one             0     0</span><br><span class="line">  zero            0     0</span><br><span class="line">  pre_data_bits   72</span><br><span class="line">  pre_data       0x11</span><br><span class="line">  gap          512</span><br><span class="line">  toggle_bit_mask 0x0</span><br><span class="line">  frequency    38000</span><br><span class="line"></span><br><span class="line">      begin codes</span><br><span class="line">          KEY_NUMERIC_0            0x69000001000265</span><br><span class="line">          KEY_NUMERIC_1            0x6B000001000263</span><br><span class="line">          KEY_NUMERIC_2            0x6B000001000262</span><br><span class="line">          KEY_NUMERIC_3            0x6D000001000262</span><br><span class="line">          KEY_NUMERIC_4            0x8400000100024A</span><br><span class="line">          KEY_NUMERIC_5            0x6F000001000261</span><br><span class="line">          KEY_NUMERIC_6            0x72000001000262</span><br><span class="line">          KEY_NUMERIC_7            0x72000001000264</span><br><span class="line">          KEY_NUMERIC_8            0x73000001000263</span><br><span class="line">          KEY_NUMERIC_9            0x8A000001000263</span><br><span class="line">          KEY_NUMERIC_STAR         0x72000001000262</span><br><span class="line">          KEY_NUMERIC_POUND        0x71000001000260</span><br><span class="line">          KEY_LEFT                 0x6F000001000260</span><br><span class="line">          KEY_RIGHT                0x6F000001000261</span><br><span class="line">          KEY_UP                   0x85000001000262</span><br><span class="line">          KEY_DOWN                 0x6D000001000261</span><br><span class="line">          KEY_OK                   0x6C000001000261</span><br><span class="line">      end codes</span><br><span class="line"></span><br><span class="line">end remote</span><br></pre></td></tr></table></figure><p>先做备份, 然后将刚刚生成的<code>lircd.conf</code>覆盖原来几乎为空的<code>lircd.conf</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cp /etc/lirc/lircd.conf /etc/lirc/lircd.conf.backup</span><br><span class="line">$ sudo cp controller.lircd.conf /etc/lirc/lircd.conf</span><br></pre></td></tr></table></figure><p>重启<code>lirc</code>服务即可完成所有的配置更新, 红外遥控器也就可以使用了。但是, 这样的红外模块还不能供程序使用, 我们还需要自定义<code>lircrc</code>文件, 这是<code>lirc</code>与程序交互的桥梁。</p><h3 id="lircrc文件格式"><a href="#lircrc文件格式" class="headerlink" title="lircrc文件格式"></a>lircrc文件格式</h3><p><code>/etc/lirc/</code>目录下的<code>irexec.lircrc</code>是一个设置的样板。</p><p>新建文件<code>/etc/lirc/lircrc</code>, 并添加以下内容:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">begin</span><br><span class="line">    prog   = irexec</span><br><span class="line">    button = KEY_NUMERIC_0</span><br><span class="line">    config = <span class="built_in">echo</span> <span class="string">"KEY_NUMERIC_0"</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">    prog   = irexec</span><br><span class="line">    button = KEY_NUMERIC_1</span><br><span class="line">    config = <span class="built_in">echo</span> <span class="string">"KEY_NUMERIC_1"</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">    prog   = irexec</span><br><span class="line">    button = KEY_NUMERIC_2</span><br><span class="line">    config = <span class="built_in">echo</span> <span class="string">"KEY_NUMERIC_2"</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">    prog   = irexec</span><br><span class="line">    button = KEY_NUMERIC_3</span><br><span class="line">    config = <span class="built_in">echo</span> <span class="string">"KEY_NUMERIC_3"</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">    prog   = irexec</span><br><span class="line">    button = KEY_NUMERIC_4</span><br><span class="line">    config = <span class="built_in">echo</span> <span class="string">"KEY_NUMERIC_4"</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">    prog   = irexec</span><br><span class="line">    button = KEY_NUMERIC_5</span><br><span class="line">    config = <span class="built_in">echo</span> <span class="string">"KEY_NUMERIC_5"</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">    prog   = irexec</span><br><span class="line">    button = KEY_NUMERIC_6</span><br><span class="line">    config = <span class="built_in">echo</span> <span class="string">"KEY_NUMERIC_6"</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">    prog   = irexec</span><br><span class="line">    button = KEY_NUMERIC_7</span><br><span class="line">    config = <span class="built_in">echo</span> <span class="string">"KEY_NUMERIC_7"</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">    prog   = irexec</span><br><span class="line">    button = KEY_NUMERIC_8</span><br><span class="line">    config = <span class="built_in">echo</span> <span class="string">"KEY_NUMERIC_8"</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">    prog   = irexec</span><br><span class="line">    button = KEY_NUMERIC_9</span><br><span class="line">    config = <span class="built_in">echo</span> <span class="string">"KEY_NUMERIC_9"</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">    prog   = irexec</span><br><span class="line">    button = KEY_NUMERIC_STAR</span><br><span class="line">    config = <span class="built_in">echo</span> <span class="string">"KEY_NUMERIC_STAR"</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">    prog   = irexec</span><br><span class="line">    button = KEY_NUMERIC_POUND</span><br><span class="line">    config = <span class="built_in">echo</span> <span class="string">"KEY_NUMERIC_POUND"</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">    prog   = irexec</span><br><span class="line">    button = KEY_LEFT</span><br><span class="line">    config = <span class="built_in">echo</span> <span class="string">"KEY_LEFT"</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">    prog   = irexec</span><br><span class="line">    button = KEY_RIGHT</span><br><span class="line">    config = <span class="built_in">echo</span> <span class="string">"KEY_RIGHT"</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">    prog   = irexec</span><br><span class="line">    button = KEY_UP</span><br><span class="line">    config = <span class="built_in">echo</span> <span class="string">"KEY_UP"</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">    prog   = irexec</span><br><span class="line">    button = KEY_DOWN</span><br><span class="line">    config = <span class="built_in">echo</span> <span class="string">"KEY_DOWN"</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">    prog   = irexec</span><br><span class="line">    button = KEY_OK</span><br><span class="line">    config = <span class="built_in">echo</span> <span class="string">"KEY_OK"</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>至此, 树莓派的红外安装配置已经完成。</p><h3 id="红外遥控程序"><a href="#红外遥控程序" class="headerlink" title="红外遥控程序"></a>红外遥控程序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考文献:<br>[1]: <a href="http://www.raspberry-pi-geek.com/Archive/2014/03/Controlling-your-Pi-with-an-infrared-remote/" target="_blank" rel="noopener">Controlling your Pi with an infrared remote</a><br>[2]: <a href="https://pinout.xyz/" target="_blank" rel="noopener">Raspberry Pi Pinout</a><br>[3]: <a href="https://stackoverflow.com/questions/48453355/lirc-partial-read-8-bytes" target="_blank" rel="noopener">LIRC partial read 8 bytes</a><br>[4]: <a href="http://www.lirc.org/html/configuration-guide.html" target="_blank" rel="noopener">LIRC Configuration guide</a><br>[5]: <a href="http://www.lirc.org/html/configure.html" target="_blank" rel="noopener">The lircd.conf file format</a><br>[6]: <a href="https://www.instructables.com/id/Raspberry-Pi-Zero-Universal-Remote/" target="_blank" rel="noopener">Raspberry Pi Zero Universal Remote</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从红外遥控模块的安装到投入使用费了不少时间, 在此记录一下。我使用的是&lt;code&gt;HX1838遥控模块&lt;/code&gt;, 第一次买回来插线上电, 由于接反了正负极, 红外接收器马上就啪一声烧掉了, 于是又在淘宝买了&lt;code&gt;HX1838红外接收器&lt;/code&gt;。得到的教训是, 对于电子元器件还是要好好找店家要电路图, 切勿凭经验、感觉。接线的时候串联一个电阻也能起到保护电路的作用。&lt;br&gt;红外遥控是得到Linux内核支持的, 我们需要安装必要的&lt;code&gt;lirc&lt;/code&gt;库(&lt;code&gt;LIRC&lt;/code&gt;全称&lt;code&gt;Linux Infrared Remote Control&lt;/code&gt;), 然后通过几个文件配置红外遥控的相关参数, 可以认为, 遥控器不同按键发出的信号在接收端就表现为不一样的电信号序列, 我们需要设置这些信号序列对应了遥控器上的哪个键, 除此之外, 我们还可以自定义这些按键的行为。关于&lt;code&gt;LIRC&lt;/code&gt;, 官网有很详细的Manual &lt;a href=&quot;http://www.lirc.org/html/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Welcome to the LIRC Manual&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="树莓派" scheme="https://cheung.site/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="树莓派" scheme="https://cheung.site/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="红外遥控" scheme="https://cheung.site/tags/%E7%BA%A2%E5%A4%96%E9%81%A5%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>树莓派脉冲宽度调制</title>
    <link href="https://cheung.site/2018/11/27/raspberry-pi-pwm/"/>
    <id>https://cheung.site/2018/11/27/raspberry-pi-pwm/</id>
    <published>2018-11-27T08:11:26.000Z</published>
    <updated>2019-05-14T04:48:47.238Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在给树莓派小车做加速和减速功能时遇到了脉冲宽度调制的问题，到底什么是脉冲宽度调制，跟智能小车直流电机的转速有什么关系？这几个问题没搞明白的话，感觉小车的控制程序很难继续往下写，于是搜集整理了一下资料。大概这也是不少非电子工程专业的同学在折腾树莓派GPIO时会遇到的问题。</p></blockquote><a id="more"></a><p>我先（以目前浅显的理解）概括一下脉冲宽度调制（以下简称PWM）的作用：树莓派的GPIO口输出的是电子信号，二值状态的电子信号只有高电平(如3.3v)和低电平(0v)的区分，而我的直流伺服电机（小车轮子的小马达）在额定电压通电后的转速是100rpm（100转/分钟），那么我应该怎么让小车以50rpm的速度跑起来呢？假想你有一辆只能以100km/h速度行驶的小车，却要通过一条限速50km/h的街道，你怎么办？<br>方法挺好理解，你只需要驾车走走停停就行了，例如开车一分钟然后停车一分钟，再开车一分钟然后停车一分钟，循环此操作直到通过街道。这样整体下来你的车速（差不多）就是50km/h了。但一分钟才换挡一次，在你开车的一分钟期间看到你开车路过的行人（或者是测速仪）明显能感觉出来你超速了。于是，你把换挡的间隔缩小到了1秒钟，也就是说，开车1秒停车1秒（周期为2秒），这样子，你就骗过了测速仪，成功地以50km/h的速度通过了街道。如果你手速够快，每秒钟可以完成“开车1秒停车1秒”这样的操作10次（即周期为0.1s，频率为10Hz），那么这天衣无缝的开车技术足以瞒天过海，骗过街边的路人甲乙丙丁。<br>脉冲宽度调制的原理跟你上面开车的方法差不多，通过高电平与低电平的比例来模拟需要的电压。其中最重要的概念是占空比（Duty Cycle），即高电平时间占总时间的百分比（0 &lt;= dc &lt;= 1）。假设电信号恒定的高电平为10v，当占空比为0.25（即25%）时，模拟的就是2.5v的电压，占空比为0.5的话就是模拟5v的电压。<br>通过上面的知识，通过PWM控制树莓派小车的速度的方法就出来了，假设在额定的输入电压情况下，转速为100rpm，那么只需要把PWM占空比设置为50%，就可以实现50rpm的转速。输入电压不变的情况下，电机转速与占空比成正比。</p><p>参考文献：<br>[1]: <a href="https://www.mbtechworks.com/projects/raspberry-pi-pwm.html" target="_blank" rel="noopener">Raspberry Pi Pulse Width Modulation (PWM)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在给树莓派小车做加速和减速功能时遇到了脉冲宽度调制的问题，到底什么是脉冲宽度调制，跟智能小车直流电机的转速有什么关系？这几个问题没搞明白的话，感觉小车的控制程序很难继续往下写，于是搜集整理了一下资料。大概这也是不少非电子工程专业的同学在折腾树莓派GPIO时会遇到的问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="树莓派" scheme="https://cheung.site/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="树莓派" scheme="https://cheung.site/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="脉冲宽度调制" scheme="https://cheung.site/tags/%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>LevelDB编译、安装与使用</title>
    <link href="https://cheung.site/2018/10/16/leveldb-installation/"/>
    <id>https://cheung.site/2018/10/16/leveldb-installation/</id>
    <published>2018-10-16T03:35:57.000Z</published>
    <updated>2019-05-13T11:59:28.074Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于<code>LevelDB</code>现在用<code>CMake</code>编译, 网上看到的教程大都是直接<code>make</code>搞定的, 现在不管用了。从编译、安装到使用, 踩了一些坑, 在此记录下来。 </p></blockquote><h3 id="CMake版本太低导致编译失败"><a href="#CMake版本太低导致编译失败" class="headerlink" title="CMake版本太低导致编译失败"></a>CMake版本太低导致编译失败</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/google/leveldb.git</span><br><span class="line">$ mkdir -p build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">$ cmake -DCMAKE_BUILD_TYPE=Release .. &amp;&amp; cmake --build .</span><br><span class="line">CMake Error at CMakeLists.txt:5 (cmake_minimum_required):</span><br><span class="line">  CMake 3.9 or higher is required.  You are running version 3.5.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- Configuring incomplete, errors occurred!</span><br></pre></td></tr></table></figure><a id="more"></a><p>CMake版本太低导致编译失败, 下面升级CMake。</p><h3 id="升级安装CMake"><a href="#升级安装CMake" class="headerlink" title="升级安装CMake"></a>升级安装CMake</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cmake --version</span><br><span class="line">cmake version 3.5.1</span><br></pre></td></tr></table></figure><p>通过<code>wget</code>下载符合要求的版本(CMake 3.9 or higher):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://cmake.org/files/v3.12/cmake-3.12.3.tar.gz</span><br></pre></td></tr></table></figure><p>解压、编译、安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tar -xf cmake-3.12.3.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> cmake-3.12.3/</span><br><span class="line">$ ./configure</span><br><span class="line">$ sudo make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cmake -version</span><br><span class="line">cmake version 3.12.3</span><br></pre></td></tr></table></figure><h3 id="编译、安装"><a href="#编译、安装" class="headerlink" title="编译、安装"></a>编译、安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> leveldb/</span><br><span class="line">$ mkdir -p build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">$ cmake -DCMAKE_BUILD_TYPE=Release .. &amp;&amp; cmake --build .</span><br></pre></td></tr></table></figure><p>在build目录下生成了一个静态库<code>libleveldb.a</code>, 我们把这个静态库复制到<code>/usr/local/lib/</code>, 并把<code>leveldb</code>相关的头文件复制到<code>/usr/local/include/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cp build/libleveldb.a /usr/<span class="built_in">local</span>/lib/</span><br><span class="line">$ sudo cp -r include/leveldb/ /usr/<span class="built_in">local</span>/include/</span><br></pre></td></tr></table></figure><h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><p>新建<code>demo.cc</code>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;leveldb/db.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  leveldb::DB* db;</span><br><span class="line">  leveldb::Options options;</span><br><span class="line">  options.create_if_missing = <span class="literal">true</span>;</span><br><span class="line">  leveldb::Status status = leveldb::DB::Open(options, <span class="string">"/tmp/testdb"</span>, &amp;db);</span><br><span class="line">  assert(status.ok());</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> key = <span class="string">"apple"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> value = <span class="string">"A"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> get;</span><br><span class="line"></span><br><span class="line">  leveldb::Status s = db-&gt;Put(leveldb::WriteOptions(), key, value);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (s.ok()) s = db-&gt;Get(leveldb::ReadOptions(), key, &amp;get);</span><br><span class="line">  <span class="keyword">if</span> (s.ok()) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"读取到的与(key="</span> &lt;&lt; key &lt;&lt; <span class="string">")对应的(value="</span> &lt;&lt; get &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"读取失败!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> db;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译、链接(注: 缺少<code>-pthread</code>选项会报错<code>undefined reference to `pthread_create&#39;</code>):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ g++ -o demo demo.cc -pthread -lleveldb -std=c++11</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./demo</span><br><span class="line">读取到的与(key=apple)对应的(value=A)</span><br></pre></td></tr></table></figure><p>参考文献:<br>[1]: <a href="https://github.com/google/leveldb" target="_blank" rel="noopener">https://github.com/google/leveldb</a><br>[2]: <a href="https://techoverflow.net/2012/12/14/compiling-installing-leveldb-on-linux/" target="_blank" rel="noopener">https://techoverflow.net/2012/12/14/compiling-installing-leveldb-on-linux/</a><br>[3]: <a href="https://github.com/google/leveldb/blob/master/doc/index.md" target="_blank" rel="noopener">https://github.com/google/leveldb/blob/master/doc/index.md</a><br>[4]: <a href="http://www.cnblogs.com/skynet/p/3372855.html" target="_blank" rel="noopener">http://www.cnblogs.com/skynet/p/3372855.html</a><br>[5]: <a href="https://stackoverflow.com/questions/1662909/undefined-reference-to-pthread-create-in-linux" target="_blank" rel="noopener">https://stackoverflow.com/questions/1662909/undefined-reference-to-pthread-create-in-linux</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由于&lt;code&gt;LevelDB&lt;/code&gt;现在用&lt;code&gt;CMake&lt;/code&gt;编译, 网上看到的教程大都是直接&lt;code&gt;make&lt;/code&gt;搞定的, 现在不管用了。从编译、安装到使用, 踩了一些坑, 在此记录下来。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;CMake版本太低导致编译失败&quot;&gt;&lt;a href=&quot;#CMake版本太低导致编译失败&quot; class=&quot;headerlink&quot; title=&quot;CMake版本太低导致编译失败&quot;&gt;&lt;/a&gt;CMake版本太低导致编译失败&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/google/leveldb.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir -p build &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cmake -DCMAKE_BUILD_TYPE=Release .. &amp;amp;&amp;amp; cmake --build .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CMake Error at CMakeLists.txt:5 (cmake_minimum_required):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  CMake 3.9 or higher is required.  You are running version 3.5.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-- Configuring incomplete, errors occurred!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://cheung.site/categories/Linux/"/>
    
    
      <category term="leveldb" scheme="https://cheung.site/tags/leveldb/"/>
    
  </entry>
  
  <entry>
    <title>Vim与YouCompleteMe代码补全</title>
    <link href="https://cheung.site/2018/09/23/vim-as-an-ide/"/>
    <id>https://cheung.site/2018/09/23/vim-as-an-ide/</id>
    <published>2018-09-23T09:08:05.000Z</published>
    <updated>2019-05-13T11:59:27.434Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>默认的Vim配置给人的感觉实在无法称得上是编辑器之神, 在使用简单的Vim配置好久之后, 终于有时间好好折腾一下Vim插件, 一番挣扎之后, 终于顺利为Vim加上代码自动补全的功能。</p></blockquote><a id="more"></a><p>以下过程均基于Ubuntu 16.04, 不同的Linux发行版可能在安装YouCompleteMe时稍有差异, YouCompleteMe主页 (<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="noopener">传送门</a>) 有说明。</p><h3 id="安装Vim和Git"><a href="#安装Vim和Git" class="headerlink" title="安装Vim和Git"></a>安装Vim和Git</h3><p>如果尚未安装git和vim, 使用下面命令安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install git</span><br><span class="line">$ sudo apt-get install vim</span><br></pre></td></tr></table></figure><h3 id="安装Vim插件管理工具Vundle"><a href="#安装Vim插件管理工具Vundle" class="headerlink" title="安装Vim插件管理工具Vundle"></a>安装Vim插件管理工具Vundle</h3><p>使用Vundle作为插件管理工具 (Github Vundle传送门)[<a href="https://github.com/VundleVim/Vundle.vim]" target="_blank" rel="noopener">https://github.com/VundleVim/Vundle.vim]</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br></pre></td></tr></table></figure><p>然后需要进行简单的配置, 参考Vundle的GitHub主页中的Quick Start, 编辑<code>~/.vimrc</code>文件, 在文件开头添加以下内容, 用于设置使用Vundle来管理插件:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> nocompatible              <span class="string">" 去除VI一致性,必须</span></span><br><span class="line"><span class="string">filetype off                  "</span> 必须</span><br><span class="line"></span><br><span class="line"><span class="string">" 设置包括vundle和初始化相关的runtime path</span></span><br><span class="line"><span class="string">set rtp+=~/.vim/bundle/Vundle.vim</span></span><br><span class="line"><span class="string">call vundle#begin()</span></span><br><span class="line"><span class="string">"</span> 另一种选择, 指定一个vundle安装插件的路径</span><br><span class="line"><span class="string">"call vundle#begin('~/some/path/here')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> 让vundle管理插件版本,必须</span><br><span class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></span><br><span class="line"></span><br><span class="line"><span class="string">" 以下范例用来支持不同格式的插件安装.</span></span><br><span class="line"><span class="string">"</span> 请将安装插件的命令放在vundle<span class="comment">#begin和vundle#end之间.</span></span><br><span class="line"><span class="string">" Github上的插件</span></span><br><span class="line"><span class="string">"</span> 格式为 Plugin <span class="string">'用户名/插件仓库名'</span></span><br><span class="line">Plugin <span class="string">'tpope/vim-fugitive'</span></span><br><span class="line"><span class="string">" 来自 http://vim-scripts.org/vim/scripts.html 的插件</span></span><br><span class="line"><span class="string">"</span> Plugin <span class="string">'插件名称'</span> 实际上是 Plugin <span class="string">'vim-scripts/插件仓库名'</span> 只是此处的用户名可以省略</span><br><span class="line">Plugin <span class="string">'L9'</span></span><br><span class="line"><span class="string">" 由Git支持但不再github上的插件仓库 Plugin 'git clone 后面的地址'</span></span><br><span class="line"><span class="string">Plugin 'git://git.wincent.com/command-t.git'</span></span><br><span class="line"><span class="string">"</span> 本地的Git仓库(例如自己的插件) Plugin <span class="string">'file:///+本地插件仓库绝对路径'</span></span><br><span class="line">Plugin <span class="string">'file:///home/gmarik/path/to/plugin'</span></span><br><span class="line"><span class="string">" 插件在仓库的子目录中.</span></span><br><span class="line"><span class="string">"</span> 正确指定路径用以设置runtimepath. 以下范例插件在sparkup/vim目录下</span><br><span class="line">Plugin <span class="string">'rstacruz/sparkup'</span>, &#123;<span class="string">'rtp'</span>: <span class="string">'vim/'</span>&#125;</span><br><span class="line"><span class="string">" 安装L9，如果已经安装过这个插件，可利用以下格式避免命名冲突</span></span><br><span class="line"><span class="string">Plugin 'ascenator/L9', &#123;'name': 'newL9'&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> 你的所有插件需要在下面这行之前</span><br><span class="line">call vundle<span class="comment">#end()            " 必须</span></span><br><span class="line">filetype plugin indent on    <span class="string">" 必须 加载vim自带和插件相应的语法和文件类型相关脚本</span></span><br><span class="line"><span class="string">"</span> 忽视插件改变缩进,可以使用以下替代:</span><br><span class="line"><span class="string">"filetype plugin on</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">" 简要帮助文档</span></span><br><span class="line"><span class="string">"</span> :PluginList       - 列出所有已配置的插件</span><br><span class="line"><span class="string">" :PluginInstall    - 安装插件,追加 `!` 用以更新或使用 :PluginUpdate</span></span><br><span class="line"><span class="string">"</span> :PluginSearch foo - 搜索 foo ; 追加 `!` 清除本地缓存</span><br><span class="line"><span class="string">" :PluginClean      - 清除未使用插件,需要确认; 追加 `!` 自动批准移除未使用插件</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">" 查阅 :h vundle 获取更多细节和wiki以及FAQ</span></span><br><span class="line"><span class="string">"</span> 将你自己对非插件片段放在这行之后</span><br></pre></td></tr></table></figure><p>打开<code>vim</code>, 执行<code>:PluginInstall</code>, Vundle就会开始安装插件。</p><h3 id="安装YouCompleteMe插件"><a href="#安装YouCompleteMe插件" class="headerlink" title="安装YouCompleteMe插件"></a>安装YouCompleteMe插件</h3><p><a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="noopener">YouCompleteMe Github主页</a><br>一开始我是通过直接在<code>.vimrc</code>中添加YouCompleteMe的插件行, 然后运行<code>vim</code>再执行<code>:PluginInstall</code>来让Vunble自动安装YouCompleteMe插件的, 但安装YouCompleteMe耗时太长, 看不到进度, 还出了点问题, 就改用下面手动克隆YouCompleteMe仓库的方法了:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.vim/bundle/</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/Valloric/YouCompleteMe.git</span><br></pre></td></tr></table></figure><p>根据<code>YouCompleteMe</code>主页给出的安装指引, <em>Install development tools, CMake, and Python headers:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install build-essential cmake python3-dev</span><br></pre></td></tr></table></figure><p>更新子模块, 由于依赖比较多, 下面的命令会下载多个git仓库, 耗时比较长。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.vim/bundle/YouCompleteMe</span><br><span class="line">$ git submodule update --init --recursive</span><br></pre></td></tr></table></figure><p>YouCompleteMe Github主页给出的做法是直接使用<code>python3 install.py --clang-completer</code>命令进行安装, 但在我的机器上, 这个过程一直都没成功, 中间下载clang的时候time out了。<br>于是手动安装clang:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install clang</span><br></pre></td></tr></table></figure><p>然后使用YouCompleteMe自带的安装脚本的进行安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.vim/bundle/YouCompleteMe</span><br><span class="line">$ python3 install.py --clang-completer --system-libclang</span><br></pre></td></tr></table></figure><p>新加入插件在<code>.vimrc</code>中的添加位置在上面Vundle的配置说明中已经说明白了, 现在添加:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plugin <span class="string">'Valloric/YouCompleteMe'</span></span><br></pre></td></tr></table></figure><p>运行<code>vim</code>, 执行<code>:PluginInstall</code>, 可以在左下角看到安装完成。</p><p>随便打开一个cpp文件, 有下面提示:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NoExtraConfDetected: No .ycm_extra_conf.py file detected, so no compile flags are available. Thus no semantic support <span class="keyword">for</span> C/C++/ObjC/ObjC++.</span><br></pre></td></tr></table></figure><p>参考 <a href="https://github.com/Valloric/YouCompleteMe/issues/700" target="_blank" rel="noopener">YouCompleteMe issues 700</a>, 在<code>.vimrc</code>中添加:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> g:ycm_global_ycm_extra_conf = <span class="string">'~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'</span></span><br></pre></td></tr></table></figure><p>然而, 进入<code>~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/</code>, 然后<code>ls -la</code>查看目录文件, 所谓的<em>.ycm_extra_conf.py</em>并不存在!索性进入YouCompleteMe目录进行文件查找:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.vim/bundle/YouCompleteMe</span><br><span class="line">$ find . -name <span class="string">".ycm_extra_conf.py"</span></span><br></pre></td></tr></table></figure><p>竟然找到不少, 如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">./python/ycm/tests/testdata/.ycm_extra_conf.py</span><br><span class="line">./.ycm_extra_conf.py</span><br><span class="line">./third_party/ycmd/examples/.ycm_extra_conf.py</span><br><span class="line">./third_party/ycmd/cpp/ycm/.ycm_extra_conf.py</span><br><span class="line">./third_party/ycmd/ycmd/tests/clang/testdata/get_doc/.ycm_extra_conf.py</span><br><span class="line">./third_party/ycmd/ycmd/tests/clang/testdata/noflags/.ycm_extra_conf.py</span><br><span class="line">./third_party/ycmd/ycmd/tests/clang/testdata/driver_mode_cl/flag/.ycm_extra_conf.py</span><br><span class="line">./third_party/ycmd/ycmd/tests/clang/testdata/driver_mode_cl/executable/.ycm_extra_conf.py</span><br><span class="line">./third_party/ycmd/ycmd/tests/clang/testdata/client_data/.ycm_extra_conf.py</span><br><span class="line">./third_party/ycmd/ycmd/tests/clang/testdata/.ycm_extra_conf.py</span><br><span class="line">./third_party/ycmd/ycmd/tests/clang/testdata/<span class="built_in">test</span>-include/.ycm_extra_conf.py</span><br><span class="line">./third_party/ycmd/ycmd/tests/clang/testdata/general_fallback/.ycm_extra_conf.py</span><br><span class="line">./third_party/ycmd/ycmd/tests/testdata/client/.ycm_extra_conf.py</span><br><span class="line">./third_party/ycmd/ycmd/tests/testdata/extra_conf/project/.ycm_extra_conf.py</span><br><span class="line">./third_party/ycmd/ycmd/tests/cs/testdata/testy-multiple-solutions/solution-not-named-like-folder/extra-conf-rel/.ycm_extra_conf.py</span><br><span class="line">./third_party/ycmd/ycmd/tests/cs/testdata/testy-multiple-solutions/solution-not-named-like-folder/extra-conf-abs/.ycm_extra_conf.py</span><br><span class="line">./third_party/ycmd/ycmd/tests/cs/testdata/testy-multiple-solutions/solution-not-named-like-folder/extra-conf-bad/testy/.ycm_extra_conf.py</span><br><span class="line">./third_party/ycmd/.ycm_extra_conf.py</span><br></pre></td></tr></table></figure><p>看了几个, 个人感觉<code>~/.vim/bundle/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py</code>的配置应该比较全, 就选择了这个, 把它复制到<code>~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/</code>目录下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp ~/.vim/bundle/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py</span><br></pre></td></tr></table></figure><p>记得在<code>.vimrc</code>中添加如下一行配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> g:ycm_global_ycm_extra_conf = <span class="string">'~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'</span></span><br></pre></td></tr></table></figure><h3 id="vimrc文件"><a href="#vimrc文件" class="headerlink" title=".vimrc文件"></a>.vimrc文件</h3><p>整个<code>.vimrc</code>文件如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">" 参考Vundle Github主页: https://github.com/VundleVim/Vundle.vim/blob/master/README_ZH_CN.md</span></span><br><span class="line"><span class="string">set nocompatible              "</span> 去除VI一致性,必须</span><br><span class="line">filetype off                  <span class="string">" 必须</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> 设置包括vundle和初始化相关的runtime path</span><br><span class="line"><span class="built_in">set</span> rtp+=~/.vim/bundle/Vundle.vim</span><br><span class="line">call vundle<span class="comment">#begin()</span></span><br><span class="line"><span class="string">" 另一种选择, 指定一个vundle安装插件的路径</span></span><br><span class="line"><span class="string">"</span>call vundle<span class="comment">#begin('~/some/path/here')</span></span><br><span class="line"></span><br><span class="line"><span class="string">" 让vundle管理插件版本,必须</span></span><br><span class="line"><span class="string">Plugin 'VundleVim/Vundle.vim'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Plugin 'Valloric/YouCompleteMe'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> 以下范例用来支持不同格式的插件安装.</span><br><span class="line"><span class="string">" 请将安装插件的命令放在vundle#begin和vundle#end之间.</span></span><br><span class="line"><span class="string">"</span> Github上的插件</span><br><span class="line"><span class="string">" 格式为 Plugin '用户名/插件仓库名'</span></span><br><span class="line"><span class="string">"</span>Plugin <span class="string">'tpope/vim-fugitive'</span></span><br><span class="line"><span class="string">" 来自 http://vim-scripts.org/vim/scripts.html 的插件</span></span><br><span class="line"><span class="string">"</span> Plugin <span class="string">'插件名称'</span> 实际上是 Plugin <span class="string">'vim-scripts/插件仓库名'</span> 只是此处的用户名可以省略</span><br><span class="line"><span class="string">"Plugin 'L9'</span></span><br><span class="line"><span class="string">"</span> 由Git支持但不再github上的插件仓库 Plugin <span class="string">'git clone 后面的地址'</span></span><br><span class="line"><span class="string">"Plugin 'git://git.wincent.com/command-t.git'</span></span><br><span class="line"><span class="string">"</span> 本地的Git仓库(例如自己的插件) Plugin <span class="string">'file:///+本地插件仓库绝对路径'</span></span><br><span class="line"><span class="string">"Plugin 'file:///home/gmarik/path/to/plugin'</span></span><br><span class="line"><span class="string">"</span> 插件在仓库的子目录中.</span><br><span class="line"><span class="string">" 正确指定路径用以设置runtimepath. 以下范例插件在sparkup/vim目录下</span></span><br><span class="line"><span class="string">"</span>Plugin <span class="string">'rstacruz/sparkup'</span>, &#123;<span class="string">'rtp'</span>: <span class="string">'vim/'</span>&#125;</span><br><span class="line"><span class="string">" 安装L9，如果已经安装过这个插件，可利用以下格式避免命名冲突</span></span><br><span class="line"><span class="string">"</span>Plugin <span class="string">'ascenator/L9'</span>, &#123;<span class="string">'name'</span>: <span class="string">'newL9'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">" 你的所有插件需要在下面这行之前</span></span><br><span class="line"><span class="string">call vundle#end()            "</span> 必须</span><br><span class="line">filetype plugin indent on    <span class="string">" 必须 加载vim自带和插件相应的语法和文件类型相关脚本</span></span><br><span class="line"><span class="string">"</span> 忽视插件改变缩进,可以使用以下替代:</span><br><span class="line"><span class="string">"filetype plugin on</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">" 简要帮助文档</span></span><br><span class="line"><span class="string">"</span> :PluginList       - 列出所有已配置的插件</span><br><span class="line"><span class="string">" :PluginInstall    - 安装插件,追加 `!` 用以更新或使用 :PluginUpdate</span></span><br><span class="line"><span class="string">"</span> :PluginSearch foo - 搜索 foo ; 追加 `!` 清除本地缓存</span><br><span class="line"><span class="string">" :PluginClean      - 清除未使用插件,需要确认; 追加 `!` 自动批准移除未使用插件</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">" 查阅 :h vundle 获取更多细节和wiki以及FAQ</span></span><br><span class="line"><span class="string">"</span> 将你自己对非插件片段放在这行之后</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> g:ycm_global_ycm_extra_conf = <span class="string">'~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'</span></span><br><span class="line"></span><br><span class="line"><span class="string">" 语法高亮</span></span><br><span class="line"><span class="string">syntax on</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> 显示行号</span><br><span class="line"><span class="built_in">set</span> number</span><br><span class="line"></span><br><span class="line"><span class="string">" 搜索忽略大小写</span></span><br><span class="line"><span class="string">set ignorecase </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> 突出显示当前行</span><br><span class="line"><span class="built_in">set</span> cursorline </span><br><span class="line"></span><br><span class="line"><span class="string">" 搜索高亮</span></span><br><span class="line"><span class="string">set hlsearch   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> 搜索逐字符高亮</span><br><span class="line"><span class="built_in">set</span> incsearch  </span><br><span class="line"></span><br><span class="line"><span class="string">" 自动缩进</span></span><br><span class="line"><span class="string">set autoindent </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> 使用C风格的缩进</span><br><span class="line"><span class="built_in">set</span> cindent    </span><br><span class="line"></span><br><span class="line"><span class="string">" 设置Tab键的行为</span></span><br><span class="line"><span class="string">"</span> 将文件的Tab键显示为几个空格, 只做解析显示, 不进行实际转换</span><br><span class="line"><span class="built_in">set</span> tabstop=2</span><br><span class="line"><span class="string">" 缩进宽度</span></span><br><span class="line"><span class="string">set shiftwidth=2</span></span><br><span class="line"><span class="string">"</span> 将输入的Tab键转成空格</span><br><span class="line"><span class="built_in">set</span> expandtab</span><br><span class="line"><span class="string">" 编辑时, 一个Tab表现为2个空格</span></span><br><span class="line"><span class="string">"</span> Tab键等于2个空格宽度, 退格时把两个空格当作一个Tab删除</span><br><span class="line"><span class="built_in">set</span> softtabstop=2</span><br><span class="line"></span><br><span class="line"><span class="string">" 高亮显示匹配的括号</span></span><br><span class="line"><span class="string">set showmatch</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;默认的Vim配置给人的感觉实在无法称得上是编辑器之神, 在使用简单的Vim配置好久之后, 终于有时间好好折腾一下Vim插件, 一番挣扎之后, 终于顺利为Vim加上代码自动补全的功能。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://cheung.site/categories/Linux/"/>
    
    
      <category term="Vim" scheme="https://cheung.site/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>在Windows 10上运行Linux子系统</title>
    <link href="https://cheung.site/2018/08/28/linux-on-windows/"/>
    <id>https://cheung.site/2018/08/28/linux-on-windows/</id>
    <published>2018-08-28T10:50:48.000Z</published>
    <updated>2019-05-13T11:59:26.758Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Windows 10出现了一类称为WSL(Windows Subsystem for Linux)的应用，使得Windows 10能够通过极其简单的方式安装并运行Linux发行版。详情查看微软官网对此的介绍<a href="https://docs.microsoft.com/en-us/windows/wsl/about" target="_blank" rel="noopener">Windows Subsystem for Linux Documentation</a></p></blockquote><a id="more"></a><h3 id="启用“适用于Linux的Windows子系统”功能"><a href="#启用“适用于Linux的Windows子系统”功能" class="headerlink" title="启用“适用于Linux的Windows子系统”功能"></a>启用“适用于Linux的Windows子系统”功能</h3><p>打开Windows功能面板-&gt;启用或关闭Windows功能:<br>启用“适用于Linux的Windows子系统”：</p><center>![启用或关闭Windows功能](/images/linux-on-windows/enable-windows-subsystem-linux.png)</center><p>或者管理员权限打开PowerShell执行以下命令以启用“适用于Linux的Windows子系统”功能(<code>&gt;</code>为命令提示符，无需输入):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span><br></pre></td></tr></table></figure><center>![Microsoft-Windows-Subsystem-Linux](/images/linux-on-windows/powershell-enable-windows-subsystem-linux.png)</center><p>启用功能后重启系统让改动生效。若未启用此功能，打开ubuntu会提示以下错误:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Installing, this may take a few minutes...</span><br><span class="line">WslRegisterDistribution failed with error: 0x8007019e</span><br><span class="line">The Windows Subsystem <span class="keyword">for</span> Linux optional component is not enabled. Please <span class="built_in">enable</span> it and try again.</span><br><span class="line">See https://aka.ms/wslinstall <span class="keyword">for</span> details.</span><br><span class="line">Press any key to <span class="built_in">continue</span>...</span><br></pre></td></tr></table></figure><h3 id="使用Windows应用商店安装Ubuntu"><a href="#使用Windows应用商店安装Ubuntu" class="headerlink" title="使用Windows应用商店安装Ubuntu"></a>使用Windows应用商店安装Ubuntu</h3><p>在Windows 10应用商店搜索<em>ubuntu</em>或者<em>linux</em>，选择安装ubuntu。安装完成后点击图标启动，就会进入控制台窗口，会提示新建用户并输入密码:</p><center>![Windows应用商店WSL](/images/linux-on-windows/store-wsl.png)</center><center>![Windows应用商店Ubuntu](/images/linux-on-windows/store-ubuntu.png)</center><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Installing, this may take a few minutes...</span><br><span class="line">Please create a default UNIX user account. The username does not need to match your Windows username.</span><br><span class="line">For more information visit: https://aka.ms/wslusers</span><br><span class="line">Enter new UNIX username: cheung</span><br><span class="line">Enter new UNIX password:</span><br><span class="line">Retype new UNIX password:</span><br><span class="line">passwd: password updated successfully</span><br><span class="line">Installation successful!</span><br><span class="line">To run a <span class="built_in">command</span> as administrator (user <span class="string">"root"</span>), use <span class="string">"sudo &lt;command&gt;"</span>.</span><br><span class="line">See <span class="string">"man sudo_root"</span> <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">cheung@thinkpad-cheung:~$</span><br></pre></td></tr></table></figure><p>在Windows中的任意一个命令行窗口输入<code>ubuntu</code>都可以进入ubuntu子系统。<br>后来，某次开机之后尝试进入ubuntu子系统，提示<code>WslRegisterDistribution failed with error: 0x800703fa</code>错误，这个问题在微软的GitHub上有对应的issue，见 <a href="https://github.com/Microsoft/WSL/issues/2576" target="_blank" rel="noopener">Error: 0x800703fa - Press any key to continue</a>。我在使用管理员打开Ubuntu之后就正常了，之后不需要管理员权限打开也没有问题。此外，重启也可以解决这个问题。</p><h3 id="推荐使用"><a href="#推荐使用" class="headerlink" title="推荐使用"></a>推荐使用</h3><h4 id="推荐更换国内软件源"><a href="#推荐更换国内软件源" class="headerlink" title="推荐更换国内软件源"></a>推荐更换国内软件源</h4><p>默认的软件源一般是国外的ip，安装和更新软件的下载速度非常慢，国内用户推荐使用阿里云的软件源。<br>先备份原始的软件源，然后替换为阿里云的软件源。有一点要特别注意，软件源的版本一定要和使用的Linux版本一致，如果在Ubuntu 18.x上使用了Ubuntu 16.x的软件源，在安装或更新软件时将会导致软件版本过高或过低而无法安装等问题。</p><h4 id="推荐使用Cmder"><a href="#推荐使用Cmder" class="headerlink" title="推荐使用Cmder"></a>推荐使用Cmder</h4><p>Windows的命令行被诟病已久，界面也不怎么样，强烈推荐使用<strong>Cmder</strong>作为Windows命令行的替代品。Cmder支持在选中文本的情况下<code>Ctrl+C</code>进行复制，<code>Ctrl+V</code>粘贴，可以更换窗口背景图片、调整透明度等，感兴趣的去官网看看吧，传送门 <a href="http://cmder.net/" target="_blank" rel="noopener">Cmder网站</a>，<a href="https://github.com/cmderdev/cmder" target="_blank" rel="noopener">Cmder Github</a></p><h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p>这个Linux子系统与普通过的发行版还有有一点区别的，其体积也小很多，因此有一些正式发行版会自带的软件在这里却没有默认安装，例如我使用的这个版本，默认是没有gcc和g++的，需要的软件使用<code>apt-get</code>命令安装就好。这样轻量的处理好处也是明显的，占用的系统资源非常小，启动速度极其快，这也是相对于在Windows上使用Linux虚拟机的一大优势。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Windows 10出现了一类称为WSL(Windows Subsystem for Linux)的应用，使得Windows 10能够通过极其简单的方式安装并运行Linux发行版。详情查看微软官网对此的介绍&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/about&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Windows Subsystem for Linux Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://cheung.site/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://cheung.site/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>我的VPS都用来干嘛了</title>
    <link href="https://cheung.site/2018/08/20/cool-things-to-do-with-a-vps/"/>
    <id>https://cheung.site/2018/08/20/cool-things-to-do-with-a-vps/</id>
    <published>2018-08-20T07:32:10.000Z</published>
    <updated>2019-05-13T11:59:26.706Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目前在VPS上搭建了VPN服务器，Git服务器和FTP服务器，通过自己的VPN服务器实现了不限流量的科学上网。因为有很方便的开源工具，这几个服务的搭建都很简单。</p></blockquote><a id="more"></a><h3 id="搭建VPN服务器"><a href="#搭建VPN服务器" class="headerlink" title="搭建VPN服务器"></a>搭建VPN服务器</h3><p>采用<a href="https://github.com/hwdsl2/setup-ipsec-vpn" target="_blank" rel="noopener"><strong>setup-ipsec-vpn</strong></a><br>安装过程非常简单，项目的主页也给出了非常详细的安装和配置过程: <a href="https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/README-zh.md" target="_blank" rel="noopener">IPsec VPN 服务器一键安装脚本</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get update &amp;&amp; apt-get dist-upgrade</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://git.io/vpnsetup -O vpnsetup.sh</span><br><span class="line">$ nano -w vpnsetup.sh</span><br><span class="line">[Replace with your own values: YOUR_IPSEC_PSK, YOUR_USERNAME and YOUR_PASSWORD]</span><br><span class="line">$ sudo sh vpnsetup.sh</span><br></pre></td></tr></table></figure><h3 id="搭建Git服务器"><a href="#搭建Git服务器" class="headerlink" title="搭建Git服务器"></a>搭建Git服务器</h3><p>我新开了一个用户(<em>git</em>)专门给Git使用的:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@galaxy:~<span class="comment"># groupadd git</span></span><br><span class="line">root@galaxy:~<span class="comment"># useradd -m git -g git</span></span><br></pre></td></tr></table></figure><p>创建<code>/repo</code>目录，专门用于存放各种Git仓库:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /repo</span><br><span class="line">$ chown git:git /repo</span><br></pre></td></tr></table></figure><p>切换到git用户并新建仓库:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ su git</span><br><span class="line">$ <span class="built_in">cd</span> /repo</span><br><span class="line">$ git init --bare leetcode.git</span><br></pre></td></tr></table></figure><h3 id="搭建FTP服务器"><a href="#搭建FTP服务器" class="headerlink" title="搭建FTP服务器"></a>搭建FTP服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cheung@ubuntu:~$ ps -ef |grep vsftpd</span><br><span class="line">root      14505      1  0 17:25 ?        00:00:00 /usr/sbin/vsftpd /etc/vsftpd.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/vsftpd.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">anon_root=/mnt/ftp_home <span class="comment"># 设置ftp主目录</span></span><br><span class="line">anonymous_enable=YES    <span class="comment"># 允许匿名用户登陆</span></span><br></pre></td></tr></table></figure><p>修改设置后要重启服务:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service vsftpd restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;目前在VPS上搭建了VPN服务器，Git服务器和FTP服务器，通过自己的VPN服务器实现了不限流量的科学上网。因为有很方便的开源工具，这几个服务的搭建都很简单。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="自娱自乐" scheme="https://cheung.site/categories/%E8%87%AA%E5%A8%B1%E8%87%AA%E4%B9%90/"/>
    
    
      <category term="VPS" scheme="https://cheung.site/tags/VPS/"/>
    
      <category term="VPN" scheme="https://cheung.site/tags/VPN/"/>
    
      <category term="Git" scheme="https://cheung.site/tags/Git/"/>
    
      <category term="FTP" scheme="https://cheung.site/tags/FTP/"/>
    
  </entry>
  
  <entry>
    <title>MySQL用户授权与访问控制</title>
    <link href="https://cheung.site/2018/08/14/mysql-installation-and-access-privilege-system/"/>
    <id>https://cheung.site/2018/08/14/mysql-installation-and-access-privilege-system/</id>
    <published>2018-08-14T03:41:02.000Z</published>
    <updated>2019-05-13T11:59:26.694Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这本来是一篇讲述怎么在Linux上完成MySQL的安装、新建用户并授权的博文，后来查阅了不少资料，看到了不少有趣的文章，就想着要把更多的细节作为笔记分享出来。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>也许你看到大多数讲解MySQL授权的文章最后都让你使用上面的命令来刷新MySQL的权限，但很多情况下可能都是毫无意义的(文末讲这个问题)。不求甚解的求知习惯是危险的，如果对一项技术有追求，应该花时间去了解背后的原理和逻辑。</p><a id="more"></a><h3 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h3><p>参考 <a href="https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-16-04" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-16-04</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure><p>扯远了，MySQL安装完之后一般就启动了，通过下面的命令检查MySQL服务的状态:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl status mysql.service</span><br><span class="line">● mysql.service - MySQL Community Server</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Tue 2018-08-14 10:14:28 CST; 2min 0s ago</span><br><span class="line">  Process: 990 ExecStartPost=/usr/share/mysql/mysql-systemd-start post (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 976 ExecStartPre=/usr/share/mysql/mysql-systemd-start pre (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 989 (mysqld)</span><br><span class="line">   CGroup: /system.slice/mysql.service</span><br><span class="line">           └─989 /usr/sbin/mysqld</span><br></pre></td></tr></table></figure><p>若MySQL没启动，通过以下命令启动:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start mysql</span><br></pre></td></tr></table></figure><p>通过<code>mysql_secure_installation</code>安全向导修改root用户密码，设置是否允许root远程登陆以及决定是否删除匿名账号和测试数据库等。[<a href="https://dev.mysql.com/doc/refman/5.6/en/mysql-secure-installation.html" target="_blank" rel="noopener">MySQL开发者文档的传送门</a>]:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mysql_secure_installation</span><br></pre></td></tr></table></figure><p>在生产环境中，安全起见，建议设置root用户不允许远程登陆，如果只是学习测试用就无所谓了。此外，匿名账号最好删掉，不然容易出现奇奇怪怪的问题，如StackOverflow中提到的这个已授权的用户本地登陆后却出现<a href="https://stackoverflow.com/questions/10299148/mysql-error-1045-28000-access-denied-for-user-billlocalhost-using-passw" target="_blank" rel="noopener">MySQL Access Denied</a>，高票答案中对这个问题有很详细的解答，感兴趣的读者可以打开看看。后来在MySQL的开发者文档中也看到了关于这个问题的说明: <a href="https://dev.mysql.com/doc/refman/5.6/en/adding-users.html" target="_blank" rel="noopener">传送门</a>。这个问题总结起来就是：匿名账号由于指定了具体的host(<code>localhost</code>)，比使用通配符(<code>%</code>)的账号拥有了优先权(在user表中排在前面因此先被检查)，导致实名用户在本地登陆时实际上是以匿名用户身份登陆的。host是特定值的账号之所以在user表中排在前面，是因为这张表遵循了以下排序规则<a href="https://dev.mysql.com/doc/refman/5.6/en/connection-access.html" target="_blank" rel="noopener">Access Control, Stage 1: Connection Verification</a>:</p><blockquote><p>The server uses sorting rules that order rows with the most-specific Host values first. Literal host names and IP addresses are the most specific. (The specificity of a literal IP address is not affected by whether it has a netmask, so 198.51.100.13 and 198.51.100.0/255.255.255.0 are considered equally specific.) The pattern ‘%’ means “any host” and is least specific. The empty string ‘’ also means “any host” but sorts after ‘%’. Rows with the same Host value are ordered with the most-specific User values first (a blank User value means “any user” and is least specific). For rows with equally-specific Host and User values, the order is nondeterministic.</p></blockquote><h3 id="创建新用户并授权"><a href="#创建新用户并授权" class="headerlink" title="创建新用户并授权"></a>创建新用户并授权</h3><p>我们直接看看数据库中的user表的结构:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; describe mysql.user;</span><br><span class="line">+<span class="comment">------------------------+-----------------------------------+------+-----+-----------------------+-------+</span></span><br><span class="line">| Field                  | Type                              | Null | Key | Default               | Extra |</span><br><span class="line">+<span class="comment">------------------------+-----------------------------------+------+-----+-----------------------+-------+</span></span><br><span class="line">| Host                   | char(60)                          | NO   | PRI |                       |       |</span><br><span class="line">| User                   | char(32)                          | NO   | PRI |                       |       |</span><br><span class="line">......[此处省略多行]......</span><br><span class="line">| max_connections        | int(11) unsigned                  | NO   |     | 0                     |       |</span><br><span class="line">| max_user_connections   | int(11) unsigned                  | NO   |     | 0                     |       |</span><br><span class="line">| plugin                 | char(64)                          | NO   |     | mysql_native_password |       |</span><br><span class="line">| authentication_string  | text                              | YES  |     | NULL                  |       |</span><br><span class="line">| password_expired       | enum('N','Y')                     | NO   |     | N                     |       |</span><br><span class="line">| password_last_changed  | timestamp                         | YES  |     | NULL                  |       |</span><br><span class="line">| password_lifetime      | smallint(5) unsigned              | YES  |     | NULL                  |       |</span><br><span class="line">| account_locked         | enum('N','Y')                     | NO   |     | N                     |       |</span><br><span class="line">+<span class="comment">------------------------+-----------------------------------+------+-----+-----------------------+-------+</span></span><br></pre></td></tr></table></figure><p>由<code>Host</code>和<code>User</code>是主键可知，一个MySQL账号是由<code>Host</code>和<code>User</code>共同决定的。<br>参考 <a href="https://dev.mysql.com/doc/refman/5.6/en/adding-users.html" target="_blank" rel="noopener">MySQL开发者文档：Adding User Accounts</a>，下面是开发者文档中给出的创建用户并授权的例子，虽然在下面的例子中，授权总是紧跟着创建用户的命令，你完全可以先创建用户但暂时不做任何授权。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER 'finley'@'localhost' IDENTIFIED BY 'password';</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'finley'@'localhost'</span><br><span class="line">    -&gt;     WITH GRANT OPTION;</span><br><span class="line">mysql&gt; CREATE USER 'finley'@'%' IDENTIFIED BY 'password';</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'finley'@'%'</span><br><span class="line">    -&gt;     WITH GRANT OPTION;</span><br><span class="line">mysql&gt; CREATE USER 'admin'@'localhost' IDENTIFIED BY 'password';</span><br><span class="line">mysql&gt; GRANT RELOAD,PROCESS ON *.* TO 'admin'@'localhost';</span><br></pre></td></tr></table></figure><p>解释一下上面例子中的字符含义: localhost表示这个账号只能在本机登陆，<code>%</code>是通配符，表示可以在任意host登陆。由于我们已经知道一个账号是由User和Host共同决定的，因此上面例子中创建的‘finley’@’localhost’和‘finley’@’%’其实是两个不同的账号。<code>*.*</code>表示任意数据库的所有权限，<code>WITH GRANT OPTION</code>表示这个账号可以将具有的权限授予其他账号。可见，上面例子创建的这两个名为finley的用户都是超级用户。<a href="https://dev.mysql.com/doc/refman/5.6/en/adding-users.html" target="_blank" rel="noopener">官方文档</a>还给出了几个具体授权的例子:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER 'custom'@'localhost' IDENTIFIED BY 'password';</span><br><span class="line">mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP</span><br><span class="line">    -&gt;     ON bankaccount.*</span><br><span class="line">    -&gt;     TO 'custom'@'localhost';</span><br><span class="line">mysql&gt; CREATE USER 'custom'@'host47.example.com' IDENTIFIED BY 'password';</span><br><span class="line">mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP</span><br><span class="line">    -&gt;     ON expenses.*</span><br><span class="line">    -&gt;     TO 'custom'@'host47.example.com';</span><br><span class="line">mysql&gt; CREATE USER 'custom'@'%.example.com' IDENTIFIED BY 'password';</span><br><span class="line">mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP</span><br><span class="line">    -&gt;     ON customer.*</span><br><span class="line">    -&gt;     TO 'custom'@'%.example.com';</span><br></pre></td></tr></table></figure><p><a href="https://dev.mysql.com/doc/refman/5.6/en/show-grants.html" target="_blank" rel="noopener">SHOW GRANTS</a>命令查看用户的权限</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW GRANTS FOR 'admin'@'localhost';</span><br></pre></td></tr></table></figure><p>[注: <code>SHOW GRANTS FOR CURRENT_USER</code>可以查看当前用户的权限]</p><p>创建一个名为<code>cheung</code>的MySQL用户并授权:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER <span class="string">'cheung'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'password-for-cheung'</span>;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO <span class="string">'cheung'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure><p>命令行可成功登陆:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u cheung -p</span><br></pre></td></tr></table></figure><p>尝试在Windows中通过Navicat远程连接，报错<code>2003 - Can&#39;t connect to MySQL server on &#39;192.168.118.123&#39; (10038)</code><br>如果在Linux上远程连接会得到如下错误提示[<code>192.168.118.123</code>是要连接的数据库所在的host]:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -h 192.168.118.123 -u cheung -p</span><br><span class="line">ERROR 2003 (HY000): Can<span class="string">'t connect to MySQL server on '</span>192.168.118.123<span class="string">' (111)</span></span><br></pre></td></tr></table></figure><p>上面的命令实际上无需在另外一台Linux服务器上运行，就在MySQL所在的服务器运行也会得到一样的错误结果。因为使用ip值<code>192.168.118.123</code>作为host已经不是本地连接[经过了路由]。<br>通过<code>mysql -h 127.0.0.1 -u cheung -p</code>或者<code>mysql -h localhost -u cheung -p</code>则可以成功连接并登陆。<br>由于<code>&#39;cheung&#39;@&#39;%&#39;</code>，基本可以确定这是MySQL只绑定了本机回环地址(loopback address)导致的问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cheung@ubuntu:~$ netstat -anp |grep 3306</span><br><span class="line">tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      -</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/mysql</span><br><span class="line">$ grep -rn <span class="string">"127.0.0.1"</span></span><br><span class="line">mysql.conf.d/mysqld.cnf:43:<span class="built_in">bind</span>-address= 127.0.0.1</span><br></pre></td></tr></table></figure><p>通过上面的<code>grep</code>命令查找到了MySQL的监听设置，bind-address设置为127.0.0.1的话，就只能从本机连接MySQL了，所有远程连接都不被允许，因此注释掉这一行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Instead of skip-networking the default is now to listen only on</span><br><span class="line"># localhost which is more compatible and is not less secure.</span><br><span class="line">#bind-address       = 127.0.0.1</span><br></pre></td></tr></table></figure><p>重启MySQL服务:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service mysql restart</span><br></pre></td></tr></table></figure><p>再次查看3306端口:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -anp |grep 3306</span><br><span class="line">tcp6       0      0 :::3306                 :::*                    LISTEN      -</span><br></pre></td></tr></table></figure><p>这个问题终于解决了，网上所有的教程都是这么做的。如果你了解Linux的回环地址和socket连接的原理的话，几乎可以马上反应过来，我们还可以有别的修改方式！我们可以将bind-address的值更换为本机IP(我这里具体就是<code>192.168.118.123</code>) [注: 如果机器的ip地址变了，就要再次修改bind-address了，因此这种方法还是有缺陷的。]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#bind-address       = 127.0.0.1</span><br><span class="line">bind-address       = 192.168.118.123</span><br></pre></td></tr></table></figure><p>这样的话，通过<code>mysql -u cheung -p</code>/<code>mysql -h 192.168.118.123 -u cheung -p</code>/<code>mysql -h localhost -u cheung -p</code>都可以成功连接，但使用<code>mysql -h 127.0.0.1 -u cheung -p</code>则会报错<em>ERROR 2003 (HY000): Can’t connect to MySQL server on ‘127.0.0.1’ (111)</em><br>最近双十一阿里云打折力度很大, 于是入手了一台ECS服务器, 在折腾MySQL的时候又遇到了<strong>10038</strong>错误, 又翻出这篇笔记, 一样的套路, 注释掉<code>bind-address</code>, 并且确保使用的user是具有远程连接的权限之后, 还是没能远程连接到MySQL. <code>telnet server-ip 3306</code>不同, 怀疑是防火墙的问题, <code>service iptables status</code>发现防火墙是<code>inactive (dead)</code>的, 也就排除了防火墙的问题. 最后发现是阿里云的安全组配置导致的, 需要到阿里云控制台打开需要开放的端口, 否则除基本的<code>22</code>端口外, 其他端口都是不通的.<br>导致错误的原因真的太多, 还是要好好排查原因, 多想想为什么…</p><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; DROP USER 'smithj'@'localhost';</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; DROP USER IF EXISTS 'smithj'@'localhost';</span><br></pre></td></tr></table></figure><h3 id="不要滥用FLUSH-PRIVILEGES"><a href="#不要滥用FLUSH-PRIVILEGES" class="headerlink" title="不要滥用FLUSH PRIVILEGES"></a>不要滥用FLUSH PRIVILEGES</h3><p><code>FLUSH PRIVILEGES</code>的作用是<em>Reload grant tables</em><br>滥用<code>FLUSH PRIVILEGES</code>命令的教程太多，一篇国外的文章对此做了详细的说明，<a href="http://dbahire.com/stop-using-flush-privileges/" target="_blank" rel="noopener">传送门: Stop using FLUSH PRIVILEGES</a><br>总结一句就是，除非涉及直接更改grant tables(如使用<code>INSERT, UPDATE, or DELETE</code>对这张表进行修改)，其他情况下使用<code>FLUSH PRIVILEGES</code>都是毫无意义的。使用<code>GRANT, REVOKE, SET PASSWORD, or RENAME USER</code>等命令时，MySQL server都会立即监听到这些变化并重新加载grant tables到内存。</p><p>需要使用<code>FLUSH PRIVILEGES</code>的一个例子，参见: <a href="https://stackoverflow.com/questions/39281594/error-1698-28000-access-denied-for-user-rootlocalhost" target="_blank" rel="noopener">ERROR 1698 (28000): Access denied for user ‘root’@’localhost’</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; USE mysql;</span><br><span class="line">mysql&gt; UPDATE user SET plugin='mysql_native_password' WHERE User='root';</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>参考文献:<br>[1] <a href="https://dev.mysql.com/doc/" target="_blank" rel="noopener">MySQL Documentation</a><br>[2] <a href="https://stackoverflow.com/questions/5016505/mysql-grant-all-privileges-on-database" target="_blank" rel="noopener">MySQL用户授权不当引起的问题</a><br>[3] <a href="http://dbahire.com/stop-using-flush-privileges/" target="_blank" rel="noopener">Stop using FLUSH PRIVILEGES</a><br>[4] <a href="https://dev.mysql.com/doc/refman/5.6/en/privileges-provided.html" target="_blank" rel="noopener">Privileges Provided by MySQL</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这本来是一篇讲述怎么在Linux上完成MySQL的安装、新建用户并授权的博文，后来查阅了不少资料，看到了不少有趣的文章，就想着要把更多的细节作为笔记分享出来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt; FLUSH PRIVILEGES;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;也许你看到大多数讲解MySQL授权的文章最后都让你使用上面的命令来刷新MySQL的权限，但很多情况下可能都是毫无意义的(文末讲这个问题)。不求甚解的求知习惯是危险的，如果对一项技术有追求，应该花时间去了解背后的原理和逻辑。&lt;/p&gt;
    
    </summary>
    
      <category term="开发环境" scheme="https://cheung.site/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="MySQL" scheme="https://cheung.site/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>学习Django框架</title>
    <link href="https://cheung.site/2018/08/13/learn-django/"/>
    <id>https://cheung.site/2018/08/13/learn-django/</id>
    <published>2018-08-13T10:21:35.000Z</published>
    <updated>2019-05-13T11:59:27.534Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Django是一个开源的Python Web框架，采用了MVC的框架模式。利用这个框架可以很快捷地开发功能完善地Web应用，但稍做深入学习之后又觉得Django做得太多，你只需要不断套用模板就行，反而让人感觉被束缚了，没有了编码的快感。不过Django自带的数据库管理App确实惊艳，众多的完善的功能大概很适合团队快速推出产品。如果只是写几个小接口，使用更加灵活、轻量的<em>Flask</em>大概更适合。</p></blockquote><a id="more"></a><h3 id="安装Django"><a href="#安装Django" class="headerlink" title="安装Django"></a>安装Django</h3><p>如果使用python3:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install django</span><br></pre></td></tr></table></figure><p>如果使用python2:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install <span class="string">"django&lt;2"</span></span><br></pre></td></tr></table></figure><p>验证安装:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python -m django --version</span><br><span class="line"><span class="number">1.11</span><span class="number">.15</span></span><br></pre></td></tr></table></figure><p>或者进入python命令行验证django安装:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> django</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>django.VERSION</span><br><span class="line">(<span class="number">1</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="string">u'final'</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="创建Django项目"><a href="#创建Django项目" class="headerlink" title="创建Django项目"></a>创建Django项目</h3><blockquote><p>如果使用pip安装，<code>django-admin.py</code>会被加入到系统环境变量中。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ django-admin.py startproject mysite</span><br></pre></td></tr></table></figure><p>上面的命令会在当前目录下创建名为<code>mysite</code>的目录，结构如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cheung@ubuntu:~$ tree mysite</span><br><span class="line">mysite</span><br><span class="line">├── manage.py</span><br><span class="line">└── mysite</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── settings.py</span><br><span class="line">    ├── urls.py</span><br><span class="line">    └── wsgi.py</span><br></pre></td></tr></table></figure><h3 id="运行Django服务器"><a href="#运行Django服务器" class="headerlink" title="运行Django服务器"></a>运行Django服务器</h3><p><code>cd mysite</code>切换到项目目录，执行下面的命令启动服务器:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py runserver</span><br></pre></td></tr></table></figure><p>得到类似输出:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cheung@ubuntu:~/mysite$ python manage.py runserver</span><br><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have 13 unapplied migration(s). Your project may not work properly until you apply the migrations <span class="keyword">for</span> app(s): admin, auth, contenttypes, sessions.</span><br><span class="line">Run <span class="string">'python manage.py migrate'</span> to apply them.</span><br><span class="line"></span><br><span class="line">August 13, 2018 - 10:33:36</span><br><span class="line">Django version 1.11.15, using settings <span class="string">'mysite.settings'</span></span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure><p>默认情况下，<code>runserver</code>命令在<code>8000</code>端口启动服务器，且仅监听本地连接。<br>浏览器打开<code>http://127.0.0.1:8000/</code>可看到Django欢迎页面[目前只能在本机浏览器打开]</p><p>若要更改端口，改为使用以下命令指定端口(如指定8080端口):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py runserver 8080</span><br></pre></td></tr></table></figure><p>若要允许非本地连接访问:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py runserver 0.0.0.0:8080</span><br></pre></td></tr></table></figure><p>或者[0 is a shortcut for 0.0.0.0]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py runserver 0:8000</span><br></pre></td></tr></table></figure><p>非本地浏览器打开(<code>192.168.118.123</code>)，浏览器出现一些错误提示，看来连接还没完全开放:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">DisallowedHost at /</span><br><span class="line">Invalid HTTP_HOST header: &apos;192.168.118.123:8080&apos;. You may need to add u&apos;192.168.118.123&apos; to ALLOWED_HOSTS.</span><br><span class="line">Request Method:GET</span><br><span class="line">Request URL:http://192.168.118.123:8080/</span><br><span class="line">Django Version:1.11.15</span><br><span class="line">Exception Type:DisallowedHost</span><br><span class="line">Exception Value:</span><br><span class="line">Invalid HTTP_HOST header: &apos;192.168.118.123:8080&apos;. You may need to add u&apos;192.168.118.123&apos; to ALLOWED_HOSTS.</span><br><span class="line">Exception Location:/home/cheung/.local/lib/python2.7/site-packages/django/http/request.py in get_host, line 113</span><br><span class="line">Python Executable:/usr/bin/python</span><br><span class="line">Python Version:2.7.12</span><br><span class="line">Python Path:</span><br><span class="line">[&apos;/home/cheung/mysite&apos;,</span><br><span class="line"> &apos;/usr/lib/python2.7&apos;,</span><br><span class="line"> &apos;/usr/lib/python2.7/plat-x86_64-linux-gnu&apos;,</span><br><span class="line"> &apos;/usr/lib/python2.7/lib-tk&apos;,</span><br><span class="line"> &apos;/usr/lib/python2.7/lib-old&apos;,</span><br><span class="line"> &apos;/usr/lib/python2.7/lib-dynload&apos;,</span><br><span class="line"> &apos;/home/cheung/.local/lib/python2.7/site-packages&apos;,</span><br><span class="line"> &apos;/usr/local/lib/python2.7/dist-packages&apos;,</span><br><span class="line"> &apos;/usr/lib/python2.7/dist-packages&apos;]</span><br><span class="line">Server time:Mon, 13 Aug 2018 10:55:31 +0000</span><br></pre></td></tr></table></figure><p>将<code>settings.py</code>中<code>ALLOWED_HOSTS = []</code>那一行改为<code>ALLOWED_HOSTS = [&#39;*&#39;]</code>，允许任意IP访问Django服务器。但这种允许任意IP访问服务器的做法有一定的风险，更保险的做法是添加指定的host，例如将Django服务器的IP<code>192.168.118.123</code>添加到<code>ALLOWED_HOSTS</code>数组中，参考<a href="https://stackoverflow.com/questions/40582423/invalid-http-host-header" target="_blank" rel="noopener">StackOverflow:Invalid http_host header</a>或者<a href="https://docs.djangoproject.com/en/1.10/ref/settings/#allowed-hosts" target="_blank" rel="noopener">ALLOWED_HOSTS官方说明</a>: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALLOWED_HOSTS = [<span class="string">'192.168.118.123'</span>, <span class="string">'localhost'</span>, <span class="string">'127.0.0.1'</span>]</span><br></pre></td></tr></table></figure><p>注意，即使修改了<code>ALLOWED_HOSTS</code>，仍然需要在使用runserver启动服务器时指定ip为<code>0.0.0.0</code>才能通过非本地机器访问: <code>python manage.py runserver 0.0.0.0:8080</code></p><h3 id="创建App"><a href="#创建App" class="headerlink" title="创建App"></a>创建App</h3><p>准备创建一个名为<code>polls</code>的App，结果提示缺少mysqlclient:<br>直接<code>sudo pip install mysqlclient</code>安装mysqlclient失败了，在StackOverflow有解决方案<a href="https://stackoverflow.com/questions/5178292/pip-install-mysql-python-fails-with-environmenterror-mysql-config-not-found" target="_blank" rel="noopener">StackOverflow:Environment Error</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libmysqlclient-dev</span><br><span class="line">$ sudo pip install mysqlclient</span><br></pre></td></tr></table></figure><p>再次执行新建Django App的命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py startapp polls</span><br></pre></td></tr></table></figure><p>查看mysite目录结构:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── manage.py</span><br><span class="line">├── mysite</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">└── polls</span><br><span class="line">    ├── admin.py</span><br><span class="line">    ├── apps.py</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── migrations</span><br><span class="line">    │   └── __init__.py</span><br><span class="line">    ├── models.py</span><br><span class="line">    ├── tests.py</span><br><span class="line">    └── views.py</span><br></pre></td></tr></table></figure><p>在settings.py配置数据库，修改DATABASES，一个mysql的配置例子如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'djangoDB'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'mydatabaseuser'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'mypassword'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先在MySQL中创建<code>djangoDB</code>这个数据库。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE djangoDB;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py migrate</span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, contenttypes, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying contenttypes.0001_initial... OK</span><br><span class="line">  Applying auth.0001_initial... OK</span><br><span class="line">  Applying admin.0001_initial... OK</span><br><span class="line">  Applying admin.0002_logentry_remove_auto_add... OK</span><br><span class="line">  Applying contenttypes.0002_remove_content_type_name... OK</span><br><span class="line">  Applying auth.0002_alter_permission_name_max_length... OK</span><br><span class="line">  Applying auth.0003_alter_user_email_max_length... OK</span><br><span class="line">  Applying auth.0004_alter_user_username_opts... OK</span><br><span class="line">  Applying auth.0005_alter_user_last_login_null... OK</span><br><span class="line">  Applying auth.0006_require_contenttypes_0002... OK</span><br><span class="line">  Applying auth.0007_alter_validators_add_error_messages... OK</span><br><span class="line">  Applying auth.0008_alter_user_username_max_length... OK</span><br><span class="line">  Applying sessions.0001_initial... OK</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; USE djangoDB;</span><br><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">+<span class="comment">----------------------------+</span></span><br><span class="line">| Tables_in_djangoDB         |</span><br><span class="line">+<span class="comment">----------------------------+</span></span><br><span class="line">| auth_group                 |</span><br><span class="line">| auth_group_permissions     |</span><br><span class="line">| auth_permission            |</span><br><span class="line">| auth_user                  |</span><br><span class="line">| auth_user_groups           |</span><br><span class="line">| auth_user_user_permissions |</span><br><span class="line">| django_admin_log           |</span><br><span class="line">| django_content_type        |</span><br><span class="line">| django_migrations          |</span><br><span class="line">| django_session             |</span><br><span class="line">+<span class="comment">----------------------------+</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py makemigrations polls</span><br><span class="line">Migrations <span class="keyword">for</span> <span class="string">'polls'</span>:</span><br><span class="line">  polls/migrations/0001_initial.py</span><br><span class="line">    - Create model Choice</span><br><span class="line">    - Create model Question</span><br><span class="line">    - Add field question to choice</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py migrate</span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, contenttypes, polls, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying polls.0001_initial... OK</span><br></pre></td></tr></table></figure><p><code>makemigrations</code>和<code>migrate</code>是Django的两个重要的命令，它们的作用和区别需要好好掌握。<code>makemigrations</code>会根据model的修改准备好数据库变化(迁移)的细节(就是生成SQL语句，但不执行，只是提供给<code>migrate</code>阶段使用)，<code>migrate</code>则执行SQL命令，将model变化写入数据库。可以参考这里<a href="https://stackoverflow.com/questions/29980211/django-1-8-whats-the-difference-between-migrate-and-makemigrations" target="_blank" rel="noopener">what’s the difference between migrate and makemigrations?</a></p><p>Django官方给出了超级详细的教程(tutorial part1-part7)(参见参考文献)，这里就不继续贴自己的项目创建过程了。</p><p>参考文献:<br>[1]: <a href="https://docs.djangoproject.com/" target="_blank" rel="noopener">Django开发者文档主页</a><br>[2]: <a href="https://docs.djangoproject.com/en/1.11/intro/tutorial01/" target="_blank" rel="noopener">Django官方tutorial: Writing your first Django app, part 1</a><br>[3]: <a href="https://docs.djangoproject.com/en/1.11/intro/tutorial02/" target="_blank" rel="noopener">Django官方tutorial: Writing your first Django app, part 2</a><br>[4]: <a href="https://docs.djangoproject.com/en/1.11/intro/tutorial03/" target="_blank" rel="noopener">Django官方tutorial: Writing your first Django app, part 3</a><br>[5]: <a href="https://stackoverflow.com/questions/40582423/invalid-http-host-header" target="_blank" rel="noopener">未添加ALLOWED_HOSTS导致的Invalid http_host header</a><br>[6]: <a href="https://docs.djangoproject.com/en/1.10/ref/settings/#allowed-hosts" target="_blank" rel="noopener">Django的ALLOWED_HOSTS设置</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Django是一个开源的Python Web框架，采用了MVC的框架模式。利用这个框架可以很快捷地开发功能完善地Web应用，但稍做深入学习之后又觉得Django做得太多，你只需要不断套用模板就行，反而让人感觉被束缚了，没有了编码的快感。不过Django自带的数据库管理App确实惊艳，众多的完善的功能大概很适合团队快速推出产品。如果只是写几个小接口，使用更加灵活、轻量的&lt;em&gt;Flask&lt;/em&gt;大概更适合。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="https://cheung.site/categories/Python/"/>
    
    
      <category term="Django" scheme="https://cheung.site/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>线性方程组与向量方程、矩阵方程的联系</title>
    <link href="https://cheung.site/2018/08/09/linear-equations-in-linear-algebra/"/>
    <id>https://cheung.site/2018/08/09/linear-equations-in-linear-algebra/</id>
    <published>2018-08-09T02:20:26.000Z</published>
    <updated>2019-05-13T11:59:26.806Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>看机器学习方面的书看到复杂的数学公式往往望而生畏，要深入机器学习，数学基础还是很重要的。《Linear Algebra and Its Applications》是我读本科时的线性代数教材，已经不记得是第几遍读这本书了，知识总是忘得很快，大概是没有深入去思考，也缺少总结吧。这篇文章大部分都是从书中(有的以图片的形式)摘录的内容，也有一点自己的说明和启发，作为日后温故知新的笔记。</p></blockquote><a id="more"></a><h3 id="通过行变换求解线性方程组的原理"><a href="#通过行变换求解线性方程组的原理" class="headerlink" title="通过行变换求解线性方程组的原理"></a>通过行变换求解线性方程组的原理</h3><p>解线性方程组的基本策略是</p><blockquote><p><em>“to replace one system with an equivalent system(i.e., one with the same solution set) that is easier to solve.”</em></p></blockquote><p>有三种基本的行变换(Elementary Row Operation, 基本行变换)可以用于简化线性方程组，如下(Replacement, Interchange, Scaling):</p><center>![elementary row operations](/images/linear-equations-in-linear-algebra/ch01-elementary-row-operations.png)</center><p>显然，上面三种行变换每一种都是可逆的。如果矩阵A可以通过一系列的基本行变换转为矩阵$B$(由于基本行变换可逆，$B$也可以变换得到$A$)，那么我们称$A$和$B$是行等价的(row equivalent)。<br>此外，对于一个线性方程组(以及它对应的增广矩阵)，<strong>基本行变换不改变原方程组的解</strong>，这一性质是使用基本行变换解线性方程组的根基，明白这一点至关重要！</p><center>![elementary row-operations do not change the solution](/images/linear-equations-in-linear-algebra/ch01-example-of-linear-equations.png)</center><p>通过上面的方程组(称这个方程组为$A$)思考一下: 如果$A$通过其中一种基本行变换转为$B$，分别考察三种基本行变换，可以看到，方程组A的任意解必然是方程组$B$的解($A$的解代入方程组$B$必然满足)。反过来，$B$通过刚才$A$使用的基本行变换的逆变换(这还是一个基本行变换)也可以得到$A$，即$B$通过基本行变换可以转为$A$，因此$B$的任意解必然也是方程组A的解。我们得到结论:</p><blockquote><p>如果两个线性方程组的增广矩阵是行等价的(即可以通过一系列的基本行变换互相转换)，那么这两个方程组有同样的解。</p></blockquote><p>那么，我们只要不断地通过基本行变换把增广矩阵转换成更简单的形式，就会让方程的解更加显而易见。当转换成简化阶梯型矩阵时，方程的解就一目了然了。</p><h3 id="向量的线性组合"><a href="#向量的线性组合" class="headerlink" title="向量的线性组合"></a>向量的线性组合</h3><center>![example of linear combinations](/images/linear-equations-in-linear-algebra/ch01-example-of-linear-combinations-part1.png)</center><center>![example of linear combinations](/images/linear-equations-in-linear-algebra/ch01-example-of-linear-combinations-part2.png)</center><p>通过一个求解一个向量是否是另外两个已知向量的线性组合的例子，我们发现这实际上就是求解线性方程组，且其增广矩阵由这些向量组成:</p><center>![vector equation and augmented matrix](/images/linear-equations-in-linear-algebra/ch01-vector-equation-and-augmented-matrix.png)</center><p>至此，我们知道，<strong>求解线性方程组的解也就是求解增广矩阵最后一个column与其他column之间的线性组合关系。</strong></p><p>对于向量的线性组合还有以下定义:</p><center>![definition of spanned set](/images/linear-equations-in-linear-algebra/ch01-definition-of-spanned-set.png)</center><h3 id="矩阵与向量相乘-Ax-的定义"><a href="#矩阵与向量相乘-Ax-的定义" class="headerlink" title="矩阵与向量相乘$Ax$的定义"></a>矩阵与向量相乘$Ax$的定义</h3><center>![definition of Ax](/images/linear-equations-in-linear-algebra/ch01-definition-of-product-of-matrix-and-vector.png)</center><p>这个定义直接将向量线性组合与矩阵(×向量)乘积联系在一起了，由这个定义直接得知，<em>$Ax=b$有解当且仅当$b$是$A$的列向量的线性组合</em>。另一方面，联系这个定义和上面提到的<strong>求解线性方程组也就是求解增广矩阵最后一个column与其他column之间的线性组合关系</strong>，我们立即可以得到下面的定理：</p><center>![theorem3 relation between matrix equation, vector equation and linear equations](/images/linear-equations-in-linear-algebra/ch01-theorem3-relation-between-matrix-equation-vector-equation-and-linear-equations.png)</center><p>这个定理将线性方程组、向量方程和矩阵方程这三个方面联系起来了，感觉是一个伟大的壮举。</p><h3 id="Ax-的计算"><a href="#Ax-的计算" class="headerlink" title="$Ax$的计算"></a>$Ax$的计算</h3><p>不少线性代数的教材开篇就直接写$Ax$怎么计算，但我们却看得一头雾水，不知道为什么是这样计算的，这样计算的来源依据是什么。<br>上一节我们定义了矩阵$A$与向量$x$相乘的含义，就是$A$的列向量依次以$x$的各个元素为权重的线性组合。这就是我们计算$Ax$的原始依据，看下面的例子：</p><center>![example computation of Ax](/images/linear-equations-in-linear-algebra/ch01-example-computation-of-Ax.png)</center><center>![computation of Ax](/images/linear-equations-in-linear-algebra/ch01-solution-computation-of-Ax.png)</center><p>观察上面的计算结果，发现有下面的规律：</p><center>![TODO](/images/linear-equations-in-linear-algebra/ch01-fast-computation-of-Ax.png)</center><p>这就是我们手算$Ax$时使用的方法！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;看机器学习方面的书看到复杂的数学公式往往望而生畏，要深入机器学习，数学基础还是很重要的。《Linear Algebra and Its Applications》是我读本科时的线性代数教材，已经不记得是第几遍读这本书了，知识总是忘得很快，大概是没有深入去思考，也缺少总结吧。这篇文章大部分都是从书中(有的以图片的形式)摘录的内容，也有一点自己的说明和启发，作为日后温故知新的笔记。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数学" scheme="https://cheung.site/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="线性代数" scheme="https://cheung.site/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>tinyhttpd源码阅读</title>
    <link href="https://cheung.site/2018/08/04/tiny-httpd-annotation/"/>
    <id>https://cheung.site/2018/08/04/tiny-httpd-annotation/</id>
    <published>2018-08-04T14:15:26.000Z</published>
    <updated>2019-05-13T11:59:28.046Z</updated>
    
    <content type="html"><![CDATA[<p>Tiny HTTPd项目地址: <a href="https://sourceforge.net/projects/tinyhttpd/" target="_blank" rel="noopener">Tiny HTTPd</a><br>作者J. David Blackstone对这个项目的Summary如下:</p><blockquote><p>tinyhttpd is a relatively simple webserver I wrote for a school project. While exceedingly simple, tinyhttpd is threaded and handles basic CGI scripts! This is an educational tool to demonstrate the concepts behind http.</p></blockquote><a id="more"></a><h3 id="Tiny-HTTPd源码阅读"><a href="#Tiny-HTTPd源码阅读" class="headerlink" title="Tiny HTTPd源码阅读"></a>Tiny HTTPd源码阅读</h3><p>tinyhttpd是一个基于教学目的而开发的轻量级的http server，读者可以从中体会http协议的原理。读这个源码的过程中做了一些注解，贴在下面:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* J. David's webserver */</span></span><br><span class="line"><span class="comment">/* This is a simple webserver.</span></span><br><span class="line"><span class="comment"> * Created November 1999 by J. David Blackstone.</span></span><br><span class="line"><span class="comment"> * CSE 4344 (Network concepts), Prof. Zeigler</span></span><br><span class="line"><span class="comment"> * University of Texas at Arlington</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* This program compiles for Sparc Solaris 2.6.</span></span><br><span class="line"><span class="comment"> * To compile for Linux:</span></span><br><span class="line"><span class="comment"> *  1) Comment out the #include &lt;pthread.h&gt; line.</span></span><br><span class="line"><span class="comment"> *  2) Comment out the line that defines the variable newthread.</span></span><br><span class="line"><span class="comment"> *  3) Comment out the two lines that run pthread_create().</span></span><br><span class="line"><span class="comment"> *  4) Uncomment the line that runs accept_request().</span></span><br><span class="line"><span class="comment"> *  5) Remove -lsocket from the Makefile.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;strings.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;pthread.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ISspace(x) isspace((int)(x))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_STRING <span class="meta-string">"Server: jdbhttpd/0.1.0\r\n"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">accept_request</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bad_request</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cat</span><span class="params">(<span class="keyword">int</span>, FILE *)</span></span>;    <span class="comment">/* 将文件的全部内容发送到client socket */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cannot_execute</span><span class="params">(<span class="keyword">int</span>)</span></span>;    <span class="comment">/* 向client socket发送500(服务器错误)消息 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_die</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execute_cgi</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_line</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">char</span> *, <span class="keyword">int</span>)</span></span>;    <span class="comment">/* 从socket读取一行存放到第二个参数中,并返回该行的长度(包括统一的换行符\n) */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">headers</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">char</span> *)</span></span>;    <span class="comment">/* 把http headers信息写入client socket */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">not_found</span><span class="params">(<span class="keyword">int</span>)</span></span>;    <span class="comment">/* 向client socket发送404(资源找不到)消息 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">serve_file</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">char</span> *)</span></span>;    <span class="comment">/* 把http headers和文件内容发送到client socket */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">startup</span><span class="params">(u_short *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unimplemented</span><span class="params">(<span class="keyword">int</span>)</span></span>;    <span class="comment">/* 向client socket发送501(方法不支持)消息 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/* A request has caused a call to accept() on the server port to</span></span><br><span class="line"><span class="comment"> * return.  Process the request appropriately.</span></span><br><span class="line"><span class="comment"> * Parameters: the socket connected to the client */</span></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">accept_request</span><span class="params">(<span class="keyword">int</span> client)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"> <span class="keyword">int</span> numchars;</span><br><span class="line"> <span class="keyword">char</span> method[<span class="number">255</span>];</span><br><span class="line"> <span class="keyword">char</span> url[<span class="number">255</span>];</span><br><span class="line"> <span class="keyword">char</span> path[<span class="number">512</span>];</span><br><span class="line"> <span class="keyword">size_t</span> i, j;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line"> <span class="keyword">int</span> cgi = <span class="number">0</span>;      <span class="comment">/* becomes true if server decides this is a CGI</span></span><br><span class="line"><span class="comment">                    * program */</span></span><br><span class="line"> <span class="keyword">char</span> *query_string = <span class="literal">NULL</span>;    <span class="comment">/* CGI查询字符串 */</span></span><br><span class="line"></span><br><span class="line"> numchars = get_line(client, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"> i = <span class="number">0</span>; j = <span class="number">0</span>;</span><br><span class="line"> <span class="comment">/* 获取Method */</span></span><br><span class="line"> <span class="keyword">while</span> (!ISspace(buf[j]) &amp;&amp; (i &lt; <span class="keyword">sizeof</span>(method) - <span class="number">1</span>))</span><br><span class="line"> &#123;</span><br><span class="line">  method[i] = buf[j];</span><br><span class="line">  i++; j++;</span><br><span class="line"> &#125;</span><br><span class="line"> method[i] = <span class="string">'\0'</span>;</span><br><span class="line"> <span class="comment">/* 只支持GET和POST */</span></span><br><span class="line"> <span class="keyword">if</span> (strcasecmp(method, <span class="string">"GET"</span>) &amp;&amp; strcasecmp(method, <span class="string">"POST"</span>))    <span class="comment">/* 忽略大小写比较字符串,若method既不是GET也不是POST,method未被支持 */</span></span><br><span class="line"> &#123;</span><br><span class="line">  unimplemented(client);    <span class="comment">/* 向client socket发送501(方法不支持)消息 */</span></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (strcasecmp(method, <span class="string">"POST"</span>) == <span class="number">0</span>)</span><br><span class="line">  cgi = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* 获取URL */</span></span><br><span class="line"> i = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">while</span> (ISspace(buf[j]) &amp;&amp; (j &lt; <span class="keyword">sizeof</span>(buf)))</span><br><span class="line">  j++;</span><br><span class="line"> <span class="keyword">while</span> (!ISspace(buf[j]) &amp;&amp; (i &lt; <span class="keyword">sizeof</span>(url) - <span class="number">1</span>) &amp;&amp; (j &lt; <span class="keyword">sizeof</span>(buf)))</span><br><span class="line"> &#123;</span><br><span class="line">  url[i] = buf[j];</span><br><span class="line">  i++; j++;</span><br><span class="line"> &#125;</span><br><span class="line"> url[i] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (strcasecmp(method, <span class="string">"GET"</span>) == <span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="comment">/* 从URL中获取查询字符串 */</span></span><br><span class="line">  query_string = url;</span><br><span class="line">  <span class="keyword">while</span> ((*query_string != <span class="string">'?'</span>) &amp;&amp; (*query_string != <span class="string">'\0'</span>))</span><br><span class="line">   query_string++;</span><br><span class="line">  <span class="keyword">if</span> (*query_string == <span class="string">'?'</span>)</span><br><span class="line">  &#123;</span><br><span class="line">   cgi = <span class="number">1</span>;</span><br><span class="line">   *query_string = <span class="string">'\0'</span>;    <span class="comment">/* url的新结尾,之后url就只包含文件路径了,查询字符串则被query_string保存 */</span></span><br><span class="line">   query_string++;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">sprintf</span>(path, <span class="string">"htdocs%s"</span>, url);</span><br><span class="line"> <span class="keyword">if</span> (path[<span class="built_in">strlen</span>(path) - <span class="number">1</span>] == <span class="string">'/'</span>)</span><br><span class="line">  <span class="built_in">strcat</span>(path, <span class="string">"index.html"</span>);</span><br><span class="line"> <span class="keyword">if</span> (stat(path, &amp;st) == <span class="number">-1</span>) &#123;    <span class="comment">/* 通过文件名获取文件信息,文件信息保存在st中。若没有这个文件,则向client socket发送404消息 */</span></span><br><span class="line">  <span class="comment">/* 直到无内容可读或者读到空行,这个while循环是为了丢弃client socket的headers */</span></span><br><span class="line">  <span class="keyword">while</span> ((numchars &gt; <span class="number">0</span>) &amp;&amp; <span class="built_in">strcmp</span>(<span class="string">"\n"</span>, buf))  <span class="comment">/* read &amp; discard headers */</span></span><br><span class="line">   numchars = get_line(client, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  not_found(client);    <span class="comment">/* 404 */</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">if</span> ((st.st_mode &amp; S_IFMT) == S_IFDIR)    <span class="comment">/* 若path是一个目录 */</span></span><br><span class="line">   <span class="built_in">strcat</span>(path, <span class="string">"/index.html"</span>);</span><br><span class="line">  <span class="keyword">if</span> ((st.st_mode &amp; S_IXUSR) ||</span><br><span class="line">      (st.st_mode &amp; S_IXGRP) ||</span><br><span class="line">      (st.st_mode &amp; S_IXOTH)    )    <span class="comment">/* 判断是否具有x(执行)权限 */</span></span><br><span class="line">   cgi = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (!cgi)</span><br><span class="line">   serve_file(client, path);    <span class="comment">/* 把http headers和文件内容发送到client socket */</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">   execute_cgi(client, path, method, query_string);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> close(client);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/* Inform the client that a request it has made has a problem.</span></span><br><span class="line"><span class="comment"> * Parameters: client socket */</span></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bad_request</span><span class="params">(<span class="keyword">int</span> client)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"HTTP/1.0 400 BAD REQUEST\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"Content-type: text/html\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"&lt;P&gt;Your browser sent a bad request, "</span>);</span><br><span class="line"> send(client, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"such as a POST without a Content-Length.\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/* Put the entire contents of a file out on a socket.  This function</span></span><br><span class="line"><span class="comment"> * is named after the UNIX "cat" command, because it might have been</span></span><br><span class="line"><span class="comment"> * easier just to do something like pipe, fork, and exec("cat").</span></span><br><span class="line"><span class="comment"> * Parameters: the client socket descriptor</span></span><br><span class="line"><span class="comment"> *             FILE pointer for the file to cat */</span></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cat</span><span class="params">(<span class="keyword">int</span> client, FILE *resource)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"> fgets(buf, <span class="keyword">sizeof</span>(buf), resource);</span><br><span class="line"> <span class="keyword">while</span> (!feof(resource))</span><br><span class="line"> &#123;</span><br><span class="line">  send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line">  fgets(buf, <span class="keyword">sizeof</span>(buf), resource);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/* Inform the client that a CGI script could not be executed.</span></span><br><span class="line"><span class="comment"> * Parameter: the client socket descriptor. */</span></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cannot_execute</span><span class="params">(<span class="keyword">int</span> client)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"HTTP/1.0 500 Internal Server Error\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"Content-type: text/html\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"&lt;P&gt;Error prohibited CGI execution.\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/* Print out an error message with perror() (for system errors; based</span></span><br><span class="line"><span class="comment"> * on value of errno, which indicates system call errors) and exit the</span></span><br><span class="line"><span class="comment"> * program indicating an error. */</span></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_die</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *sc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> perror(sc);</span><br><span class="line"> <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/* Execute a CGI script.  Will need to set environment variables as</span></span><br><span class="line"><span class="comment"> * appropriate.</span></span><br><span class="line"><span class="comment"> * Parameters: client socket descriptor</span></span><br><span class="line"><span class="comment"> *             path to the CGI script */</span></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execute_cgi</span><span class="params">(<span class="keyword">int</span> client, <span class="keyword">const</span> <span class="keyword">char</span> *path,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">const</span> <span class="keyword">char</span> *method, <span class="keyword">const</span> <span class="keyword">char</span> *query_string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"> <span class="keyword">int</span> cgi_output[<span class="number">2</span>];</span><br><span class="line"> <span class="keyword">int</span> cgi_input[<span class="number">2</span>];</span><br><span class="line"> <span class="keyword">pid_t</span> pid;</span><br><span class="line"> <span class="keyword">int</span> status;</span><br><span class="line"> <span class="keyword">int</span> i;</span><br><span class="line"> <span class="keyword">char</span> c;</span><br><span class="line"> <span class="keyword">int</span> numchars = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">int</span> content_length = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"> buf[<span class="number">0</span>] = <span class="string">'A'</span>; buf[<span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line"> <span class="keyword">if</span> (strcasecmp(method, <span class="string">"GET"</span>) == <span class="number">0</span>)    <span class="comment">/* GET */</span></span><br><span class="line">  <span class="keyword">while</span> ((numchars &gt; <span class="number">0</span>) &amp;&amp; <span class="built_in">strcmp</span>(<span class="string">"\n"</span>, buf))  <span class="comment">/* read &amp; discard headers */</span></span><br><span class="line">   numchars = get_line(client, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"> <span class="keyword">else</span>    <span class="comment">/* POST */</span></span><br><span class="line"> &#123;</span><br><span class="line">  numchars = get_line(client, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  <span class="keyword">while</span> ((numchars &gt; <span class="number">0</span>) &amp;&amp; <span class="built_in">strcmp</span>(<span class="string">"\n"</span>, buf))    <span class="comment">/* 直到buff为空行,是为了读取并丢弃headers */</span></span><br><span class="line">  &#123;</span><br><span class="line">   buf[<span class="number">15</span>] = <span class="string">'\0'</span>;</span><br><span class="line">   <span class="keyword">if</span> (strcasecmp(buf, <span class="string">"Content-Length:"</span>) == <span class="number">0</span>)</span><br><span class="line">    content_length = atoi(&amp;(buf[<span class="number">16</span>]));    <span class="comment">/* 从header中获取报文主体的长度 */</span></span><br><span class="line">   numchars = get_line(client, buf, <span class="keyword">sizeof</span>(buf));    <span class="comment">/* 逐行获取http headers */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (content_length == <span class="number">-1</span>) &#123;</span><br><span class="line">   bad_request(client);</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"HTTP/1.0 200 OK\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (pipe(cgi_output) &lt; <span class="number">0</span>) &#123;    <span class="comment">/* 创建管道cig_output */</span></span><br><span class="line">  cannot_execute(client);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (pipe(cgi_input) &lt; <span class="number">0</span>) &#123;    <span class="comment">/* 创建管道cig_input */</span></span><br><span class="line">  cannot_execute(client);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> ( (pid = fork()) &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">  cannot_execute(client);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (pid == <span class="number">0</span>)  <span class="comment">/* child: CGI script */</span> <span class="comment">/* 子进程 */</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">char</span> meth_env[<span class="number">255</span>];</span><br><span class="line">  <span class="keyword">char</span> query_env[<span class="number">255</span>];</span><br><span class="line">  <span class="keyword">char</span> length_env[<span class="number">255</span>];</span><br><span class="line"></span><br><span class="line">  dup2(cgi_output[<span class="number">1</span>], <span class="number">1</span>);    <span class="comment">/* stdout被重定向,stdout的内容会写入cgi_output管道 */</span></span><br><span class="line">  dup2(cgi_input[<span class="number">0</span>], <span class="number">0</span>);     <span class="comment">/* stdin被重定向,stdin会从cig_input管道读取信息 */</span></span><br><span class="line">  close(cgi_output[<span class="number">0</span>]);</span><br><span class="line">  close(cgi_input[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">sprintf</span>(meth_env, <span class="string">"REQUEST_METHOD=%s"</span>, method);</span><br><span class="line">  putenv(meth_env);    <span class="comment">/* change or add an environment variable */</span></span><br><span class="line">  <span class="keyword">if</span> (strcasecmp(method, <span class="string">"GET"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">   <span class="built_in">sprintf</span>(query_env, <span class="string">"QUERY_STRING=%s"</span>, query_string);</span><br><span class="line">   putenv(query_env);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;   <span class="comment">/* POST */</span></span><br><span class="line">   <span class="built_in">sprintf</span>(length_env, <span class="string">"CONTENT_LENGTH=%d"</span>, content_length);</span><br><span class="line">   putenv(length_env);</span><br><span class="line">  &#125;</span><br><span class="line">  execl(path, path, <span class="literal">NULL</span>);    <span class="comment">/* 执行path路径指定的文件 */</span></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;    <span class="comment">/* parent */</span> <span class="comment">/* 父进程 */</span></span><br><span class="line">  close(cgi_output[<span class="number">1</span>]);</span><br><span class="line">  close(cgi_input[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">if</span> (strcasecmp(method, <span class="string">"POST"</span>) == <span class="number">0</span>)</span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; content_length; i++) &#123;</span><br><span class="line">    recv(client, &amp;c, <span class="number">1</span>, <span class="number">0</span>);    <span class="comment">/* 逐个字符接收http报文主体 */</span></span><br><span class="line">    write(cgi_input[<span class="number">1</span>], &amp;c, <span class="number">1</span>);    <span class="comment">/* 往cig_input的输入端写入http报文主体内容 */</span></span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">while</span> (read(cgi_output[<span class="number">0</span>], &amp;c, <span class="number">1</span>) &gt; <span class="number">0</span>)    <span class="comment">/* 从cig_output读取内容并发送到client socket */</span></span><br><span class="line">   send(client, &amp;c, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  close(cgi_output[<span class="number">0</span>]);</span><br><span class="line">  close(cgi_input[<span class="number">1</span>]);</span><br><span class="line">  waitpid(pid, &amp;status, <span class="number">0</span>);    <span class="comment">/* 等待子进程结束 */</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/* Get a line from a socket, whether the line ends in a newline,</span></span><br><span class="line"><span class="comment"> * carriage return, or a CRLF combination.  Terminates the string read</span></span><br><span class="line"><span class="comment"> * with a null character.  If no newline indicator is found before the</span></span><br><span class="line"><span class="comment"> * end of the buffer, the string is terminated with a null.  If any of</span></span><br><span class="line"><span class="comment"> * the above three line terminators is read, the last character of the</span></span><br><span class="line"><span class="comment"> * string will be a linefeed and the string will be terminated with a</span></span><br><span class="line"><span class="comment"> * null character.</span></span><br><span class="line"><span class="comment"> * Parameters: the socket descriptor</span></span><br><span class="line"><span class="comment"> *             the buffer to save the data in</span></span><br><span class="line"><span class="comment"> *             the size of the buffer</span></span><br><span class="line"><span class="comment"> * Returns: the number of bytes stored (excluding null) */</span></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/* 从描述符sock指定的socket读取一行存放到buf中,然后返回这一行的长度(包含换行符\n) */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_line</span><span class="params">(<span class="keyword">int</span> sock, <span class="keyword">char</span> *buf, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">char</span> c = <span class="string">'\0'</span>;</span><br><span class="line"> <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">while</span> ((i &lt; size - <span class="number">1</span>) &amp;&amp; (c != <span class="string">'\n'</span>))</span><br><span class="line"> &#123;</span><br><span class="line">  n = recv(sock, &amp;c, <span class="number">1</span>, <span class="number">0</span>);    <span class="comment">/* 从socket接收一个字符 */</span></span><br><span class="line">  <span class="comment">/* DEBUG printf("%02X\n", c); */</span></span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">0</span>)    <span class="comment">/* recv成功 */</span></span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">if</span> (c == <span class="string">'\r'</span>)    <span class="comment">/* 发现回车符,到达行尾了,处理一下不同系统的换行 */</span></span><br><span class="line">   &#123;</span><br><span class="line">    <span class="comment">/* 要读懂这几行代码需要了解一下回车与换行的区别 */</span></span><br><span class="line">    n = recv(sock, &amp;c, <span class="number">1</span>, MSG_PEEK);    <span class="comment">/* 读取一个字符,但不消耗socket的buffer */</span></span><br><span class="line">    <span class="comment">/* DEBUG printf("%02X\n", c); */</span></span><br><span class="line">    <span class="keyword">if</span> ((n &gt; <span class="number">0</span>) &amp;&amp; (c == <span class="string">'\n'</span>))    <span class="comment">/* 发现是换行符便消耗掉 */</span></span><br><span class="line">     recv(sock, &amp;c, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">     c = <span class="string">'\n'</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   buf[i] = c;</span><br><span class="line">   i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">   c = <span class="string">'\n'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> buf[i] = <span class="string">'\0'</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/* Return the informational HTTP headers about a file. */</span></span><br><span class="line"><span class="comment">/* Parameters: the socket to print the headers on</span></span><br><span class="line"><span class="comment"> *             the name of the file */</span></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/* 把http headers信息写入client socket */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">headers</span><span class="params">(<span class="keyword">int</span> client, <span class="keyword">const</span> <span class="keyword">char</span> *filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"> (<span class="keyword">void</span>)filename;  <span class="comment">/* could use filename to determine file type */</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">strcpy</span>(buf, <span class="string">"HTTP/1.0 200 OK\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">strcpy</span>(buf, SERVER_STRING);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"Content-Type: text/html\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">strcpy</span>(buf, <span class="string">"\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/* Give a client a 404 not found status message. */</span></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">not_found</span><span class="params">(<span class="keyword">int</span> client)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"HTTP/1.0 404 NOT FOUND\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, SERVER_STRING);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"Content-Type: text/html\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"&lt;HTML&gt;&lt;TITLE&gt;Not Found&lt;/TITLE&gt;\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"&lt;BODY&gt;&lt;P&gt;The server could not fulfill\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"your request because the resource specified\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"is unavailable or nonexistent.\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"&lt;/BODY&gt;&lt;/HTML&gt;\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/* Send a regular file to the client.  Use headers, and report</span></span><br><span class="line"><span class="comment"> * errors to client if they occur.</span></span><br><span class="line"><span class="comment"> * Parameters: a pointer to a file structure produced from the socket</span></span><br><span class="line"><span class="comment"> *              file descriptor</span></span><br><span class="line"><span class="comment"> *             the name of the file to serve */</span></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/* 把http headers和文件内容发送到client socket */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">serve_file</span><span class="params">(<span class="keyword">int</span> client, <span class="keyword">const</span> <span class="keyword">char</span> *filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> FILE *resource = <span class="literal">NULL</span>;</span><br><span class="line"> <span class="keyword">int</span> numchars = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"> buf[<span class="number">0</span>] = <span class="string">'A'</span>; buf[<span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line"> <span class="keyword">while</span> ((numchars &gt; <span class="number">0</span>) &amp;&amp; <span class="built_in">strcmp</span>(<span class="string">"\n"</span>, buf))  <span class="comment">/* read &amp; discard headers */</span><span class="comment">/* 读取并抛弃headers内容 */</span></span><br><span class="line">  numchars = get_line(client, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"></span><br><span class="line"> resource = fopen(filename, <span class="string">"r"</span>);</span><br><span class="line"> <span class="keyword">if</span> (resource == <span class="literal">NULL</span>)</span><br><span class="line">  not_found(client);    <span class="comment">/* 找不到filename对应的资源,返回404信息 */</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">  headers(client, filename);    <span class="comment">/* 将header信息添加到client socket */</span></span><br><span class="line">  cat(client, resource);    <span class="comment">/* 把文件resource的内容全部send到client socket */</span></span><br><span class="line"> &#125;</span><br><span class="line"> fclose(resource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/* This function starts the process of listening for web connections</span></span><br><span class="line"><span class="comment"> * on a specified port.  If the port is 0, then dynamically allocate a</span></span><br><span class="line"><span class="comment"> * port and modify the original port variable to reflect the actual</span></span><br><span class="line"><span class="comment"> * port.</span></span><br><span class="line"><span class="comment"> * Parameters: pointer to variable containing the port to connect on</span></span><br><span class="line"><span class="comment"> * Returns: the socket */</span></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">startup</span><span class="params">(u_short *port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> httpd = <span class="number">0</span>;    <span class="comment">/* socket描述符 */</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">name</span>;</span>    <span class="comment">/* socket地址 */</span></span><br><span class="line"></span><br><span class="line"> httpd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);    <span class="comment">/* 创建socket,返回socket描述符 */</span></span><br><span class="line"> <span class="keyword">if</span> (httpd == <span class="number">-1</span>)</span><br><span class="line">  error_die(<span class="string">"socket"</span>);</span><br><span class="line"> <span class="built_in">memset</span>(&amp;name, <span class="number">0</span>, <span class="keyword">sizeof</span>(name));</span><br><span class="line"> name.sin_family = AF_INET;    <span class="comment">/* 采用AF_INET地址族 */</span></span><br><span class="line"> name.sin_port = htons(*port);    <span class="comment">/* 指定端口。Host to Network Short int,将整型变量从主机字节顺序转变成网络字节顺序,即将整数在地址空间存储方式变为高位字节存放在内存的低地址处 */</span></span><br><span class="line"> name.sin_addr.s_addr = htonl(INADDR_ANY);    <span class="comment">/* Host to Network Long int,INADDR_ANY就是0.0.0.0,泛指本机地址 */</span></span><br><span class="line"> <span class="keyword">if</span> (bind(httpd, (struct sockaddr *)&amp;name, <span class="keyword">sizeof</span>(name)) &lt; <span class="number">0</span>)    <span class="comment">/* 绑定socket的地址 */</span></span><br><span class="line">  error_die(<span class="string">"bind"</span>);</span><br><span class="line"> <span class="keyword">if</span> (*port == <span class="number">0</span>)  <span class="comment">/* if dynamically allocating a port */</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">socklen_t</span> namelen = <span class="keyword">sizeof</span>(name);</span><br><span class="line">  <span class="keyword">if</span> (getsockname(httpd, (struct sockaddr *)&amp;name, &amp;namelen) == <span class="number">-1</span>)    <span class="comment">/* 获取socket绑定的地址(name) */</span></span><br><span class="line">   error_die(<span class="string">"getsockname"</span>);</span><br><span class="line">  *port = ntohs(name.sin_port);    <span class="comment">/* 获取socket实际端口,port是通过指针传进来的,startup函数的调用者也就获得了socket的实际端口 */</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (listen(httpd, <span class="number">5</span>) &lt; <span class="number">0</span>)    <span class="comment">/* 开始监听并且指定socket的最大连接数为5 */</span></span><br><span class="line">  error_die(<span class="string">"listen"</span>);</span><br><span class="line"> <span class="keyword">return</span>(httpd);    <span class="comment">/* 返回socket的描述符 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/* Inform the client that the requested web method has not been</span></span><br><span class="line"><span class="comment"> * implemented.</span></span><br><span class="line"><span class="comment"> * Parameter: the client socket */</span></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unimplemented</span><span class="params">(<span class="keyword">int</span> client)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"HTTP/1.0 501 Method Not Implemented\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, SERVER_STRING);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"Content-Type: text/html\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Method Not Implemented\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"&lt;/TITLE&gt;&lt;/HEAD&gt;\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"&lt;BODY&gt;&lt;P&gt;HTTP request method not supported.\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="built_in">sprintf</span>(buf, <span class="string">"&lt;/BODY&gt;&lt;/HTML&gt;\r\n"</span>);</span><br><span class="line"> send(client, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/* 掌握一些关于socket和网络通讯的基本知识再来看代码会比较得心应手</span></span><br><span class="line"><span class="comment"> * 推荐阅读: https://blog.csdn.net/hguisu/article/details/7445768     */</span></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> server_sock = <span class="number">-1</span>;</span><br><span class="line"> u_short port = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">int</span> client_sock = <span class="number">-1</span>;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_name</span>;</span>    <span class="comment">/* 客户端通讯地址 */</span></span><br><span class="line"> <span class="keyword">socklen_t</span> client_name_len = <span class="keyword">sizeof</span>(client_name);</span><br><span class="line"><span class="comment">// pthread_t newthread;</span></span><br><span class="line"></span><br><span class="line"> server_sock = startup(&amp;port);    <span class="comment">/* 建立一个socket并开始监听,返回的server_sock是这个socket的描述符 */</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"httpd running on port %d\n"</span>, port);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="comment">/* 与客户端建立连接,获得连接套接字 */</span></span><br><span class="line">  <span class="comment">/*  accept默认会阻塞进程,直到有一个客户连接建立后返回,它返回的是一个新可用的套接字,这个套接字是连接套接字 */</span></span><br><span class="line">  client_sock = accept(server_sock,</span><br><span class="line">                       (struct sockaddr *)&amp;client_name,</span><br><span class="line">                       &amp;client_name_len);</span><br><span class="line">  <span class="keyword">if</span> (client_sock == <span class="number">-1</span>)</span><br><span class="line">   error_die(<span class="string">"accept"</span>);</span><br><span class="line">  accept_request(client_sock);</span><br><span class="line"> <span class="comment">/* if (pthread_create(&amp;newthread , NULL, accept_request, client_sock) != 0) */</span></span><br><span class="line"> <span class="comment">/*  perror("pthread_create"); */</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> close(server_sock);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译Tiny-HTTPd"><a href="#编译Tiny-HTTPd" class="headerlink" title="编译Tiny HTTPd"></a>编译Tiny HTTPd</h3><p>在源码文件httpd.c的开头，作者已经对如何在Linux上编译做了详细说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This program compiles for Sparc Solaris 2.6.</span></span><br><span class="line"><span class="comment"> * To compile for Linux:</span></span><br><span class="line"><span class="comment"> *  1) Comment out the #include &lt;pthread.h&gt; line.</span></span><br><span class="line"><span class="comment"> *  2) Comment out the line that defines the variable newthread.</span></span><br><span class="line"><span class="comment"> *  3) Comment out the two lines that run pthread_create().</span></span><br><span class="line"><span class="comment"> *  4) Uncomment the line that runs accept_request().</span></span><br><span class="line"><span class="comment"> *  5) Remove -lsocket from the Makefile.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>做完上面说的5步之后，执行编译命令<code>make</code>，会抛出两个warning，不过不影响编译结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cheung@ubuntu:~/documents/tinyhttpd-0.1.0$ make</span><br><span class="line">gcc -W -Wall -lpthread -o httpd httpd.c</span><br><span class="line">httpd.c: In <span class="keyword">function</span> ‘startup’:</span><br><span class="line">httpd.c:444:52: warning: pointer targets <span class="keyword">in</span> passing argument 3 of ‘getsockname’ differ <span class="keyword">in</span> signedness [-Wpointer-sign]</span><br><span class="line">   <span class="keyword">if</span> (getsockname(httpd, (struct sockaddr *)&amp;name, &amp;namelen) == -1)</span><br><span class="line">                                                    ^</span><br><span class="line">In file included from httpd.c:16:0:</span><br><span class="line">/usr/include/x86_64-linux-gnu/sys/socket.h:127:12: note: expected ‘socklen_t * restrict &#123;aka unsigned int * restrict&#125;’ but argument is of <span class="built_in">type</span> ‘int *’</span><br><span class="line"> extern int getsockname (int __fd, __SOCKADDR_ARG __addr,</span><br><span class="line">            ^</span><br><span class="line">httpd.c: In <span class="keyword">function</span> ‘main’:</span><br><span class="line">httpd.c:503:24: warning: pointer targets <span class="keyword">in</span> passing argument 3 of ‘accept’ differ <span class="keyword">in</span> signedness [-Wpointer-sign]</span><br><span class="line">                        &amp;client_name_len);</span><br><span class="line">                        ^</span><br><span class="line">In file included from httpd.c:16:0:</span><br><span class="line">/usr/include/x86_64-linux-gnu/sys/socket.h:243:12: note: expected ‘socklen_t * restrict &#123;aka unsigned int * restrict&#125;’ but argument is of <span class="built_in">type</span> ‘int *’</span><br><span class="line"> extern int accept (int __fd, __SOCKADDR_ARG __addr,</span><br></pre></td></tr></table></figure><p>抛出警告是因为httpd.c中的namelen和client_name_len的类型不严格匹配:<br>将</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> namelen = <span class="keyword">sizeof</span>(name);</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">socklen_t</span> namelen = <span class="keyword">sizeof</span>(name);</span><br></pre></td></tr></table></figure><p>将</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> client_name_len = <span class="keyword">sizeof</span>(client_name);</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">socklen_t</span> client_name_len = <span class="keyword">sizeof</span>(client_name);</span><br></pre></td></tr></table></figure><p>可以修正这两个警告。</p><p>编译通过后，目录下会生成可执行文件<code>httpd</code>，运行这个程序:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./httpd</span><br></pre></td></tr></table></figure><p>程序会在命令行打印随机获得的http端口(port)，在浏览器打开<code>ip:port</code>就可以打开一个简单的网页。这个网页有一个输入框，输入一个颜色(例如purple/blue/yellow/pink)，可以跳转到指定颜色的网页(ip:port/color.cgi)。如下图(输入purple):</p><center>![打开网页ip:port](/images/tiny-httpd-annotation/httpd-client-index.png)</center><center>![cgi程序返回结果](/images/tiny-httpd-annotation/httpd-client-webpage-color.png)</center><p>如果在输入一个颜色之后，跳转的网页是空的，这是由于脚本指定的perl解析器的路径有问题。打开htdoc目录下的<code>check.cgi</code>和<code>color.cgi</code>，可以看到第一行都是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/perl -Tw</span></span><br></pre></td></tr></table></figure><p>在我使用的Linux主机环境下，perl解析器的路径并不是<code>/usr/local/bin/perl</code>，使用<code>whereis perl</code>查看perl路径:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ whereis perl</span><br><span class="line">perl: /usr/bin/perl /usr/bin/perl5.22-x86_64-linux-gnu /etc/perl /usr/share/perl /usr/share/man/man1/perl.1.gz</span><br></pre></td></tr></table></figure><p>把<code>check.cgi</code>和<code>color.cgi</code>的第一行修改为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl -Tw</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tiny HTTPd项目地址: &lt;a href=&quot;https://sourceforge.net/projects/tinyhttpd/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tiny HTTPd&lt;/a&gt;&lt;br&gt;作者J. David Blackstone对这个项目的Summary如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tinyhttpd is a relatively simple webserver I wrote for a school project. While exceedingly simple, tinyhttpd is threaded and handles basic CGI scripts! This is an educational tool to demonstrate the concepts behind http.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="源码" scheme="https://cheung.site/categories/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Http" scheme="https://cheung.site/tags/Http/"/>
    
      <category term="源码" scheme="https://cheung.site/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop集群监控</title>
    <link href="https://cheung.site/2018/07/28/hadoop-cluster-monitoring/"/>
    <id>https://cheung.site/2018/07/28/hadoop-cluster-monitoring/</id>
    <published>2018-07-28T13:13:47.000Z</published>
    <updated>2019-05-13T11:59:26.618Z</updated>
    
    <content type="html"><![CDATA[<p>本文的控制台输出都基于一个四台虚拟主机的Hadoop集群，这个集群的搭建过程参考 <a href="/2018/07/25/install-apache-hadoop-on-multi-node-cluster/">Hadoop完全分布式集群部署</a>，集群概况如下：</p><table><thead><tr><th>角色</th><th>主机名(hostname)</th><th>IP地址</th></tr></thead><tbody><tr><td>Master</td><td>sun</td><td>192.168.118.101</td></tr><tr><td>Slave</td><td>mercury</td><td>192.168.118.102</td></tr><tr><td>Slave</td><td>venus</td><td>192.168.118.103</td></tr><tr><td>Slave</td><td>earth</td><td>192.168.118.104</td></tr></tbody></table><a id="more"></a><h2 id="监控HDFS"><a href="#监控HDFS" class="headerlink" title="监控HDFS"></a>监控HDFS</h2><h3 id="通过控制台监控HDFS"><a href="#通过控制台监控HDFS" class="headerlink" title="通过控制台监控HDFS"></a>通过控制台监控HDFS</h3><p>HDFS的命令都是通过${HADOOP_HOME}/bin/hdfs脚本调用的。在控制台执行<code>hdfs</code>会打印hdfs包含的参数命令的用法，看着一目了然，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">cheung@sun:~$ hdfs</span><br><span class="line">Usage: hdfs [--config confdir] [--loglevel loglevel] COMMAND</span><br><span class="line">       <span class="built_in">where</span> COMMAND is one of:</span><br><span class="line">  dfs                  run a filesystem <span class="built_in">command</span> on the file systems supported <span class="keyword">in</span> Hadoop.</span><br><span class="line">  classpath            prints the classpath</span><br><span class="line">  namenode -format     format the DFS filesystem</span><br><span class="line">  secondarynamenode    run the DFS secondary namenode</span><br><span class="line">  namenode             run the DFS namenode</span><br><span class="line">  journalnode          run the DFS journalnode</span><br><span class="line">  zkfc                 run the ZK Failover Controller daemon</span><br><span class="line">  datanode             run a DFS datanode</span><br><span class="line">  dfsadmin             run a DFS admin client</span><br><span class="line">  haadmin              run a DFS HA admin client</span><br><span class="line">  fsck                 run a DFS filesystem checking utility</span><br><span class="line">  balancer             run a cluster balancing utility</span><br><span class="line">  jmxget               get JMX exported values from NameNode or DataNode.</span><br><span class="line">  mover                run a utility to move block replicas across</span><br><span class="line">                       storage types</span><br><span class="line">  oiv                  apply the offline fsimage viewer to an fsimage</span><br><span class="line">  oiv_legacy           apply the offline fsimage viewer to an legacy fsimage</span><br><span class="line">  oev                  apply the offline edits viewer to an edits file</span><br><span class="line">  fetchdt              fetch a delegation token from the NameNode</span><br><span class="line">  getconf              get config values from configuration</span><br><span class="line">  groups               get the groups <span class="built_in">which</span> users belong to</span><br><span class="line">  snapshotDiff         diff two snapshots of a directory or diff the</span><br><span class="line">                       current directory contents with a snapshot</span><br><span class="line">  lsSnapshottableDir   list all snapshottable <span class="built_in">dirs</span> owned by the current user</span><br><span class="line">Use -<span class="built_in">help</span> to see options</span><br><span class="line">  portmap              run a portmap service</span><br><span class="line">  nfs3                 run an NFS version 3 gateway</span><br><span class="line">  cacheadmin           configure the HDFS cache</span><br><span class="line">  crypto               configure HDFS encryption zones</span><br><span class="line">  storagepolicies      list/get/<span class="built_in">set</span> block storage policies</span><br><span class="line">  version              <span class="built_in">print</span> the version</span><br><span class="line"></span><br><span class="line">Most commands <span class="built_in">print</span> <span class="built_in">help</span> when invoked w/o parameters.</span><br></pre></td></tr></table></figure><p>其中<code>hdfs dfsadmin</code>命令可以获取关于集群的有用信息。<br>例如下面的命令可以获取hadoop集群目前运行的概况(例如集群容量、使用率和live datanodes)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hdfs dfsadmin -report</span><br></pre></td></tr></table></figure><p>下面是在四台虚拟主机搭建的hadoop集群执行report命令的返回样例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">cheung@sun:~$ hdfs dfsadmin -report</span><br><span class="line">Configured Capacity: 56669491200 (52.78 GB)</span><br><span class="line">Present Capacity: 29869539328 (27.82 GB)</span><br><span class="line">DFS Remaining: 29869441024 (27.82 GB)</span><br><span class="line">DFS Used: 98304 (96 KB)</span><br><span class="line">DFS Used%: 0.00%</span><br><span class="line">Under replicated blocks: 0</span><br><span class="line">Blocks with corrupt replicas: 0</span><br><span class="line">Missing blocks: 0</span><br><span class="line">Missing blocks (with replication factor 1): 0</span><br><span class="line"></span><br><span class="line">-------------------------------------------------</span><br><span class="line">Live datanodes (3):</span><br><span class="line"></span><br><span class="line">Name: 192.168.118.102:50010 (mercury)</span><br><span class="line">Hostname: mercury</span><br><span class="line">Decommission Status : Normal</span><br><span class="line">Configured Capacity: 18889830400 (17.59 GB)</span><br><span class="line">DFS Used: 32768 (32 KB)</span><br><span class="line">Non DFS Used: 7826771968 (7.29 GB)</span><br><span class="line">DFS Remaining: 10079883264 (9.39 GB)</span><br><span class="line">DFS Used%: 0.00%</span><br><span class="line">DFS Remaining%: 53.36%</span><br><span class="line">Configured Cache Capacity: 0 (0 B)</span><br><span class="line">Cache Used: 0 (0 B)</span><br><span class="line">Cache Remaining: 0 (0 B)</span><br><span class="line">Cache Used%: 100.00%</span><br><span class="line">Cache Remaining%: 0.00%</span><br><span class="line">Xceivers: 1</span><br><span class="line">Last contact: Sat Jul 28 21:35:44 CST 2018</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Name: 192.168.118.104:50010 (earth)</span><br><span class="line">Hostname: earth</span><br><span class="line">Decommission Status : Normal</span><br><span class="line">Configured Capacity: 18889830400 (17.59 GB)</span><br><span class="line">DFS Used: 32768 (32 KB)</span><br><span class="line">Non DFS Used: 7826591744 (7.29 GB)</span><br><span class="line">DFS Remaining: 10080063488 (9.39 GB)</span><br><span class="line">DFS Used%: 0.00%</span><br><span class="line">DFS Remaining%: 53.36%</span><br><span class="line">Configured Cache Capacity: 0 (0 B)</span><br><span class="line">Cache Used: 0 (0 B)</span><br><span class="line">Cache Remaining: 0 (0 B)</span><br><span class="line">Cache Used%: 100.00%</span><br><span class="line">Cache Remaining%: 0.00%</span><br><span class="line">Xceivers: 1</span><br><span class="line">Last contact: Sat Jul 28 21:35:44 CST 2018</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Name: 192.168.118.103:50010 (venus)</span><br><span class="line">Hostname: venus</span><br><span class="line">Decommission Status : Normal</span><br><span class="line">Configured Capacity: 18889830400 (17.59 GB)</span><br><span class="line">DFS Used: 32768 (32 KB)</span><br><span class="line">Non DFS Used: 8197160960 (7.63 GB)</span><br><span class="line">DFS Remaining: 9709494272 (9.04 GB)</span><br><span class="line">DFS Used%: 0.00%</span><br><span class="line">DFS Remaining%: 51.40%</span><br><span class="line">Configured Cache Capacity: 0 (0 B)</span><br><span class="line">Cache Used: 0 (0 B)</span><br><span class="line">Cache Remaining: 0 (0 B)</span><br><span class="line">Cache Used%: 100.00%</span><br><span class="line">Cache Remaining%: 0.00%</span><br><span class="line">Xceivers: 1</span><br><span class="line">Last contact: Sat Jul 28 21:35:44 CST 2018</span><br></pre></td></tr></table></figure><p>通过<code>help</code>命令可以获取<code>dfsadmin</code>的更多用法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hdfs dfsadmin -<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h3 id="通过浏览器-WebUI-监控HDFS"><a href="#通过浏览器-WebUI-监控HDFS" class="headerlink" title="通过浏览器(WebUI)监控HDFS"></a>通过浏览器(WebUI)监控HDFS</h3><p>可视化真是个好东西，通过WebUI监控HDFS直观多了。master(namenode)的WebUI通过在<code>hdfs-site.xml</code>中设置<code>dfs.namenode.http-address</code>来设置，默认namenode的<code>50070</code>端口。浏览器打开地址(hadoop-master-ip替换为hadoop集群master的ip): <a href="http://hadoop-master-ip:50070" target="_blank" rel="noopener">http://hadoop-master-ip:50070</a></p><center>![HDFS WebUI](/images/hadoop-cluster-monitoring/hdfs-webui.png)</center><br><blockquote><p>我们可以看到页面顶部菜单栏有如下几个监控目标:<br>|Overview|DataNodes|Datanode Volumn Failures|Snapshot|Startup Progress|Utilities|<br>Overview: 集群概况，与通过<code>hdfs dfsadmin -report</code>获取的信息类似；<br>DataNodes: 各个DN(Datanode)的状态、容量、Blocks数量等信息；<br>Datanode Volumn Failures: 记录DN的异常；<br>Snapshot: Snapshot Summary<br>Startup Progress: 记录HDFS启动过程和状态，包括装载fsimage和edits，checkpoint信息；<br>Utilities: 这个很方便实用！下拉有两个选项，”Browse the file system”和”Logs”，”Browse the file system”以图形界面的方式查看HDFS文件系统存储的内容，”Logs”可以查看hadoop-master节点的日志。</p></blockquote><h2 id="监控YARN"><a href="#监控YARN" class="headerlink" title="监控YARN"></a>监控YARN</h2><h3 id="通过控制台监控YARN"><a href="#通过控制台监控YARN" class="headerlink" title="通过控制台监控YARN"></a>通过控制台监控YARN</h3><p>控制台输入<code>yarn</code>会输出<code>yarn</code>命令的用法。下面的命令输出yarn集群的节点信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cheung@sun:~$ yarn node -list</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">18/07/28 23:58:07 INFO client.RMProxy: Connecting to ResourceManager at sun/192.168.118.101:8032</span><br><span class="line">Total Nodes:3</span><br><span class="line">         Node-Id     Node-StateNode-Http-AddressNumber-of-Running-Containers</span><br><span class="line">     earth:40373        RUNNING       earth:8042                           0</span><br><span class="line">     venus:46595        RUNNING       venus:8042                           0</span><br><span class="line">   mercury:33455        RUNNING     mercury:8042                           0</span><br></pre></td></tr></table></figure><p>[贴心提醒：hdfs命令和yarn命令不需要在master上执行也可以获得一样的结果。]</p><h3 id="通过浏览器-WebUI-监控YARN"><a href="#通过浏览器-WebUI-监控YARN" class="headerlink" title="通过浏览器(WebUI)监控YARN"></a>通过浏览器(WebUI)监控YARN</h3><p>YARN默认http端口为8088，浏览器打开地址(hadoop-master-ip替换为hadoop集群master的ip): <a href="http://hadoop-master-ip:8088" target="_blank" rel="noopener">http://hadoop-master-ip:8088</a></p><center>![YARN WebUI](/images/hadoop-cluster-monitoring/yarn-webui.png)</center><br><h2 id="日志监控"><a href="#日志监控" class="headerlink" title="日志监控"></a>日志监控</h2><p>通过<code>jps</code>/<code>hdfs</code>/<code>yarn</code>这些命令行工具，我们可以快速查看集群的状态，但如果某些节点出问题了或者是发现某些进程没有正常启动(总之就是发现异常吧)，还是要通过日志打印来了解异常的详情然后寻求解决办法。Hadoop的日志在<code>${HADOOP_HOME}/logs</code>目录下。</p><p>参考文献:<br>[1] <a href="https://www.linode.com/docs/databases/hadoop/how-to-install-and-set-up-hadoop-cluster/" target="_blank" rel="noopener">https://www.linode.com/docs/databases/hadoop/how-to-install-and-set-up-hadoop-cluster/</a><br>[2] <a href="http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml" target="_blank" rel="noopener">http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml</a><br>[3] <a href="http://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-common/yarn-default.xml" target="_blank" rel="noopener">http://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-common/yarn-default.xml</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文的控制台输出都基于一个四台虚拟主机的Hadoop集群，这个集群的搭建过程参考 &lt;a href=&quot;/2018/07/25/install-apache-hadoop-on-multi-node-cluster/&quot;&gt;Hadoop完全分布式集群部署&lt;/a&gt;，集群概况如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;角色&lt;/th&gt;
&lt;th&gt;主机名(hostname)&lt;/th&gt;
&lt;th&gt;IP地址&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;sun&lt;/td&gt;
&lt;td&gt;192.168.118.101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Slave&lt;/td&gt;
&lt;td&gt;mercury&lt;/td&gt;
&lt;td&gt;192.168.118.102&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Slave&lt;/td&gt;
&lt;td&gt;venus&lt;/td&gt;
&lt;td&gt;192.168.118.103&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Slave&lt;/td&gt;
&lt;td&gt;earth&lt;/td&gt;
&lt;td&gt;192.168.118.104&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="https://cheung.site/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="https://cheung.site/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Linux的一些基础知识</title>
    <link href="https://cheung.site/2018/07/25/linux-tutorial-for-beginners/"/>
    <id>https://cheung.site/2018/07/25/linux-tutorial-for-beginners/</id>
    <published>2018-07-25T08:05:58.000Z</published>
    <updated>2019-05-13T11:59:27.578Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>为了避免在写Linux相关的文章时重复啰嗦，在这里整理一些比较重要的Linux基础知识(Based on Ubuntu)。</p></blockquote><a id="more"></a><h3 id="关于不同的操作系统"><a href="#关于不同的操作系统" class="headerlink" title="关于不同的操作系统"></a>关于不同的操作系统</h3><p>不同的操作系统有不一样的使命，也导致了用户群体的不一样。如微软的Windows和苹果的MacOS是目前用户十分广泛的桌面操作系统，两者都带有非常友好易用的用户界面，对于娱乐和办公，这类操作系统占有绝对领先的份额。但是对于服务于众多软件后台功能的服务器，图形界面就显得不这么重要了，这类操作系统更看重软件支持程度、安全性、相对较少的系统资源占用等，而开源的Linux是目前最广泛使用的服务器操作系统。Linux的发新版很多，比较常见的有Ubuntu(上手简单，界面看着也很舒服)、CentOS(服务器用得比较多，但不适合桌面机)、Debian和ArchLinux没用过，不过听说比较适合高级用户，可能由于系统可定制程度和系统优化比较好而成为这部分用户的心头好吧；也有一个国内的Linux发行版得到了很多用户的喜爱——Deepin，界面很好看可以当桌面操作系统把玩一下，看新闻说今年Deepin团队创始人离职了，希望这个项目还能好好运营下去吧。<br>嗯，我一直都选Ubuntu，一方面是它的图形界面算得上比较好看的了，并且网上关于Ubuntu可以找到的资料也比较丰富。曾经我也热衷于折腾Linux的图形界面，搜集各种Ubuntu主题美化的教程，后来发现这些主题或多或少都对系统性能造成了影响，有的还可能导致死机…后来就都用原生的了。</p><h3 id="那些常用的配置文件"><a href="#那些常用的配置文件" class="headerlink" title="那些常用的配置文件"></a>那些常用的配置文件</h3><h4 id="etc-profile与-bash-profile"><a href="#etc-profile与-bash-profile" class="headerlink" title="/etc/profile与.bash_profile"></a><code>/etc/profile</code>与<code>.bash_profile</code></h4><p><code>环境变量</code>这个词大概不陌生，它的作用是告诉操作系统，对用的程序的摆放位置。添加环境变量后，要执行这些路径下的程序不需要再输入完整路径。<br><code>$ echo $PATH</code>命令可以输出当前的环境变量。<br>在Linux上安装过JDK、Scala、Hadoop、Spark之类软件的朋友，大概都给Linux配置过环境变量。这个与Windows上安装软件并配置环境变量是类似的。<br>Windows上有对应的图形界面可以让用户添加环境变量，而Linux的环境变量则从文件中读取，具体来说，是<code>/etc/profile</code>和<code>~/.bash_profile</code>这两个文件。这两个位置的环境变量区别在于作用域不一样。在<code>/etc/profile</code>中添加的环境变量对主机上的所有用户有效，属于全局环境变量；在<code>~/.bash_profile</code>中添加的环境变量只对当前用户有效，属于用户环境变量。此外，Linux中<code>~/.bashrc</code>与<code>~/.bash_profile</code>作用类似，不过<code>~/.bashrc</code>在每次交互式shell启动时都会重新加载。(注：Linux中<code>~</code>指向当前用户的主目录，即<code>/home/user_name</code>目录)<br>要使环境变量修改立刻生效，需要使用source命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ source /etc/profile</span><br><span class="line">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure><h4 id="hostname与hosts"><a href="#hostname与hosts" class="headerlink" title="hostname与hosts"></a><code>hostname</code>与<code>hosts</code></h4><p>Linux中，文件<code>/etc/hostname</code>文件保存着当前机器的机器名。安装Ubuntu虚拟机的话，hostname就是<code>ubuntu</code>，打开命令行可以看到前缀<code>cheung@ubuntu:~$</code>，其中<code>cheung</code>是用户名，<code>ubuntu</code>就是机器名了，<code>~</code>表示目前命令行在用户主目录。<br>Linux中的<code>/etc/hosts</code>是IP和主机名配置文件，负责IP地址与域名(主机名)的快速解析，与Windows中的hosts文件作用是一样的。例如，你在当前主机经常要访问另外一个IP为<code>192.168.118.130</code>的主机，例如你常常要确认这台主机的网络是否还正常，你可以用<code>$ ping 192.168.118.130</code>来做这个测试。但这个IP地址这么长，实在不好记，你就可以在<code>/etc/hosts</code>中添加一行<code>192.168.118.130    server1</code>，这样主机就会把<code>server1</code>解析为<code>192.168.118.130</code>，以后做只需要使用<code>ping server1</code>就可以了。</p><h3 id="Linux的权限管理"><a href="#Linux的权限管理" class="headerlink" title="Linux的权限管理"></a>Linux的权限管理</h3><p>Linux是一个多用户系统，用户/用户组/文件权限等概念和相关的命令要好好掌握。需要着重掌握的命令有<code>chmod</code>和<code>chown</code>，<code>chmod</code>用于更改文件或文件夹的读写许可设置(change mode的缩写)，<code>chown</code>用于更改文件所有者(change owner的缩写)，命令的具体使用方法可以参考这里<a href="http://man.linuxde.net/chmod" target="_blank" rel="noopener">chmod</a> | <a href="http://man.linuxde.net/chown" target="_blank" rel="noopener">chown</a></p><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><p>SSH是Secure Shell的缩写，为主机之间的远程通讯和管理提供安全服务。<br>SSH安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><p>生成公钥和私钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -P <span class="string">""</span></span><br></pre></td></tr></table></figure><p>SSH具体的机制可以看看这个<a href="https://www.digitalocean.com/community/tutorials/understanding-the-ssh-encryption-and-connection-process" target="_blank" rel="noopener">Understanding the SSH Encryption and Connection Process</a> (文章挺长…) 下面简单说明一下SSH的原理。<br>用户user在主机A和B上都有账号，常常需要在主机B上连接主机A进行通信，为了确保通讯连接的安全，就想了一个办法：主机B造了一把锁(公钥)和配套的钥匙(私钥)，然后把这锁复制了一个给到A(放在authorized_keys里，这是A添加的白名单)。之后每次B尝试与A建立连接，A就随机生成一个字符串并用这把锁加密然后发送给B，B收到这段密文之后用钥匙打开就得到了明文，然后B就把解密的明文发送给A，A收到后检查是否与发送的字符串一致，一致的话就可以确认B是认证的用户，连接就确认了。<br>最近搭建Hadoop集群，遇到一个比较诡异的问题：添加authorized_keys却不生效，后来发现竟然是权限问题，.ssh和authorized_keys权限过高导致！GitHub有对应的问题并给出了解决方案(chmod修改一下权限就可以了)，传送门 <a href="https://stackoverflow.com/questions/6377009/adding-public-key-to-ssh-authorized-keys-does-not-log-me-in-automatically" target="_blank" rel="noopener">Adding public key to ~/.ssh/authorized_keys does not log me in automatically</a> ，这里也有一些说明 <a href="https://web.archive.org/web/20140327182105/http://www.openssh.org/faq.html#3.14" target="_blank" rel="noopener">I copied my public key to authorized_keys but public-key authentication still doesn’t work.</a><br>要避免ssh的权限问题，可以使用<code>ssh-copy-id</code>命令来添加公钥。<br><code>ssh-copy-id</code>命令可以把本地主机的公钥复制到远程主机的authorized_keys文件上，<code>ssh-copy-id</code>命令也会给远程主机的用户主目录（home）和<del>/.ssh, 和</del>/.ssh/authorized_keys设置合适的权限。详情参考这里 <a href="http://man.linuxde.net/ssh-copy-id" target="_blank" rel="noopener">ssh-copy-id命令</a></p><h3 id="Linux一些常用命令"><a href="#Linux一些常用命令" class="headerlink" title="Linux一些常用命令"></a>Linux一些常用命令</h3><p>除了上面的一些Linux知识，使用Linux最重要的是要掌握常用的命令，例如文件复制<code>cp</code>, 文件移动<code>mv</code>, 罗列文件<code>ls</code>, 压缩解压<code>tar</code>,进行远程拷贝文件的命令<code>scp</code>等，命令详情可以通过这个网站查询： <a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a></p><h3 id="Linux桌面系统软件软推荐"><a href="#Linux桌面系统软件软推荐" class="headerlink" title="Linux桌面系统软件软推荐"></a>Linux桌面系统软件软推荐</h3><p>使用Linux桌面的话，有几个软件比较推荐的：<br>PDF阅读器：Okular<br>系统设置工具：Unity Tweak Tool<br>截图软件: Shutter<br>音乐播放器：Audacious<br>中文输入法：不推荐。搜狗拼音是目前在Linux上做的最好的，但貌似资源占用挺多的，偶尔导致系统卡顿…</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;为了避免在写Linux相关的文章时重复啰嗦，在这里整理一些比较重要的Linux基础知识(Based on Ubuntu)。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://cheung.site/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://cheung.site/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop完全分布式集群部署</title>
    <link href="https://cheung.site/2018/07/25/install-apache-hadoop-on-multi-node-cluster/"/>
    <id>https://cheung.site/2018/07/25/install-apache-hadoop-on-multi-node-cluster/</id>
    <published>2018-07-25T07:33:11.000Z</published>
    <updated>2019-05-13T11:59:26.846Z</updated>
    
    <content type="html"><![CDATA[<p>Hadoop支持以下三种部署模式：</p><blockquote><p>Local (Standalone) Mode: 本地模式<br>Pseudo-Distributed Mode: 伪分布模式<br>Fully-Distributed Mode: 完全分布模式</p></blockquote><p>前两种模式只适合用作Hadoop相关实验和测试，也难以从中体会Hadoop的框架和理念，Hadoop官网有简单的部署教程，传送门 <a href="http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/SingleCluster.html" target="_blank" rel="noopener">Hadoop: Setting up a Single Node Cluster</a>。 本文讨论Hadoop完全分布模式集群的搭建。</p><a id="more"></a><h2 id="VMware-Workstation安装Ubuntu虚拟机"><a href="#VMware-Workstation安装Ubuntu虚拟机" class="headerlink" title="VMware Workstation安装Ubuntu虚拟机"></a>VMware Workstation安装Ubuntu虚拟机</h2><p>安装Ubuntu虚拟机前断网(或者待进入安装界面后，在虚拟机内部断开网络，避免影响宿主机器的网络)，否则Ubuntu在安装过程中可能会下载更新，导致安装速度缓慢。<br>可以先安装虚拟机，然后在每个虚拟机环境下安装Hadoop；也可以先在一台虚拟机上搭建好Hadoop的软件环境，然后克隆该虚拟机得到集群。本文采用第一种方法。<br>Hadoop集群需要统一的用户，因此新建虚拟机时，填写的用户名保持一致，可以避免安装后再新建统一用户。<br>下面全部用<code>cheung</code>作为统一的用户名。密码也使用统一的密码。</p><h2 id="搭建Hadoop集群"><a href="#搭建Hadoop集群" class="headerlink" title="搭建Hadoop集群"></a>搭建Hadoop集群</h2><p>集群主机列表如下：</p><table><thead><tr><th>角色</th><th>主机名(hostname)</th><th>IP地址</th></tr></thead><tbody><tr><td>Master</td><td>sun</td><td>192.168.118.101</td></tr><tr><td>Slave</td><td>mercury</td><td>192.168.118.102</td></tr><tr><td>Slave</td><td>venus</td><td>192.168.118.103</td></tr><tr><td>Slave</td><td>earth</td><td>192.168.118.104</td></tr></tbody></table><blockquote><p>概述：在集群的每台机器上安装vim、ssh、jdk，每台机器都要配置jdk和hadoop环境变量，先在master(即sun)上配置好hadoop，把配置好的hadoop发送到其他主机完成部署。</p></blockquote><h3 id="更改软件源-可选"><a href="#更改软件源-可选" class="headerlink" title="更改软件源(可选)"></a>更改软件源(可选)</h3><p>这一步可选，选择合适的软件源可以提高软件的下载速度。开机进入Ubuntu后，先更改软件源为阿里云镜像源。(打开Ubuntu Software，菜单栏选择Software &amp; Updates，在打开面板的”Download from:”中依次选择”Others…”, China, <code>http://mirrors.aliyun.com/ubuntu</code>。稍等片刻，让Ubuntu Software更新source.list。打开命令行(快捷键Ctrl+Alt+T)，运行<code>sudo apt-get update</code>确保更新软件源。</p><h3 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装vim</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cheung@ubuntu:~$ sudo apt-get install vim</span><br></pre></td></tr></table></figure><h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><p>为了用主机名代替IP进行Hadoop集群内主机之间的通讯，需要修改各个主机的<code>host</code>以及<code>hostname</code><br><code>/etc/hostname</code>是Ubuntu系统的主机名配置文件，按照上述过程安装完Ubuntu，主机名默认是<code>ubuntu</code>。打开命令行可以观察到前缀为<code>cheung@ubuntu:~$</code>。使用vim(或者gedit,nano等编辑器)打开<code>/etc/hostname</code>，将主机名其修改为自己需要的名称，四台机器的主机名分别改为sun,mercury,venus,earth。[注：太阳Sun及距离其最近的三大行星(水星-Mercury、金星-Venus、地球-Earth)，主机名一律使用小写。]</p><p>文件<code>/etc/hostname</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sun</span><br></pre></td></tr></table></figure><p>文件<code>/etc/hosts</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1       localhost</span><br><span class="line">127.0.1.1       ubuntu</span><br><span class="line"></span><br><span class="line"># The following lines are desirable for IPv6 capable hosts</span><br><span class="line">::1     ip6-localhost ip6-loopback</span><br><span class="line">fe00::0 ip6-localnet</span><br><span class="line">ff00::0 ip6-mcastprefix</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br></pre></td></tr></table></figure><p>修改为(注释掉第二行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1       localhost</span><br><span class="line">#127.0.1.1       ubuntu</span><br><span class="line"></span><br><span class="line"># The following lines are desirable for IPv6 capable hosts</span><br><span class="line">::1     ip6-localhost ip6-loopback</span><br><span class="line">fe00::0 ip6-localnet</span><br><span class="line">ff00::0 ip6-mcastprefix</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br></pre></td></tr></table></figure><p>上面<code>127.0.1.1       ubuntu</code>那一行必须注释掉或者直接删除，否则会导致hadoop集群的slave主机群无法连接上master。这个问题困扰我很久，没想到竟然是这里出了问题。在hadoop官网找到了对应的issue竟然是2010年的 <a href="http://search-hadoop.com/m/Hadoop/uOzYtceYot1m8Mpf1?subj=Distributed+hadoop+setup+0+live+datanode+problem+in+cluster" target="_blank" rel="noopener">Distributed hadoop setup 0 live datanode problem in cluster</a></p><p>注意，其他三台主机(水星-Mercury、金星-Venus、地球-Earth)的<code>/etc/hostname</code>文件内容分别修改为<code>mercury</code>,<code>venus</code>,<code>earth</code>。同时，<code>/etc/hosts</code>文件的第二行亦作同样的修改。<br>重启即可使更改生效，再次打开命令行，可以看到控制台命令的前缀已经变为<code>cheung@sun:~$</code></p><h3 id="添加IP与主机名的映射"><a href="#添加IP与主机名的映射" class="headerlink" title="添加IP与主机名的映射"></a>添加IP与主机名的映射</h3><p>在每个虚拟机的<code>/etc/hosts</code>中添加Hadoop集群中每个虚拟机的ip地址和主机名(hostname)的映射：<br>[注：Linux查看IP的命令是<code>$ ifconfig</code>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">192.168.118.101    sun</span><br><span class="line">192.168.118.102    mercury</span><br><span class="line">192.168.118.103    venus</span><br><span class="line">192.168.118.104    earth</span><br></pre></td></tr></table></figure><h3 id="安装并配置ssh"><a href="#安装并配置ssh" class="headerlink" title="安装并配置ssh"></a>安装并配置ssh</h3><blockquote><p>Hadoop集群的master与slave之间，slave与slave之间都存在互相通信，因此要保证集群的所有机器之间能通过ssh无密码登陆。例如，master向slave派发任务，slave上报block信息给master，以及slave之间的文件互传(冗余备份)。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><p>生成公钥和私钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -P <span class="string">""</span></span><br></pre></td></tr></table></figure><p>将集群中每一台机器的<code>~/.ssh/id_rsa.pub</code>(公钥)的内容复制到所有节点(包括自己)的<code>.ssh/authorized_keys</code>文件末尾。对于这一步，有很多方法，ssh有个专用命令<code>ssh-copy-id</code>可以将本机的公钥复制到远程机器的authorized_keys文件中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub cheung@sun</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub cheung@mercury</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub cheung@venus</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub cheung@earth</span><br></pre></td></tr></table></figure><p>注意，上面的四条添加公钥到authorized_keys的命令要在每台机器上执行！再次重申“Hadoop集群的master与slave之间，slave与slave之间都存在互相通信，因此要保证集群的所有机器之间能通过ssh无密码登陆。”<br>通过以下命令验证是否能无密码登陆：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh sun</span><br><span class="line">$ ssh mercury</span><br><span class="line">$ ssh venus</span><br><span class="line">$ ssh earth</span><br></pre></td></tr></table></figure><p>配置正确的话，上面的ssh命令无需输入密码就可以直接登陆对应的虚拟机。</p><h3 id="安装Hadoop运行环境所需的软件"><a href="#安装Hadoop运行环境所需的软件" class="headerlink" title="安装Hadoop运行环境所需的软件"></a>安装Hadoop运行环境所需的软件</h3><p>分别到官网下载JDK、Hadoop安装包</p><ul><li>jdk-8u152-linux-x64.tar.gz</li><li>hadoop-2.7.6.tar.gz</li></ul><p>上述两个安装包全部放在<code>Downloads</code>目录下。</p><h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h4><p>准备把软件都安装到<code>/opt</code>目录下，为避免一直需要管理员权限，修改<code>/opt</code>目录的所有者为<code>cheung</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown -R cheung:cheung /opt</span><br></pre></td></tr></table></figure><p>命令行<code>cd ~/Downloads/</code>进入Downloads文件夹。</p><p>解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf jdk-8u152-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>移动至/opt目录下并同步修改目录名为jdk：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv jdk1.8.0_152/ /opt/jdk</span><br></pre></td></tr></table></figure><p><code>ls /opt</code>可以看到<code>/opt</code>目录下的jdk文件夹。</p><p>配置jdk环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/profile</span><br></pre></td></tr></table></figure><p>在末尾添加jdk环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JDK</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/jdk</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>运行以下命令让jdk环境变量生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>检查java jdk是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -version</span><br></pre></td></tr></table></figure><p>出现类似输出表示jdk安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ java -version</span><br><span class="line">java version <span class="string">"1.8.0_152"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_152-b16)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.152-b16, mixed mode)</span><br></pre></td></tr></table></figure><h4 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h4><p>进入hadoop安装包所在文件夹，解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf hadoop-2.7.6.tar.gz</span><br></pre></td></tr></table></figure><p>移动至/opt目录下并同步修改文件名为spark：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mv hadoop-2.7.6 /opt/hadoop</span><br></pre></td></tr></table></figure><p><code>ls /opt</code>可以看到<code>/opt</code>目录下的hadoop文件夹。</p><p>配置hadoop环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/profile</span><br></pre></td></tr></table></figure><p>在末尾添加spark环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hadoop</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/opt/hadoop</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;HADOOP_HOME&#125;</span>/bin:<span class="variable">$&#123;HADOOP_HOME&#125;</span>/sbin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>运行以下命令让hadoop环境变量生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h4 id="修改Hadoop配置"><a href="#修改Hadoop配置" class="headerlink" title="修改Hadoop配置"></a>修改Hadoop配置</h4><p>hadoop的配置文件都在<code>${HADOOP_HOME}/etc/hadoop</code>目录下，命令行进入这个目录修改以下配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$&#123;HADOOP_HOME&#125;</span>/etc/hadoop</span><br></pre></td></tr></table></figure><h5 id="hadoop-env-sh"><a href="#hadoop-env-sh" class="headerlink" title="hadoop-env.sh"></a>hadoop-env.sh</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim hadoop-env.sh</span><br></pre></td></tr></table></figure><p>将其中的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span></span><br></pre></td></tr></table></figure><p>替换为JDK的安装位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/jdk</span><br></pre></td></tr></table></figure><h5 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim core-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://sun:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim hdfs-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/data/hadoop/nameNode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/data/hadoop/dataNode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意，上面我把namenode和datanode的路径分别设置在了<code>/data/hadoop/nameNode</code>和<code>/data/hadoop/dataNode</code>，hadoop格式化的时候会尝试创建这两个目录，我们要确保这个目录能被成功创建。但是<code>/data</code>位于系统根目录，用户<code>cheung</code>运行的hadoop程序是无权创建这个目录的，因此需要我们手动以管理员权限创建并将这个目录的所有者更改为<code>cheung</code>，之后的就可以交给hadoop。当然了，如果把这个路径改为<code>/home/cheung</code>下的某个路径，那么hadoop就有权创建所需的文件夹。我们舍近求远设置到<code>/data</code>路径下只是为了把数据统一放到一个显著的位置。我们需要在集群的每一台主机上执行以下创建<code>/data</code>目录并更改所有权的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir /data</span><br><span class="line">$ sudo chown -R cheung:cheung /data</span><br></pre></td></tr></table></figure><h5 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim mapred-site.xml</span><br></pre></td></tr></table></figure><p>${HADOOP_HOME}/opt/etc/hadoop目录下可能没有mapred-site.xml，但有一个mapred-site.xml.template，复制该文件得到mapred-site.xml。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp mapred-site.xml.template mapred-site.xml</span><br><span class="line">$ vim mapred-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>sun<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.acl.enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="slave"><a href="#slave" class="headerlink" title="slave"></a>slave</h5><p>把原有的<code>localhost</code>那一行删除，添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mercury</span><br><span class="line">venus</span><br><span class="line">earth</span><br></pre></td></tr></table></figure><p>这里是设置集群哪些机器作为slave节点的地方，当然了，也可以再添加一行<code>sun</code>，让<code>sun</code>作为master管理集群的同时也作为slave执行任务。但这样会让master的负载过高，一般不建议这样做。</p><h3 id="打包hadoop并发送到集群其他机器"><a href="#打包hadoop并发送到集群其他机器" class="headerlink" title="打包hadoop并发送到集群其他机器"></a>打包hadoop并发送到集群其他机器</h3><p>在master(即主机sun)上完成hadoop的安装后，压缩打包配置好的hadoop安装文件，然后通过scp发送至机器其他机器，在这些机器上把压缩包解压到<code>/opt</code>目录下，然后按照前面的做法添加hadoop环境变量，完成在所有机器上的hadoop的部署。</p><p>压缩:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /opt</span><br><span class="line">$ tar -czvf hadoop.tar.gz /opt/hadoop/</span><br></pre></td></tr></table></figure><p>将压缩包发送到集群其他主机:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ scp hadoop.tar.gz cheung@mercury:/opt</span><br><span class="line">$ scp hadoop.tar.gz cheung@venus:/opt</span><br><span class="line">$ scp hadoop.tar.gz cheung@earth:/opt</span><br></pre></td></tr></table></figure><p>然后在这些主机上解压这个压缩包到<code>/opt</code>目录下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf /opt/hadoop.tar.gz -C /opt</span><br></pre></td></tr></table></figure><h3 id="最后的检查"><a href="#最后的检查" class="headerlink" title="最后的检查"></a>最后的检查</h3><ol><li>ssh是否按照上面的说明在每台主机上验证过了</li><li>如果按照上面<code>hdfs-site.xml</code>的设定的话，先确认每台主机都新建了<code>/data</code>目录并更改owner为集群的统一用户(cheung)</li><li>确认每台主机上的hadoop压缩包都已经解压到指定的位置，可通过<code>ls /opt</code>查看</li><li>在每台主机上确认Hadoop的环境变量设置正常，在集群的每台机器上执行:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ java -version</span><br><span class="line">$ hadoop version</span><br></pre></td></tr></table></figure><p>输出如下图：</p><center>![hadoop安装检查](/images/install-apache-hadoop-on-multi-node-cluster/check-java-and-hadoop-environment.png)</center><h3 id="格式化HDFS"><a href="#格式化HDFS" class="headerlink" title="格式化HDFS"></a>格式化HDFS</h3><p>格式化Hadoop文件系统。在集群master主机<code>sun</code>上执行格式化命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hdfs namenode -format</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">cheung@sun:~$ hdfs namenode -format</span><br><span class="line">18/07/27 18:07:59 INFO namenode.NameNode: STARTUP_MSG: </span><br><span class="line">/************************************************************</span><br><span class="line">STARTUP_MSG: Starting NameNode</span><br><span class="line">STARTUP_MSG:   host = sun/192.168.118.101</span><br><span class="line">STARTUP_MSG:   args = [-format]</span><br><span class="line">STARTUP_MSG:   version = 2.7.6</span><br><span class="line">STARTUP_MSG:   classpath = /opt/hadoop/etc/hadoop:/opt/hadoop/share/hadoop/common/lib/mockito-all-1.8.5.jar:/opt/hadoop/share/hadoop/common/lib/snappy-java-1.0.4.1.jar:/opt/hadoop/share/hadoop/common/lib/xz-1.0.jar:/opt/hadoop/share/hadoop/common/lib/jetty-6.1.26.jar:/opt/hadoop/share/hadoop/common/lib/apacheds-i18n-2.0.0-M15.jar:/opt/hadoop/share/hadoop/common/lib/jettison-1.1.jar:/opt/hadoop/share/hadoop/common/lib/api-asn1-api-1.0.0-M20.jar:/opt/hadoop/share/hadoop/common/lib/jetty-util-6.1.26.jar:/opt/hadoop/share/hadoop/common/lib/commons-math3-3.1.1.jar:/opt/hadoop/share/hadoop/common/lib/java-xmlbuilder-0.4.jar:/opt/hadoop/share/hadoop/common/lib/junit-4.11.jar:/opt/hadoop/share/hadoop/common/lib/paranamer-2.3.jar:/opt/hadoop/share/hadoop/common/lib/httpcore-4.2.5.jar:/opt/hadoop/share/hadoop/common/lib/hadoop-annotations-2.7.6.jar:/opt/hadoop/share/hadoop/common/lib/jsch-0.1.54.jar:/opt/hadoop/share/hadoop/common/lib/activation-1.1.jar:/opt/hadoop/share/hadoop/common/lib/jaxb-api-2.2.2.jar:/opt/hadoop/share/hadoop/common/lib/commons-lang-2.6.jar:/opt/hadoop/share/hadoop/common/lib/jackson-xc-1.9.13.jar:/opt/hadoop/share/hadoop/common/lib/servlet-api-2.5.jar:/opt/hadoop/share/hadoop/common/lib/jsr305-3.0.0.jar:/opt/hadoop/share/hadoop/common/lib/jetty-sslengine-6.1.26.jar:/opt/hadoop/share/hadoop/common/lib/commons-beanutils-core-1.8.0.jar:/opt/hadoop/share/hadoop/common/lib/apacheds-kerberos-codec-2.0.0-M15.jar:/opt/hadoop/share/hadoop/common/lib/commons-beanutils-1.7.0.jar:/opt/hadoop/share/hadoop/common/lib/commons-net-3.1.jar:/opt/hadoop/share/hadoop/common/lib/gson-2.2.4.jar:/opt/hadoop/share/hadoop/common/lib/asm-3.2.jar:/opt/hadoop/share/hadoop/common/lib/jaxb-impl-2.2.3-1.jar:/opt/hadoop/share/hadoop/common/lib/curator-recipes-2.7.1.jar:/opt/hadoop/share/hadoop/common/lib/jackson-jaxrs-1.9.13.jar:/opt/hadoop/share/hadoop/common/lib/jersey-server-1.9.jar:/opt/hadoop/share/hadoop/common/lib/commons-configuration-1.6.jar:/opt/hadoop/share/hadoop/common/lib/zookeeper-3.4.6.jar:/opt/hadoop/share/hadoop/common/lib/slf4j-api-1.7.10.jar:/opt/hadoop/share/hadoop/common/lib/commons-collections-3.2.2.jar:/opt/hadoop/share/hadoop/common/lib/jackson-mapper-asl-1.9.13.jar:/opt/hadoop/share/hadoop/common/lib/stax-api-1.0-2.jar:/opt/hadoop/share/hadoop/common/lib/xmlenc-0.52.jar:/opt/hadoop/share/hadoop/common/lib/commons-codec-1.4.jar:/opt/hadoop/share/hadoop/common/lib/commons-io-2.4.jar:/opt/hadoop/share/hadoop/common/lib/curator-client-2.7.1.jar:/opt/hadoop/share/hadoop/common/lib/commons-cli-1.2.jar:/opt/hadoop/share/hadoop/common/lib/slf4j-log4j12-1.7.10.jar:/opt/hadoop/share/hadoop/common/lib/jets3t-0.9.0.jar:/opt/hadoop/share/hadoop/common/lib/jersey-core-1.9.jar:/opt/hadoop/share/hadoop/common/lib/jackson-core-asl-1.9.13.jar:/opt/hadoop/share/hadoop/common/lib/hadoop-auth-2.7.6.jar:/opt/hadoop/share/hadoop/common/lib/htrace-core-3.1.0-incubating.jar:/opt/hadoop/share/hadoop/common/lib/protobuf-java-2.5.0.jar:/opt/hadoop/share/hadoop/common/lib/hamcrest-core-1.3.jar:/opt/hadoop/share/hadoop/common/lib/netty-3.6.2.Final.jar:/opt/hadoop/share/hadoop/common/lib/httpclient-4.2.5.jar:/opt/hadoop/share/hadoop/common/lib/jersey-json-1.9.jar:/opt/hadoop/share/hadoop/common/lib/commons-httpclient-3.1.jar:/opt/hadoop/share/hadoop/common/lib/api-util-1.0.0-M20.jar:/opt/hadoop/share/hadoop/common/lib/guava-11.0.2.jar:/opt/hadoop/share/hadoop/common/lib/avro-1.7.4.jar:/opt/hadoop/share/hadoop/common/lib/commons-digester-1.8.jar:/opt/hadoop/share/hadoop/common/lib/curator-framework-2.7.1.jar:/opt/hadoop/share/hadoop/common/lib/log4j-1.2.17.jar:/opt/hadoop/share/hadoop/common/lib/commons-logging-1.1.3.jar:/opt/hadoop/share/hadoop/common/lib/jsp-api-2.1.jar:/opt/hadoop/share/hadoop/common/lib/commons-compress-1.4.1.jar:/opt/hadoop/share/hadoop/common/hadoop-common-2.7.6-tests.jar:/opt/hadoop/share/hadoop/common/hadoop-nfs-2.7.6.jar:/opt/hadoop/share/hadoop/common/hadoop-common-2.7.6.jar:/opt/hadoop/share/hadoop/hdfs:/opt/hadoop/share/hadoop/hdfs/lib/jetty-6.1.26.jar:/opt/hadoop/share/hadoop/hdfs/lib/jetty-util-6.1.26.jar:/opt/hadoop/share/hadoop/hdfs/lib/commons-lang-2.6.jar:/opt/hadoop/share/hadoop/hdfs/lib/servlet-api-2.5.jar:/opt/hadoop/share/hadoop/hdfs/lib/jsr305-3.0.0.jar:/opt/hadoop/share/hadoop/hdfs/lib/asm-3.2.jar:/opt/hadoop/share/hadoop/hdfs/lib/netty-all-4.0.23.Final.jar:/opt/hadoop/share/hadoop/hdfs/lib/jersey-server-1.9.jar:/opt/hadoop/share/hadoop/hdfs/lib/jackson-mapper-asl-1.9.13.jar:/opt/hadoop/share/hadoop/hdfs/lib/xmlenc-0.52.jar:/opt/hadoop/share/hadoop/hdfs/lib/commons-codec-1.4.jar:/opt/hadoop/share/hadoop/hdfs/lib/commons-io-2.4.jar:/opt/hadoop/share/hadoop/hdfs/lib/commons-cli-1.2.jar:/opt/hadoop/share/hadoop/hdfs/lib/leveldbjni-all-1.8.jar:/opt/hadoop/share/hadoop/hdfs/lib/jersey-core-1.9.jar:/opt/hadoop/share/hadoop/hdfs/lib/xercesImpl-2.9.1.jar:/opt/hadoop/share/hadoop/hdfs/lib/jackson-core-asl-1.9.13.jar:/opt/hadoop/share/hadoop/hdfs/lib/htrace-core-3.1.0-incubating.jar:/opt/hadoop/share/hadoop/hdfs/lib/protobuf-java-2.5.0.jar:/opt/hadoop/share/hadoop/hdfs/lib/netty-3.6.2.Final.jar:/opt/hadoop/share/hadoop/hdfs/lib/guava-11.0.2.jar:/opt/hadoop/share/hadoop/hdfs/lib/xml-apis-1.3.04.jar:/opt/hadoop/share/hadoop/hdfs/lib/log4j-1.2.17.jar:/opt/hadoop/share/hadoop/hdfs/lib/commons-logging-1.1.3.jar:/opt/hadoop/share/hadoop/hdfs/lib/commons-daemon-1.0.13.jar:/opt/hadoop/share/hadoop/hdfs/hadoop-hdfs-nfs-2.7.6.jar:/opt/hadoop/share/hadoop/hdfs/hadoop-hdfs-2.7.6-tests.jar:/opt/hadoop/share/hadoop/hdfs/hadoop-hdfs-2.7.6.jar:/opt/hadoop/share/hadoop/yarn/lib/xz-1.0.jar:/opt/hadoop/share/hadoop/yarn/lib/jetty-6.1.26.jar:/opt/hadoop/share/hadoop/yarn/lib/jettison-1.1.jar:/opt/hadoop/share/hadoop/yarn/lib/jetty-util-6.1.26.jar:/opt/hadoop/share/hadoop/yarn/lib/activation-1.1.jar:/opt/hadoop/share/hadoop/yarn/lib/jaxb-api-2.2.2.jar:/opt/hadoop/share/hadoop/yarn/lib/commons-lang-2.6.jar:/opt/hadoop/share/hadoop/yarn/lib/jackson-xc-1.9.13.jar:/opt/hadoop/share/hadoop/yarn/lib/servlet-api-2.5.jar:/opt/hadoop/share/hadoop/yarn/lib/javax.inject-1.jar:/opt/hadoop/share/hadoop/yarn/lib/jsr305-3.0.0.jar:/opt/hadoop/share/hadoop/yarn/lib/asm-3.2.jar:/opt/hadoop/share/hadoop/yarn/lib/jaxb-impl-2.2.3-1.jar:/opt/hadoop/share/hadoop/yarn/lib/guice-servlet-3.0.jar:/opt/hadoop/share/hadoop/yarn/lib/zookeeper-3.4.6-tests.jar:/opt/hadoop/share/hadoop/yarn/lib/jackson-jaxrs-1.9.13.jar:/opt/hadoop/share/hadoop/yarn/lib/jersey-server-1.9.jar:/opt/hadoop/share/hadoop/yarn/lib/zookeeper-3.4.6.jar:/opt/hadoop/share/hadoop/yarn/lib/aopalliance-1.0.jar:/opt/hadoop/share/hadoop/yarn/lib/commons-collections-3.2.2.jar:/opt/hadoop/share/hadoop/yarn/lib/jackson-mapper-asl-1.9.13.jar:/opt/hadoop/share/hadoop/yarn/lib/stax-api-1.0-2.jar:/opt/hadoop/share/hadoop/yarn/lib/commons-codec-1.4.jar:/opt/hadoop/share/hadoop/yarn/lib/jersey-client-1.9.jar:/opt/hadoop/share/hadoop/yarn/lib/commons-io-2.4.jar:/opt/hadoop/share/hadoop/yarn/lib/commons-cli-1.2.jar:/opt/hadoop/share/hadoop/yarn/lib/guice-3.0.jar:/opt/hadoop/share/hadoop/yarn/lib/leveldbjni-all-1.8.jar:/opt/hadoop/share/hadoop/yarn/lib/jersey-core-1.9.jar:/opt/hadoop/share/hadoop/yarn/lib/jackson-core-asl-1.9.13.jar:/opt/hadoop/share/hadoop/yarn/lib/jersey-guice-1.9.jar:/opt/hadoop/share/hadoop/yarn/lib/protobuf-java-2.5.0.jar:/opt/hadoop/share/hadoop/yarn/lib/netty-3.6.2.Final.jar:/opt/hadoop/share/hadoop/yarn/lib/jersey-json-1.9.jar:/opt/hadoop/share/hadoop/yarn/lib/guava-11.0.2.jar:/opt/hadoop/share/hadoop/yarn/lib/log4j-1.2.17.jar:/opt/hadoop/share/hadoop/yarn/lib/commons-logging-1.1.3.jar:/opt/hadoop/share/hadoop/yarn/lib/commons-compress-1.4.1.jar:/opt/hadoop/share/hadoop/yarn/hadoop-yarn-registry-2.7.6.jar:/opt/hadoop/share/hadoop/yarn/hadoop-yarn-applications-distributedshell-2.7.6.jar:/opt/hadoop/share/hadoop/yarn/hadoop-yarn-common-2.7.6.jar:/opt/hadoop/share/hadoop/yarn/hadoop-yarn-client-2.7.6.jar:/opt/hadoop/share/hadoop/yarn/hadoop-yarn-api-2.7.6.jar:/opt/hadoop/share/hadoop/yarn/hadoop-yarn-server-common-2.7.6.jar:/opt/hadoop/share/hadoop/yarn/hadoop-yarn-server-applicationhistoryservice-2.7.6.jar:/opt/hadoop/share/hadoop/yarn/hadoop-yarn-applications-unmanaged-am-launcher-2.7.6.jar:/opt/hadoop/share/hadoop/yarn/hadoop-yarn-server-web-proxy-2.7.6.jar:/opt/hadoop/share/hadoop/yarn/hadoop-yarn-server-tests-2.7.6.jar:/opt/hadoop/share/hadoop/yarn/hadoop-yarn-server-sharedcachemanager-2.7.6.jar:/opt/hadoop/share/hadoop/yarn/hadoop-yarn-server-resourcemanager-2.7.6.jar:/opt/hadoop/share/hadoop/yarn/hadoop-yarn-server-nodemanager-2.7.6.jar:/opt/hadoop/share/hadoop/mapreduce/lib/snappy-java-1.0.4.1.jar:/opt/hadoop/share/hadoop/mapreduce/lib/xz-1.0.jar:/opt/hadoop/share/hadoop/mapreduce/lib/junit-4.11.jar:/opt/hadoop/share/hadoop/mapreduce/lib/paranamer-2.3.jar:/opt/hadoop/share/hadoop/mapreduce/lib/hadoop-annotations-2.7.6.jar:/opt/hadoop/share/hadoop/mapreduce/lib/javax.inject-1.jar:/opt/hadoop/share/hadoop/mapreduce/lib/asm-3.2.jar:/opt/hadoop/share/hadoop/mapreduce/lib/guice-servlet-3.0.jar:/opt/hadoop/share/hadoop/mapreduce/lib/jersey-server-1.9.jar:/opt/hadoop/share/hadoop/mapreduce/lib/aopalliance-1.0.jar:/opt/hadoop/share/hadoop/mapreduce/lib/jackson-mapper-asl-1.9.13.jar:/opt/hadoop/share/hadoop/mapreduce/lib/commons-io-2.4.jar:/opt/hadoop/share/hadoop/mapreduce/lib/guice-3.0.jar:/opt/hadoop/share/hadoop/mapreduce/lib/leveldbjni-all-1.8.jar:/opt/hadoop/share/hadoop/mapreduce/lib/jersey-core-1.9.jar:/opt/hadoop/share/hadoop/mapreduce/lib/jackson-core-asl-1.9.13.jar:/opt/hadoop/share/hadoop/mapreduce/lib/jersey-guice-1.9.jar:/opt/hadoop/share/hadoop/mapreduce/lib/protobuf-java-2.5.0.jar:/opt/hadoop/share/hadoop/mapreduce/lib/hamcrest-core-1.3.jar:/opt/hadoop/share/hadoop/mapreduce/lib/netty-3.6.2.Final.jar:/opt/hadoop/share/hadoop/mapreduce/lib/avro-1.7.4.jar:/opt/hadoop/share/hadoop/mapreduce/lib/log4j-1.2.17.jar:/opt/hadoop/share/hadoop/mapreduce/lib/commons-compress-1.4.1.jar:/opt/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-app-2.7.6.jar:/opt/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-shuffle-2.7.6.jar:/opt/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-common-2.7.6.jar:/opt/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-hs-2.7.6.jar:/opt/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-jobclient-2.7.6.jar:/opt/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-jobclient-2.7.6-tests.jar:/opt/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-hs-plugins-2.7.6.jar:/opt/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.6.jar:/opt/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-core-2.7.6.jar:/opt/hadoop/contrib/capacity-scheduler/*.jar</span><br><span class="line">STARTUP_MSG:   build = https://shv@git-wip-us.apache.org/repos/asf/hadoop.git -r 085099c66cf28be31604560c376fa282e69282b8; compiled by &apos;kshvachk&apos; on 2018-04-18T01:33Z</span><br><span class="line">STARTUP_MSG:   java = 1.8.0_152</span><br><span class="line">************************************************************/</span><br><span class="line">18/07/27 18:07:59 INFO namenode.NameNode: registered UNIX signal handlers for [TERM, HUP, INT]</span><br><span class="line">18/07/27 18:07:59 INFO namenode.NameNode: createNameNode [-format]</span><br><span class="line">Formatting using clusterid: CID-602d7447-71b0-4809-b633-f29c2652a28a</span><br><span class="line">18/07/27 18:08:00 INFO namenode.FSNamesystem: No KeyProvider found.</span><br><span class="line">18/07/27 18:08:00 INFO namenode.FSNamesystem: fsLock is fair: true</span><br><span class="line">18/07/27 18:08:00 INFO namenode.FSNamesystem: Detailed lock hold time metrics enabled: false</span><br><span class="line">18/07/27 18:08:00 INFO blockmanagement.DatanodeManager: dfs.block.invalidate.limit=1000</span><br><span class="line">18/07/27 18:08:00 INFO blockmanagement.DatanodeManager: dfs.namenode.datanode.registration.ip-hostname-check=true</span><br><span class="line">18/07/27 18:08:00 INFO blockmanagement.BlockManager: dfs.namenode.startup.delay.block.deletion.sec is set to 000:00:00:00.000</span><br><span class="line">18/07/27 18:08:00 INFO blockmanagement.BlockManager: The block deletion will start around 2018 Jul 27 18:08:00</span><br><span class="line">18/07/27 18:08:00 INFO util.GSet: Computing capacity for map BlocksMap</span><br><span class="line">18/07/27 18:08:00 INFO util.GSet: VM type       = 64-bit</span><br><span class="line">18/07/27 18:08:00 INFO util.GSet: 2.0% max memory 889 MB = 17.8 MB</span><br><span class="line">18/07/27 18:08:00 INFO util.GSet: capacity      = 2^21 = 2097152 entries</span><br><span class="line">18/07/27 18:08:00 INFO blockmanagement.BlockManager: dfs.block.access.token.enable=false</span><br><span class="line">18/07/27 18:08:00 INFO blockmanagement.BlockManager: defaultReplication         = 2</span><br><span class="line">18/07/27 18:08:00 INFO blockmanagement.BlockManager: maxReplication             = 512</span><br><span class="line">18/07/27 18:08:00 INFO blockmanagement.BlockManager: minReplication             = 1</span><br><span class="line">18/07/27 18:08:00 INFO blockmanagement.BlockManager: maxReplicationStreams      = 2</span><br><span class="line">18/07/27 18:08:00 INFO blockmanagement.BlockManager: replicationRecheckInterval = 3000</span><br><span class="line">18/07/27 18:08:00 INFO blockmanagement.BlockManager: encryptDataTransfer        = false</span><br><span class="line">18/07/27 18:08:00 INFO blockmanagement.BlockManager: maxNumBlocksToLog          = 1000</span><br><span class="line">18/07/27 18:08:00 INFO namenode.FSNamesystem: fsOwner             = cheung (auth:SIMPLE)</span><br><span class="line">18/07/27 18:08:00 INFO namenode.FSNamesystem: supergroup          = supergroup</span><br><span class="line">18/07/27 18:08:00 INFO namenode.FSNamesystem: isPermissionEnabled = true</span><br><span class="line">18/07/27 18:08:00 INFO namenode.FSNamesystem: HA Enabled: false</span><br><span class="line">18/07/27 18:08:00 INFO namenode.FSNamesystem: Append Enabled: true</span><br><span class="line">18/07/27 18:08:00 INFO util.GSet: Computing capacity for map INodeMap</span><br><span class="line">18/07/27 18:08:00 INFO util.GSet: VM type       = 64-bit</span><br><span class="line">18/07/27 18:08:00 INFO util.GSet: 1.0% max memory 889 MB = 8.9 MB</span><br><span class="line">18/07/27 18:08:00 INFO util.GSet: capacity      = 2^20 = 1048576 entries</span><br><span class="line">18/07/27 18:08:00 INFO namenode.FSDirectory: ACLs enabled? false</span><br><span class="line">18/07/27 18:08:00 INFO namenode.FSDirectory: XAttrs enabled? true</span><br><span class="line">18/07/27 18:08:00 INFO namenode.FSDirectory: Maximum size of an xattr: 16384</span><br><span class="line">18/07/27 18:08:00 INFO namenode.NameNode: Caching file names occuring more than 10 times</span><br><span class="line">18/07/27 18:08:00 INFO util.GSet: Computing capacity for map cachedBlocks</span><br><span class="line">18/07/27 18:08:00 INFO util.GSet: VM type       = 64-bit</span><br><span class="line">18/07/27 18:08:00 INFO util.GSet: 0.25% max memory 889 MB = 2.2 MB</span><br><span class="line">18/07/27 18:08:00 INFO util.GSet: capacity      = 2^18 = 262144 entries</span><br><span class="line">18/07/27 18:08:00 INFO namenode.FSNamesystem: dfs.namenode.safemode.threshold-pct = 0.9990000128746033</span><br><span class="line">18/07/27 18:08:00 INFO namenode.FSNamesystem: dfs.namenode.safemode.min.datanodes = 0</span><br><span class="line">18/07/27 18:08:00 INFO namenode.FSNamesystem: dfs.namenode.safemode.extension     = 30000</span><br><span class="line">18/07/27 18:08:00 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.window.num.buckets = 10</span><br><span class="line">18/07/27 18:08:00 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.num.users = 10</span><br><span class="line">18/07/27 18:08:00 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.windows.minutes = 1,5,25</span><br><span class="line">18/07/27 18:08:00 INFO namenode.FSNamesystem: Retry cache on namenode is enabled</span><br><span class="line">18/07/27 18:08:00 INFO namenode.FSNamesystem: Retry cache will use 0.03 of total heap and retry cache entry expiry time is 600000 millis</span><br><span class="line">18/07/27 18:08:00 INFO util.GSet: Computing capacity for map NameNodeRetryCache</span><br><span class="line">18/07/27 18:08:00 INFO util.GSet: VM type       = 64-bit</span><br><span class="line">18/07/27 18:08:00 INFO util.GSet: 0.029999999329447746% max memory 889 MB = 273.1 KB</span><br><span class="line">18/07/27 18:08:00 INFO util.GSet: capacity      = 2^15 = 32768 entries</span><br><span class="line">18/07/27 18:08:00 INFO namenode.FSImage: Allocated new BlockPoolId: BP-1090642709-192.168.118.101-1532686080732</span><br><span class="line">18/07/27 18:08:00 INFO common.Storage: Storage directory /data/hadoop/nameNode has been successfully formatted.</span><br><span class="line">18/07/27 18:08:00 INFO namenode.FSImageFormatProtobuf: Saving image file /data/hadoop/nameNode/current/fsimage.ckpt_0000000000000000000 using no compression</span><br><span class="line">18/07/27 18:08:00 INFO namenode.FSImageFormatProtobuf: Image file /data/hadoop/nameNode/current/fsimage.ckpt_0000000000000000000 of size 323 bytes saved in 0 seconds.</span><br><span class="line">18/07/27 18:08:00 INFO namenode.NNStorageRetentionManager: Going to retain 1 images with txid &gt;= 0</span><br><span class="line">18/07/27 18:08:00 INFO util.ExitUtil: Exiting with status 0</span><br><span class="line">18/07/27 18:08:00 INFO namenode.NameNode: SHUTDOWN_MSG: </span><br><span class="line">/************************************************************</span><br><span class="line">SHUTDOWN_MSG: Shutting down NameNode at sun/192.168.118.101</span><br><span class="line">************************************************************/</span><br><span class="line">cheung@sun:~$</span><br></pre></td></tr></table></figure><p>HDFS格式化完成，查看<code>/data</code>目录，可以看到hadoop创建的目录和文件。</p><h3 id="启动HDFS"><a href="#启动HDFS" class="headerlink" title="启动HDFS"></a>启动HDFS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cheung@sun:~$ start-dfs.sh</span><br></pre></td></tr></table></figure><p>命令行输出如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Starting namenodes on [sun]</span><br><span class="line">sun: starting namenode, logging to /opt/hadoop/logs/hadoop-cheung-namenode-sun.out</span><br><span class="line">venus: starting datanode, logging to /opt/hadoop/logs/hadoop-cheung-datanode-venus.out</span><br><span class="line">mercury: starting datanode, logging to /opt/hadoop/logs/hadoop-cheung-datanode-mercury.out</span><br><span class="line">earth: starting datanode, logging to /opt/hadoop/logs/hadoop-cheung-datanode-earth.out</span><br><span class="line">Starting secondary namenodes [0.0.0.0]</span><br><span class="line">0.0.0.0: starting secondarynamenode, logging to /opt/hadoop/logs/hadoop-cheung-secondarynamenode-sun.out</span><br></pre></td></tr></table></figure><p>在sun(hadoop集群master)上使用java的<code>jps</code>命令查看jvm进程(输出内容前面的数字是进程号)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cheung@sun:~$ jps</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1942 NameNode</span><br><span class="line">2151 SecondaryNameNode</span><br><span class="line">2411 Jps</span><br></pre></td></tr></table></figure><p>在各个slave(mercury/venus/earth)节点上执行<code>jps</code>可看到以下类似输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1970 Jps</span><br><span class="line">1812 DataNode</span><br></pre></td></tr></table></figure><h3 id="启动YARN"><a href="#启动YARN" class="headerlink" title="启动YARN"></a>启动YARN</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cheung@sun:~$ start-yarn.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">starting yarn daemons</span><br><span class="line">starting resourcemanager, logging to /opt/hadoop/logs/yarn-cheung-resourcemanager-sun.out</span><br><span class="line">mercury: starting nodemanager, logging to /opt/hadoop/logs/yarn-cheung-nodemanager-mercury.out</span><br><span class="line">earth: starting nodemanager, logging to /opt/hadoop/logs/yarn-cheung-nodemanager-earth.out</span><br><span class="line">venus: starting nodemanager, logging to /opt/hadoop/logs/yarn-cheung-nodemanager-venus.out</span><br></pre></td></tr></table></figure><p>再次在sun(hadoop集群master)上使用java的<code>jps</code>命令查看jvm进程，可看到多了<code>ResourceManager</code>进程，如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cheung@sun:~$ jps</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2752 Jps</span><br><span class="line">1942 NameNode</span><br><span class="line">2151 SecondaryNameNode</span><br><span class="line">2489 ResourceManager</span><br></pre></td></tr></table></figure><p>在各个slave(mercury/venus/earth)节点上执行<code>jps</code>可看到以下类似输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2035 NodeManager</span><br><span class="line">1812 DataNode</span><br><span class="line">2136 Jps</span><br></pre></td></tr></table></figure><h3 id="停止HDFS与YARN"><a href="#停止HDFS与YARN" class="headerlink" title="停止HDFS与YARN"></a>停止HDFS与YARN</h3><p>在sun(hadoop集群master)上执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ stop-dfs.sh</span><br><span class="line">$ stop-yarn.sh</span><br></pre></td></tr></table></figure><p>至此，Hadoop集群搭建完毕。</p><p>参考文献：<br>[1] <a href="https://www.linode.com/docs/databases/hadoop/how-to-install-and-set-up-hadoop-cluster/" target="_blank" rel="noopener">https://www.linode.com/docs/databases/hadoop/how-to-install-and-set-up-hadoop-cluster/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hadoop支持以下三种部署模式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Local (Standalone) Mode: 本地模式&lt;br&gt;Pseudo-Distributed Mode: 伪分布模式&lt;br&gt;Fully-Distributed Mode: 完全分布模式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前两种模式只适合用作Hadoop相关实验和测试，也难以从中体会Hadoop的框架和理念，Hadoop官网有简单的部署教程，传送门 &lt;a href=&quot;http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/SingleCluster.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hadoop: Setting up a Single Node Cluster&lt;/a&gt;。 本文讨论Hadoop完全分布模式集群的搭建。&lt;/p&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="https://cheung.site/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="https://cheung.site/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>正则化</title>
    <link href="https://cheung.site/2018/06/19/regularization/"/>
    <id>https://cheung.site/2018/06/19/regularization/</id>
    <published>2018-06-19T06:25:04.000Z</published>
    <updated>2019-05-13T11:59:26.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>$$E(w)=\frac{1}{N}\sum_{n=1}^{N} {y(x_n, w)-t_n}^2 + \lambda {\lVert w \rVert}^2$$</p><p>关于机器学习的书很多都会讲到结构风险最小化，它是为了防止过拟合而提出来的策略。很多的讲解都以上面的公式作为例子，公式第一项是经验风险，第二项是表示模型复杂度的正则化项(或者说是对复杂模型的惩罚项)。</p><a id="more"></a><p>经验风险表示模型表达数据的误差(上面的公式使用均方误差)；而正则化项的加入是为了惩罚过于复杂的模型。对于这一点，早就深深刻入脑子里了，后来细看PRML，才发现以前太过于囫囵吞枣。一个需要理解的关键问题是，上面公式的正则化项中${\lVert w \rVert}^2$(即$L_2范数$)为什么可以表示模型复杂度，从而使正则化具有惩罚复杂模型的作用呢？<br>这是一篇PRML读书笔记，着重于对知识的整理，下面的图都标注了来源(主要来自PRML一书)。</p><h3 id="多项式曲线拟合"><a href="#多项式曲线拟合" class="headerlink" title="多项式曲线拟合"></a>多项式曲线拟合</h3><p>下面通过PRML中多项式曲线拟合的例子来理解这一问题。首先，如图1所示，通过对函数$t=\sin(2 \pi x)$加入随机噪声来生成若干训练样本。图1中的蓝色小圈表示训练样本，绿色曲线是用于生成数据的函数$t=\sin(2 \pi x)$</p><center>![训练样本与需要拟合的曲线](/images/regularization/plot-of-training-data-set.png)</center><center>图1(PRML Figure 1.2)：加入噪声的10个数据点</center><p>我们使用下面的多项式函数来做拟合</p><p>$$y(x,w)=w_0+w_{1}x+w_{2}x^2+\dots+w_{M}x^M=\sum_{j=0}^{M}{w_{j}x^j}$$</p><p>其中M是多项式最高次项的次数(order)。<br>我们也可以把$w_0,\dots,w_M$合起来表示为$w$，这些参数($w$)可以通过最小化误差函数来决定，一个常用的误差函数是样本的均方误差之和，即下式</p><p>$$E(w)=\sum_{n=1}^{N} {y(x_n,w)-t_n}^2$$</p><p>最小化上式就是常见的最小二乘法，对于给定的M(多项式的order)可以通过对各个参数求导来求解，这里就不继续展开了。现在问题来了，M的值取多少好呢？若取$M=0$，$y(x,w)=w_0$就是一条与$x$轴平行的直线；若取$M=1$，$y(x,w)=w_0+w_{1}x$就是一条斜率为$w_{1}$的直线；若取$M=1$就是一条二次曲线等~我们用不同的$M$值(不同的多项式模型)做实验，得到下面的结果</p><center>![不同次数的多项式拟合的结果](/images/regularization/plots-of-polynomials-having-various-orders.png)</center><center>图2(PRML Figure 1.4)：不同次数的多项式拟合的结果</center><p>从上图可以看到，取多项式次数$M&lt;2$时，拟合效果相当差；而取$M=9$时，10个训练样本点全都落在了曲线上(完美拟合了训练样本)。嗯，知道真相的我们肯定不会认为$M=9$这个看着完美的结果是最好的。为了验证这些结果是否理想，我们用同样的方法生成了一些测试样本，测试的均方误差(对方差取平均)结果如下</p><center>![不同模型的均方误差](/images/regularization/root-mean-square-error-for-polynomials-of-various-orders.png)</center><center>图3(PRML Figure 1.5)：不同模型的均方误差</center><p>由图3可以看到，当$M=0,1,2$，参数也分别只有$1,2,3$个，代表简单的模型，这几个模型对训练样本和测试样本的拟合效果都不好(误差大)，当$M$取值越大，参数越多，模型越来越复杂，模型对训练样本的拟合效果越来越好(蓝色线)，足够复杂的模型可以完全拟合训练样本($M \geq 9$)；另一方面，选择越来越复杂的模型，测试误差经历了先下降再升高的过程，当$3 \leq M \leq 8$时，模型的测试结果比较好；当模型复杂度很高时($M \geq 9$)，测试误差剧增，表明该模型对未知(unseen)样本的拟合非常差。</p><h3 id="正则化的作用"><a href="#正则化的作用" class="headerlink" title="正则化的作用"></a>正则化的作用</h3><p>誒，从上面的训练和测试结果来看，我们直接把不同的$M$值都尝试一遍，然后选择测试误差最小的模型不就OK了么，这样得到的模型泛化能力并不差(在测试样本上体现)，哪需要多整一个正则化项？<br>先看看上面的实验表现出来的看似矛盾的地方：低次多项式实际上是更高次多项式的子集(令多出的高次项的系数为0可得)，也就是说$M=9$的多项式可以实现的拟合结果至少不会比$M=3$的多项式差；另一方面，学过微积分的同学大概记得我们生成数据的函数$\sin(2\pi x)$的泰勒展开式包含所有次项，我们的测试结果理应随着$M$值增大而不断改善。<br>带着疑惑，我们看看当多项式最高次数$M$变化时，通过最小化均方误差得到的模型的各个参数的值</p><center>![不同多项式模型的参数值](/images/regularization/table-of-coefficients-for-polynomials-of-various-order.png)</center><center>图4(PRML Table 1.1)：不同多项式模型的参数值</center><p>通过上图可以看到，采用更大的$M$值，多项式的系数的值(绝对值)变得越来越大。当$M=9$时，参数值变得异常大，曲线完全拟合了测试样本，但却偏离实际的$\sin(2\pi x)$甚远，得到的结果的系数与$\sin(2\pi x)$的泰勒展开式的系数差异巨大。<br>单纯地采取使均方误差(MSE)最小化的策略，会使得模型不断地去适应训练样本，当模型越来越复杂，就像贪食蛇游戏一样，曲线剧烈抖动力求经过每一个训练样本点，导致模型的参数(magnitude)非常大。也就是说，复杂的模型过度拟合训练样本会使得参数值很大。要限制模型这种过度适应训练样本的行为，于是引入了正则化，通过惩罚模型过大的参数值来防止模型对训练样本的过拟合。也就是开篇的公式</p><p>$$E(w)=\frac{1}{N}\sum_{n=1}^{N} {y(x_n, w)-t_n}^2 + \lambda {\lVert w \rVert}^2$$</p><p>通过正则化，$M\geq 9$的多项式模型可以获得更好的结果，这样一来，“低次多项式模型拟合效果比高次多项式更好”的矛盾就解决了。由于高次多项式是包含低次多项式的，这样的模型的表达能力更强，而正则化正好可以实现这种模型复杂度的缩放变化，复杂模型中提高罚项(penalty term)的权重可以让一些参数变为零(或接近零)，降低模型的实际复杂度，从而可以退化为更简单的模型。<br>上面提到一个问题，我们直接把不同的$M$值都尝试一遍，然后选择测试误差最小的模型不就OK了么，这样得到的模型泛化能力并不差(但并非让人满意)，哪需要多整一个正则化项？这样做不好的原因是，通过经验风险最小化获得的模型，模型复杂度高时(模型参数多)，由于高度拟合训练样本，测试结果往往很差，就如图2所示。结果就是，这样的策略倾向于选择参数数量少($M$值小)的模型，以至于得到的过于简单的模型根本无法还原真实数据的原貌[缺点与Akaike information criterion(AIC)惊人地相似)]。而采取正则化的结构风险最小化方法避免了这些问题。</p><h3 id="增加样本数量可以缓解过拟合问题"><a href="#增加样本数量可以缓解过拟合问题" class="headerlink" title="增加样本数量可以缓解过拟合问题"></a>增加样本数量可以缓解过拟合问题</h3><p>如果真要不加正则化项的话(直接采用经验风险最小化策略，使均方误差MSE最小)，同等模型复杂度下，增加训练样本数量可以缓解过拟合的问题。</p><center>![不同训练样本数量下的结果比较](/images/regularization/solutions-comparison-using-different-size-of-data-points.png)</center><center>图4(PRML Figure 1.6)：$M=9$的多项式在不同训练样本数量下的结果比较</center><h3 id="正则化与奥卡姆剃刀原则"><a href="#正则化与奥卡姆剃刀原则" class="headerlink" title="正则化与奥卡姆剃刀原则"></a>正则化与奥卡姆剃刀原则</h3><p>正则化是符合奥卡姆剃刀原则的，在可选的模型中，我们选择简单易解释的模型。模型简单与否，我们通过规则函数来判断。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;$$E(w)=\frac{1}{N}\sum_{n=1}^{N} {y(x_n, w)-t_n}^2 + \lambda {\lVert w \rVert}^2$$&lt;/p&gt;
&lt;p&gt;关于机器学习的书很多都会讲到结构风险最小化，它是为了防止过拟合而提出来的策略。很多的讲解都以上面的公式作为例子，公式第一项是经验风险，第二项是表示模型复杂度的正则化项(或者说是对复杂模型的惩罚项)。&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://cheung.site/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="正则化" scheme="https://cheung.site/tags/%E6%AD%A3%E5%88%99%E5%8C%96/"/>
    
      <category term="结构风险最小化" scheme="https://cheung.site/tags/%E7%BB%93%E6%9E%84%E9%A3%8E%E9%99%A9%E6%9C%80%E5%B0%8F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Spark连接MySQL数据库</title>
    <link href="https://cheung.site/2018/04/08/connect-spark-to-mysql/"/>
    <id>https://cheung.site/2018/04/08/connect-spark-to-mysql/</id>
    <published>2018-04-08T07:28:54.000Z</published>
    <updated>2019-05-13T11:59:26.726Z</updated>
    
    <content type="html"><![CDATA[<p>Spark官方的spark-assembly包集合里面没有连接MySQL需要的jar包，报错<code>java.lang.ClassNotFoundException: com.mysql.jdbc.Driver</code>，需要先去下载一个<a href="https://dev.mysql.com/downloads/connector/j/" target="_blank" rel="noopener">MySQL Connector</a>解压后把<code>mysql-connector-java-5.1.46.jar</code>包含到Project的Libraries中。连接所需要的参数用<code>option(&quot;name&quot;, &quot;value&quot;)</code>来指定，详情参照以下代码。</p><a id="more"></a><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SQLContext</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Created by WahCheung on 2018/4/8.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="keyword">this</span>.getClass.getSimpleName).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">    <span class="keyword">val</span> sqlContext: <span class="type">SQLContext</span> = <span class="keyword">new</span> <span class="type">SQLContext</span>(sc)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> df = sqlContext.read.format(<span class="string">"jdbc"</span>).option(<span class="string">"url"</span>, <span class="string">"jdbc:mysql://your_ip_address/your_database"</span>).option(<span class="string">"driver"</span>, <span class="string">"com.mysql.jdbc.Driver"</span>)</span><br><span class="line">      .option(<span class="string">"dbtable"</span>, <span class="string">"your_table"</span>).option(<span class="string">"user"</span>, <span class="string">"your_name"</span>).option(<span class="string">"password"</span>, <span class="string">"your_password"</span>).load()  <span class="comment">// df是DataFrame类型</span></span><br><span class="line"></span><br><span class="line">    println(<span class="string">s"number of records fetched: <span class="subst">$&#123;df.count()&#125;</span>"</span>)</span><br><span class="line">    df.printSchema()  <span class="comment">// 打印结构</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果连接信息出错，会出现<code>java.lang.NullPointerException</code>，检查<code>val df = ...</code>那一行看看有没有什么地方写错了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spark官方的spark-assembly包集合里面没有连接MySQL需要的jar包，报错&lt;code&gt;java.lang.ClassNotFoundException: com.mysql.jdbc.Driver&lt;/code&gt;，需要先去下载一个&lt;a href=&quot;https://dev.mysql.com/downloads/connector/j/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MySQL Connector&lt;/a&gt;解压后把&lt;code&gt;mysql-connector-java-5.1.46.jar&lt;/code&gt;包含到Project的Libraries中。连接所需要的参数用&lt;code&gt;option(&amp;quot;name&amp;quot;, &amp;quot;value&amp;quot;)&lt;/code&gt;来指定，详情参照以下代码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spark" scheme="https://cheung.site/tags/Spark/"/>
    
      <category term="MySQL" scheme="https://cheung.site/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>层次聚类</title>
    <link href="https://cheung.site/2018/01/30/hierarchical-clustering/"/>
    <id>https://cheung.site/2018/01/30/hierarchical-clustering/</id>
    <published>2018-01-30T07:52:56.000Z</published>
    <updated>2019-05-13T11:59:27.314Z</updated>
    
    <content type="html"><![CDATA[<p>层次聚类输出一个具有层次结构的簇集合，因此能够比扁平聚类输出的无结构簇集合提供更丰富的信息，代价是，层次聚类的时间复杂度至少是文档数目的平方级，较线性时间复杂度的K-均值算法和EM算法要差。</p><a id="more"></a><h3 id="凝聚式层次聚类"><a href="#凝聚式层次聚类" class="headerlink" title="凝聚式层次聚类"></a>凝聚式层次聚类</h3><p>层次聚类可以是自顶向下或自底向上的一个过程。自底向上的算法一开始将每篇文档都看成是一个簇，然后不断地对簇进行两两合并，直到所有文档都聚成一类为止。自底向上的聚类方法也因此被称为$HAC$。而自顶向下的方法则首先将所有文档看成一个簇，然后不断利用某种方法对簇进行分裂直到每篇文档都成为一个簇为止。在信息检索领域，自底向上的$HAC$方法更普遍。<br>合并策略：每次选取相似度最大的两个簇进行合并。不同的层次聚类方法的差异在于簇的相似度计算方法不同，因此也就具备不同的性质。<br>IR中介绍了四种层次聚类方法，分别是<strong>单连接聚类</strong>，<strong>全连接聚类</strong>，<strong>组平均聚类</strong>，<strong>质心聚类</strong>。层次聚类不需要事先指定簇的数目，但在一些应用中，我们希望聚类得到不想交的多个簇。此时，需要在聚类的层次结构中的某一点进行截断（停止聚类），常用截断方式有以下几种。</p><ul><li>在某个实现给定的相似度水平上进行截断。例如，当待结合的两个簇的结合相似度低于设定的阈值（如0.4）时，聚类终止。</li><li>当两个连续的聚类结果的结合相似度之差最大时进行截断。这种策略相当于寻找聚类的拐点，较大的差值意味着多增加一个簇之后的聚类结果质量会显著下降。</li><li>结构风险最小化。<br>$$K = \mathop{\arg\min}_{K’}[RSS(K’) + \lambda K’]$$<br>其中，$K’$指的是对层次结构进行截断后产生的结果簇的数目，$RSS$是残差平方和，而$\lambda$是每额外增加一个簇时的惩罚量。</li><li>和扁平聚类一样，也可以事先指定结果簇的数目K，在产生K个簇时进行截断。</li></ul><h3 id="单连接聚类及全连接聚类算法"><a href="#单连接聚类及全连接聚类算法" class="headerlink" title="单连接聚类及全连接聚类算法"></a>单连接聚类及全连接聚类算法</h3><p>在单连接聚类（single-link clustering或single-linkage clustering）中，两个簇之间的相似度定<br>义为<strong>两个最相似的成员之间的相似度</strong>。这种单连接的合并准则是局部的，它仅仅关注两个簇互相邻近的区域，而不考虑簇中更远的区域和簇的总体结构。<br>在全连接聚类（complete-link clustering 或complete-linkage clustering）中，两个簇之间的相似度定义为<strong>两个最不相似的成员之间的相似度</strong>，这相当于选择两个簇进行聚类，使得合并结果具有最短路径。全连接聚类准则是非局部的，聚类结果中的整体结构信息会影响合并的结果。这种聚类实际上相当于优先考虑具有较短直径的紧凑簇，而不是具有长直径的松散簇，当然这种做法可能会对离群点较为敏感，比如某个远离中心的文档会显著增加候选簇的直径从而完全改变最后的聚类结果。</p><h4 id="算法的图论解释"><a href="#算法的图论解释" class="headerlink" title="算法的图论解释"></a>算法的图论解释</h4><p>单连接和全连接聚类算法都可以用图论来解释。令$S_k$为第$k$步中两个簇合并后的结合相似度，$G(S_k)$为任意两点间相似度不低于$S_k$的点的连接图。对于单连接聚类，第$k$步后得到的簇其实是$G(S_k)$的连通分支；而采用全连接聚类在第$k$步后得到的簇则构成$G(S_k)$的最大团。上述基于图论的解释方法也是单连接和全连接聚类方法得名的由来。单连接方法中第k步的所谓单连接簇指的是这样一些点的集合：它们当中至少存在两个点之间的相似度满足$ \geq s_k$；而全连接方法中第$k$步的簇中所有点之间的相似度均满足$s \geq s_k$。</p><h3 id="组平均凝聚式聚类"><a href="#组平均凝聚式聚类" class="headerlink" title="组平均凝聚式聚类"></a>组平均凝聚式聚类</h3><p>GAAC（Group-average Agglomerative Clustering，组平均凝聚式聚类）通过计算所有文档($w_i \cup w_j$)之间的相似度来对簇的质量进行计算，因此可以避免在单连接和全连接准则中只计算一对文档相似度的缺陷。组平均聚类计算所有文档之间相似度的平均值，其中<strong>包括来自同一簇的文档</strong>，但不使用自相似度（文档与文档自身的相似度）。因此，簇$\omega_i$和$\omega_j$的组平均相似度($\verb|SIM-GA|$)计算公式如下：</p><p>$$\verb|SIM-GA|(\omega_i, \omega_j) = \frac{1}{(N_i+N_j)(N_i+N_j-1)}\sum_{d_m \in \omega_i\cup\omega_j},\sum_{d_n \in \omega_i\cup\omega_j, 且d_n \neq d_m} \vec d_m \cdot \vec d_n \tag{1}$$</p><p>其中，$\vec d$是文档$d$的长度归一化向量，$\cdot$是内积运算符，$N_i$和$N_j$分别是$\omega_i$和$\omega_j$中的文档数目。</p><p>组平均聚类的动机是要选择两个整体上一致性较高的簇进行合并。这个一致性，通过合并的簇$\omega_k=\omega_i\cup\omega_j$中两两文档之间相似度的均值来评估。</p><p>由于组平均聚类需要计算任意两个文档之间的相似度，其时间复杂度是$\Theta(N_i N_j)$。这个计算在某些条件下可以得到优化：当文档用单位向量表示(归一化)，并且相似度采用余弦相似度时，向量相似度之和等于向量和的相似度：</p><p>$$\sum_{d_m \in \omega_i},\sum_{d_n \in \omega_j}(\vec d_m \cdot \vec d_n) = \left(\sum_{d_m \in \omega_i} \vec d_m\right)\cdot\left(\sum_{d_n \in \omega_j} \vec d_n\right) \tag{2}$$</p><p>于是，有</p><p>$$\verb|SIM-GA|(\omega_i, \omega_j) = \frac{1}{(N_i+N_j)(N_i+N_j-1)}\left[\left(\sum_{d_m \in \omega_i\cup\omega_j}\vec d_m\right)^2 - (N_i+N_j)\right] \tag{3}$$</p><p>其中，式子右边的$(N_i+N_j)$是$N_i+N_j$个值为1的自相似度之和。假设两个向量和$\sum_{d_m \in \omega_i}\vec d_m$及$\sum_{d_n \in \omega_j}\vec d_n$已知，利用上述技巧可以在常数时间而不是$\Theta(N_i N_j)$内计算两个簇的相似度。而计算两个向量和$\sum_{d_m \in \omega_i}\vec d_m$及$\sum_{d_n \in \omega_j}\vec d_n$的时间复杂度是$\Theta(N_i+N_j)$</p><h4 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h4><p>关于上面说到的“当文档用单位向量表示(归一化)，并且相似度采用余弦相似度时，向量相似度之和等于向量和的相似度”，这个性质(即公式2)是由于单位向量的内积计算满足加法分配律。下面给出公式2的证明过程。<br>假设每篇文档有两个特征，用$x$和$y$表示，文档$d_m$的归一化表示为$(x_m, y_m)$。文档$d_m$和文档$d_n$的余弦相似度为</p><p>$$sim(d_m,d_n) = \frac{\vec d_m \cdot \vec d_n}{|\vec d_m||\vec d_n|} = \vec d_m \cdot \vec d_n = (x_m, y_m)\cdot(x_n, y_n) = x_mx_n+y_my_n$$</p><p>对于只有一篇文档($d_0$)的簇$w_j$，它与包含$N$篇文档的簇$w_i={d_1,d_2,\cdots,d_{N}}$的<strong>相似度的和</strong>为（根据定义，即$d_0$与$w_i$中所有文档的相似度的和）：<br>$$<br>\begin{align}<br>Sum(sim) &amp;= \sum_{d_n \in w_i} \vec d_0 \cdot \vec d_n \<br>    &amp;= \sum_{1\leq n \leq N} (x_0, y_0)\cdot(x_n, y_n) \<br>    &amp;= \sum_{1\leq n \leq N} (x_0x_n+y_0y_n) \<br>    &amp;= \left(x_0\sum_{1\leq n \leq N}x_n + y_0\sum_{1\leq n \leq N}y_n \right) \<br>    &amp;= \left(\vec d_0 \sum_{d_n \in w_i} \vec d_n\right)<br>\end{align}<br>$$</p><p>即：</p><p>$$\sum_{d_n \in w_i} \vec d_0 \cdot \vec d_n = \left(\vec d_0 \sum_{d_n \in w_i} \vec d_n\right) \tag{*}$$</p><p>若簇$w_i$包含多篇文档$(d_{1},d_{2},\cdots,d_{M})$，根据定义，计算簇$w_i$与簇$w_j$的<strong>相似度的和</strong>(包含$MN$个文档相似度，$M,N$分别是簇$w_i$与簇$w_j$的文档数目)：</p><p>$$<br>\begin{align}<br>Sum(sim)<br>&amp;= \sum_{d_m \in w_i}\sum_{d_n \in w_j}(\vec d_m \cdot \vec d_n) \<br>&amp;= \left[\left(\vec d_{1} \sum_{d_n \in w_j} \vec d_n\right) + \left(\vec d_{2} \sum_{d_n \in w_j} \vec d_n\right) + \cdots + \left(\vec d_{M} \sum_{d_n \in w_j} \vec d_n\right)\right] \tag{**}\end{align}<br>$$</p><p>上式记为[**]。<br>$\sum_{d_n \in w_j} \vec d_n$也是一个向量，记为$\vec d_s$，代入[**]：[注：下式推导的第二到第三行利用了公式[*]]</p><p>$$<br>\begin{align}<br>Sum(sim) &amp;= (\vec d_{1} \vec d_s + \vec d_{2} \vec d_s + \cdots + \vec d_{M} \vec d_s) \<br>    &amp;= \sum_{d_m \in w_i} (\vec d_m \cdot \vec d_s) \<br>    &amp;= \vec d_s \sum_{d_m \in w_i} \vec d_m \<br>    &amp;= \left(\sum_{d_n \in \omega_j} \vec d_n\right)\cdot\left(\sum_{d_m \in \omega_i} \vec d_m\right)<br>\end{align}<br>$$</p><p>$Sum(sim)$是向量相似度之和，上面等式右边即是向量和的相似度。即，<strong>向量相似度之和等于向量和的相似度</strong>，得证。</p><h3 id="质心聚类"><a href="#质心聚类" class="headerlink" title="质心聚类"></a>质心聚类</h3><p>在质心聚类中，将通过两个簇的质心相似度来定义这两个簇的相似度：</p><p>$$<br>\begin{align}<br>\verb|SIM-CENT|(w_i,w_j)<br>&amp;= \vec\mu(w_i) \cdot \vec\mu(w_j) \tag{5} \<br>&amp;= \left(\frac{1}{N_i} \sum_{d_m \in \omega_i} \vec d_m\right)\cdot\left(\frac{1}{N_j} \sum_{d_n \in \omega_j} \vec d_n\right) \<br>&amp;= \frac{1}{N_iN_j}\sum_{d_m \in w_i}\sum_{d_n \in w_j}(\vec d_m \cdot \vec d_n) \tag{6}<br>\end{align}<br>$$</p><p>公式(5)就是质心相似度。公式(6)则表明质心相似度等价于不同簇文档之间的平均相似度。注意与组平均聚类的区别。<br>与其他三种HAC算法相比，质心聚类方法不是单调的，可能会发生相似度的颠倒现象，也就是说聚类过程中相似度值有可能会下降。</p><h3 id="层次聚类的最优性"><a href="#层次聚类的最优性" class="headerlink" title="层次聚类的最优性"></a>层次聚类的最优性</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;层次聚类输出一个具有层次结构的簇集合，因此能够比扁平聚类输出的无结构簇集合提供更丰富的信息，代价是，层次聚类的时间复杂度至少是文档数目的平方级，较线性时间复杂度的K-均值算法和EM算法要差。&lt;/p&gt;
    
    </summary>
    
    
      <category term="聚类" scheme="https://cheung.site/tags/%E8%81%9A%E7%B1%BB/"/>
    
      <category term="信息检索" scheme="https://cheung.site/tags/%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>中文维基百科语料处理</title>
    <link href="https://cheung.site/2018/01/06/wikipedia/"/>
    <id>https://cheung.site/2018/01/06/wikipedia/</id>
    <published>2018-01-06T15:40:30.000Z</published>
    <updated>2019-05-13T11:59:26.110Z</updated>
    
    <content type="html"><![CDATA[<h3 id="中文维基百科语料下载"><a href="#中文维基百科语料下载" class="headerlink" title="中文维基百科语料下载"></a>中文维基百科语料下载</h3><p>中文维基百科语料下载地址：<a href="https://dumps.wikimedia.org/zhwiki/latest/" target="_blank" rel="noopener">https://dumps.wikimedia.org/zhwiki/latest/</a><br>选择<code>zhwiki-latest-pages-articles.xml.bz2</code></p><a id="more"></a><h3 id="安装gensim"><a href="#安装gensim" class="headerlink" title="安装gensim"></a>安装gensim</h3><p>gensim基于numpy和scipy，先安装这两个库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install numpy</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install scipy</span><br></pre></td></tr></table></figure><p>安装scipy时报错<code>pip._vendor.requests.packages.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host=&#39;pypi.python.org&#39;, port=443): Read timed out.</code><br>后面安装gensim是也报同样的错误，改为使用wheel文件安装。<br>scipy下载地址：<a href="https://pypi.python.org/pypi/scipy" target="_blank" rel="noopener">https://pypi.python.org/pypi/scipy</a><br>gensim下载地址：<a href="https://pypi.python.org/pypi/gensim" target="_blank" rel="noopener">https://pypi.python.org/pypi/gensim</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install scipy-1.0.0-cp36-none-win_amd64.whl</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install gensim-3.2.0-cp36-cp36m-win_amd64.whl</span><br></pre></td></tr></table></figure><h3 id="中文维基百科语料提取"><a href="#中文维基百科语料提取" class="headerlink" title="中文维基百科语料提取"></a>中文维基百科语料提取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> gensim.corpora <span class="keyword">import</span> WikiCorpus</span><br><span class="line"><span class="keyword">from</span> codecs <span class="keyword">import</span> open</span><br><span class="line"></span><br><span class="line">logging.basicConfig(format=<span class="string">'%(asctime)s : %(levelname)s : %(message)s'</span>, level=logging.INFO)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    logging.info(<span class="string">"running start at %s"</span> % time.time())</span><br><span class="line"></span><br><span class="line">    inp = <span class="string">'../data/zhwiki-latest-pages-articles.xml.bz2'</span></span><br><span class="line">    outp = <span class="string">'../data/zhwiki'</span></span><br><span class="line"></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    output = open(outp, <span class="string">'w'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    wiki = WikiCorpus(inp, lemmatize=<span class="literal">False</span>, dictionary=&#123;&#125;)</span><br><span class="line">    <span class="keyword">for</span> text <span class="keyword">in</span> wiki.get_texts():</span><br><span class="line">        output.write(<span class="string">" "</span>.join(text) + <span class="string">"\n"</span>)</span><br><span class="line">        cnt = cnt + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> cnt % <span class="number">10000</span> == <span class="number">0</span>:</span><br><span class="line">            logging.info(<span class="string">"saved %s articles"</span> % cnt)</span><br><span class="line">    output.close()</span><br><span class="line">    logging.info(<span class="string">"saved all %s articles"</span> % cnt)</span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">"running end at %s"</span> % time.time())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">C:\Software\Python36\python.exe D:/Workspace/Wikipedia/src/process_wiki.py</span><br><span class="line">2018-01-07 17:50:42,994 : INFO : running start at 1515318642.9940503</span><br><span class="line">C:\Software\Python36\lib\site-packages\gensim\utils.py:860: UserWarning: detected Windows; aliasing chunkize to chunkize_serial</span><br><span class="line">  warnings.warn(&quot;detected Windows; aliasing chunkize to chunkize_serial&quot;)  # 这个UserWarning多次出现，不必理会</span><br><span class="line">2018-01-07 17:51:07,901 : INFO : saved 10000 articles</span><br><span class="line">2018-01-07 17:51:29,050 : INFO : saved 20000 articles</span><br><span class="line">2018-01-07 17:51:47,826 : INFO : saved 30000 articles</span><br><span class="line">...</span><br><span class="line">2018-01-07 18:06:38,324 : INFO : saved 290000 articles</span><br><span class="line">2018-01-07 18:07:14,165 : INFO : saved 300000 articles</span><br><span class="line">2018-01-07 18:07:37,254 : INFO : finished iterating over Wikipedia corpus of 306129 documents with 69298936 positions (total 3067015 articles, 82501223 positions before pruning articles shorter than 50 words)</span><br><span class="line">2018-01-07 18:07:37,405 : INFO : saved all 306129 articles</span><br><span class="line">2018-01-07 18:07:37,405 : INFO : running end at 1515319657.4056065</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h3 id="使用结巴分词对语料进行分词"><a href="#使用结巴分词对语料进行分词" class="headerlink" title="使用结巴分词对语料进行分词"></a>使用结巴分词对语料进行分词</h3><p>如果还没安装jieba分词的话，通过以下命令安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install jieba</span><br></pre></td></tr></table></figure><p>使用结巴分词，对语料进行分词，每篇文章输出依旧是一行。程序耗时差不多一个小时。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import time</span><br><span class="line">import logging</span><br><span class="line">from codecs import open</span><br><span class="line">import jieba</span><br><span class="line"></span><br><span class="line">logging.basicConfig(format=&apos;%(asctime)s : %(levelname)s : %(message)s&apos;, level=logging.INFO)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    logging.info(&quot;running start at %s&quot; % time.time())</span><br><span class="line"></span><br><span class="line">    inp = &apos;../data/zhwiki&apos;</span><br><span class="line">    outp = &apos;../data/zhwiki_seg&apos;</span><br><span class="line">    cnt = 0</span><br><span class="line">    output = open(outp, &apos;w&apos;, &apos;utf-8&apos;)</span><br><span class="line">    with open(inp, &apos;r&apos;, &apos;utf-8&apos;) as inp:</span><br><span class="line">        for text in inp:</span><br><span class="line">            words = jieba.cut(text)</span><br><span class="line">            words = filter(lambda w: w != &quot; &quot;, words)</span><br><span class="line">            output.write(&quot; &quot;.join(words))</span><br><span class="line">            cnt += 1</span><br><span class="line">            if cnt % 10000 == 0:</span><br><span class="line">                logging.info(&quot;saved %s articles&quot; % cnt)</span><br><span class="line">    output.close()</span><br><span class="line">    logging.info(&quot;saved all %s articles&quot; % cnt)</span><br><span class="line">    logging.info(&quot;running start at %s&quot; % time.time())</span><br></pre></td></tr></table></figure><p>参考文献：<br>[1] <a href="http://www.52nlp.cn/%E4%B8%AD%E8%8B%B1%E6%96%87%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91%E8%AF%AD%E6%96%99%E4%B8%8A%E7%9A%84word2vec%E5%AE%9E%E9%AA%8C" target="_blank" rel="noopener">中英文维基百科语料上的Word2Vec实验</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;中文维基百科语料下载&quot;&gt;&lt;a href=&quot;#中文维基百科语料下载&quot; class=&quot;headerlink&quot; title=&quot;中文维基百科语料下载&quot;&gt;&lt;/a&gt;中文维基百科语料下载&lt;/h3&gt;&lt;p&gt;中文维基百科语料下载地址：&lt;a href=&quot;https://dumps.wikimedia.org/zhwiki/latest/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://dumps.wikimedia.org/zhwiki/latest/&lt;/a&gt;&lt;br&gt;选择&lt;code&gt;zhwiki-latest-pages-articles.xml.bz2&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="自然语言处理" scheme="https://cheung.site/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="维基百科" scheme="https://cheung.site/tags/%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91/"/>
    
      <category term="Gensim" scheme="https://cheung.site/tags/Gensim/"/>
    
  </entry>
  
  <entry>
    <title>搭建Windows C++开发环境</title>
    <link href="https://cheung.site/2018/01/05/setup-cpp-development-environment-on-windows/"/>
    <id>https://cheung.site/2018/01/05/setup-cpp-development-environment-on-windows/</id>
    <published>2018-01-05T14:52:48.000Z</published>
    <updated>2019-05-13T11:59:26.122Z</updated>
    
    <content type="html"><![CDATA[<p>Windows下可用的C++ IDE有不少，毕业前一直用的都是微软的Visual Studio，从VS2010到VS2017，调试特别简单，功能也非常丰富。缺点是不支持多平台。其安装包也很大，高达几个GB，业余时间用来写点小代码感觉就是杀鸡用牛刀…换了不少的IDE，都觉得不太满意，Code::Blocks有集成了mingw的版本，安装和使用都特别简单，但感觉界面风格有点老气…换来换去，最终选择了Eclipse CDT + MinGW的组合。</p><a id="more"></a><h3 id="关于MinGW"><a href="#关于MinGW" class="headerlink" title="关于MinGW"></a>关于MinGW</h3><p>百度搜索<code>mingw</code>大概会指向<code>http://mingw.org/</code>，但这个网站的mingw已经很久没更新了，被坑了很多次，发现下载的版本竟然是10年前的。后来在<a href="https://tieba.baidu.com/p/5487544851" target="_blank" rel="noopener">贴吧</a>发现了mingw现在的官网，地址是 <a href="http://www.mingw-w64.org" target="_blank" rel="noopener">http://www.mingw-w64.org</a><br>首页介绍mingw-w64如下：</p><blockquote><p>Mingw-w64 is an advancement of the original mingw.org project, created to support the GCC compiler on Windows systems. It has forked it in 2007 in order to provide support for 64 bits and new APIs. It has since then gained widespread use and distribution.</p></blockquote><p>看来旧版mingw网站已经停更10年了。<a href="https://tieba.baidu.com/p/5487544851" target="_blank" rel="noopener">mingw吧</a>提供了新版mingw网站的mingw版本介绍和下载方法。<br>下载方式：前往 <a href="https://sourceforge.net/projects/mingw-w64/files/?source=navbar" target="_blank" rel="noopener">https://sourceforge.net/projects/mingw-w64/files/?source=navbar</a><br>页面下拉，选择需要的版本，然后点击链接，跳转之后自动下载。</p><h3 id="MinGW-Distro"><a href="#MinGW-Distro" class="headerlink" title="MinGW Distro"></a>MinGW Distro</h3><p>贴吧发现的，推荐这个发行版，简单易用，对新手友好。<br>MinGW Distro是gcc的一个发行版本，集成了boost，由Stephan T. Lavavej个人进行维护，STL的个人网站 <a href="https://nuwen.net/mingw.html" target="_blank" rel="noopener">https://nuwen.net/mingw.html</a> 有关于MinGW Distro的详细介绍和下载链接。<br>下载后，直接解压到C盘根目录，会得到一个MinGW的解压文件夹。</p><h3 id="Eclipse-C-开发"><a href="#Eclipse-C-开发" class="headerlink" title="Eclipse C++开发"></a>Eclipse C++开发</h3><p>下载Eclipse CDT版本，解压安装。新建CPP Project，编译器路径选择C:\MinGW。<br>若遇到“Launch failed. Binary not found”，依次选择Project / Properties / C/C++ Build / Settings /Binary parsers:<br>勾选“PE Windows Parser”。<br>每次run/debug之前记得先build project。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows下可用的C++ IDE有不少，毕业前一直用的都是微软的Visual Studio，从VS2010到VS2017，调试特别简单，功能也非常丰富。缺点是不支持多平台。其安装包也很大，高达几个GB，业余时间用来写点小代码感觉就是杀鸡用牛刀…换了不少的IDE，都觉得不太满意，Code::Blocks有集成了mingw的版本，安装和使用都特别简单，但感觉界面风格有点老气…换来换去，最终选择了Eclipse CDT + MinGW的组合。&lt;/p&gt;
    
    </summary>
    
      <category term="开发环境" scheme="https://cheung.site/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="C++" scheme="https://cheung.site/tags/C/"/>
    
      <category term="MinGW" scheme="https://cheung.site/tags/MinGW/"/>
    
  </entry>
  
  <entry>
    <title>MMSEG中文分词</title>
    <link href="https://cheung.site/2017/12/11/maximum-matching-segmentation-for-chinese-text/"/>
    <id>https://cheung.site/2017/12/11/maximum-matching-segmentation-for-chinese-text/</id>
    <published>2017-12-11T07:25:09.000Z</published>
    <updated>2019-05-13T11:59:26.090Z</updated>
    
    <content type="html"><![CDATA[<p>对经典的MMSEG中文分词做一下笔记。<br>论文地址: <a href="http://technology.chtsai.org/mmseg/" target="_blank" rel="noopener">MMSEG: A Word Identification System for Mandarin Chinese Text Based on Two Variants of the Maximum Matching Algorithm</a></p><a id="more"></a><h3 id="词典（The-Lexicon）"><a href="#词典（The-Lexicon）" class="headerlink" title="词典（The Lexicon）"></a>词典（The Lexicon）</h3><p>词典包含两部分，第一部分是中文的词汇表，这部分是从网络搜集的中文词汇。第二部分是中文词汇及其附加的使用频率，用于MMSEG分词的最后一条规则。</p><h3 id="歧义消除规则"><a href="#歧义消除规则" class="headerlink" title="歧义消除规则"></a>歧义消除规则</h3><p>chunk：几个词组成的块，例如句子“晚上/一起/吃饭/吧”，“晚上/一起/吃饭”就是三个词组成的chunk，“吃饭/吧”是两个词组成的chunk。本文讨论的最大匹配规则中的chunk的最大长度设置为3。</p><h4 id="最大匹配（Maximum-matching）"><a href="#最大匹配（Maximum-matching）" class="headerlink" title="最大匹配（Maximum matching）"></a>最大匹配（Maximum matching）</h4><p>从最长的chunk中选取第一个单词，若有多个chunk的长度都是最长的，则应用下一条规则。</p><p>例如对于“眼看就要来了”，从“眼”开始的chunk有以下几个，“眼看 就要 来了”这个chunk最长，选取这个chunk的第一个词“眼看”作为分词结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 眼看 就要 来了</span><br><span class="line">2. 眼看 就要 来</span><br><span class="line">3. 眼看 就 要</span><br><span class="line">4. 眼 看 就要</span><br><span class="line">5. 眼 看 就</span><br></pre></td></tr></table></figure><h4 id="最大化平均词长（Largest-average-word-length）"><a href="#最大化平均词长（Largest-average-word-length）" class="headerlink" title="最大化平均词长（Largest average word length）"></a>最大化平均词长（Largest average word length）</h4><p>这个规则基于“多字词比单字词更常见”的假设。<br>由于chunk的单词数是定长的（一般设置为3），在文本的结尾很可能只剩下不足3个单词。例如，下面的chunks的长度是一样的，但平均长度不同。这个规则会选取平均长度最大的chunk的第一个单词。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. _C1_ _C2_ _C3_</span><br><span class="line">2. _C1C2C3_</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 国际化</span><br><span class="line">2. 国际 化</span><br><span class="line">3. 国 际 化</span><br></pre></td></tr></table></figure><p>在上面的例子中，选取的是<code>_C1C2C3_</code>。<code>国际化</code>的分词是这个规则的一个应用实例。<br>这个规则只适用于chunk的单词数不足预设的值的情况（一般设定chunk的单词数为3），常见于文本末尾的分词，或者是短文本。<br>所有三个词组成的chunk，如果总长度是一样的话，平均长度也会是一样的。此时，需要进一步的歧义消除。</p><h4 id="最小化词长方差（Smallest-variance-of-word-lengths）"><a href="#最小化词长方差（Smallest-variance-of-word-lengths）" class="headerlink" title="最小化词长方差（Smallest variance of word lengths）"></a>最小化词长方差（Smallest variance of word lengths）</h4><p>这个规则基于“单词长度更倾向于均匀分布”的假设。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. _C1C2_ _C3C4_ _C5C6_</span><br><span class="line">2. _C1C2C3_ _C4_ _C5C6_</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">研究 生命 起源</span><br><span class="line">研究生 命 起源</span><br></pre></td></tr></table></figure><p>选取词长变化最小的chunk的第一个词。词长变化一般用词长的方差来衡量。在上面的例子中，这个规则会选取<code>_C1C2_</code>作为分词结果。</p><h4 id="最大化单字词语素自由度-（Largest-sum-of-degree-of-morphemic-freedom-of-one-character-words）"><a href="#最大化单字词语素自由度-（Largest-sum-of-degree-of-morphemic-freedom-of-one-character-words）" class="headerlink" title="最大化单字词语素自由度 （Largest sum of degree of morphemic freedom of one-character words）"></a>最大化单字词语素自由度 （Largest sum of degree of morphemic freedom of one-character words）</h4><p>下面两个chunk的长度、词长方差、平均长度都一样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. _C1_ _C2_ _C3C4_</span><br><span class="line">2. _C1_ _C2C3_ _C4_</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">主要 是 因为</span><br><span class="line">主 要是 因为</span><br></pre></td></tr></table></figure><p>这个规则只考虑仅包含一个汉字的单字词。一个词的使用频率越高则它的自由度也越高，一个被高频使用的汉字更可能是一个单字词。计算chunk的自由度的方法是对单字词的词频的对数值求和。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对经典的MMSEG中文分词做一下笔记。&lt;br&gt;论文地址: &lt;a href=&quot;http://technology.chtsai.org/mmseg/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MMSEG: A Word Identification System for Mandarin Chinese Text Based on Two Variants of the Maximum Matching Algorithm&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="自然语言处理" scheme="https://cheung.site/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="中文分词" scheme="https://cheung.site/tags/%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/"/>
    
      <category term="MMSEG" scheme="https://cheung.site/tags/MMSEG/"/>
    
  </entry>
  
</feed>
